# Generate gl3w files
include("${OTTO_EXTERNAL_DIR}/gl3w_gen.cmake")
gl3w_gen("${OTTO_EXTERNAL_DIR}/")

# GLFW
find_package(glfw3)
if (glfw3_FOUND)
    message("Using system GLFW")
    #pkg_search_module(GLFW REQUIRED glfw3)
    include_directories(${GLFW_INCLUDE_DIRS})
    target_link_libraries(otto ${GLFW_LIBRARIES})
    target_link_libraries(otto PUBLIC dl)
else() 
    message("GLFW not found, building from source")
    set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL "Build GLFW examples")
    set(GLFW_BUILD_TESTS OFF CACHE BOOL "Build GLFW tests")
    execute_process(COMMAND git submodule update --init -- glfw WORKING_DIRECTORY ${OTTO_EXTERNAL_DIR})
    add_subdirectory(${OTTO_EXTERNAL_DIR}/glfw ${OTTO_BINARY_DIR}/external/glfw)
endif()

if (OTTO_DEBUG_UI)
    set(NANOGUI_BUILD_EXAMPLE OFF CACHE BOOL "")
    set(NANOGUI_BUILD_PYTHON OFF CACHE BOOL "")
    set(NANOGUI_EXTERNAL_GLFW glfw CACHE TARGET "")
    set(NANOGUI_EXTERNAL_NANOVG nanovg CACHE TARGET "")
    #execute_process(COMMAND git submodule update --init --recursive -- nanogui WORKING_DIRECTORY ${OTTO_EXTERNAL_DIR})
    add_subdirectory(${OTTO_EXTERNAL_DIR}/nanogui ${OTTO_BINARY_DIR}/external/nanogui)
    target_compile_definitions(nanogui PUBLIC ${NANOGUI_EXTRA_DEFS})
    target_include_directories(nanogui PUBLIC ${NANOGUI_EXTRA_INCS} ${OTTO_SOURCE_DIR}/external/nanogui/include)
    target_link_libraries(otto PUBLIC nanogui)
endif()

target_link_libraries(otto PUBLIC glfw)
