//----------------------------------------------------------
// name: "tsar"
//
// Code generated with Faust 2.13.11 (https://faust.grame.fr)
//----------------------------------------------------------

/* link with  */
#include <math.h>
#ifndef FAUSTPOWER
#define FAUSTPOWER
#include <cmath>
template <int N> inline int faustpower(int x)              { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <> 	 inline int faustpower<0>(int x)            { return 1; }
template <> 	 inline int faustpower<1>(int x)            { return x; }
template <> 	 inline int faustpower<2>(int x)            { return x*x; }
template <int N> inline float faustpower(float x)            { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <> 	 inline float faustpower<0>(float x)          { return 1; }
template <> 	 inline float faustpower<1>(float x)          { return x; }
template <> 	 inline float faustpower<2>(float x)          { return x*x; }
#endif
#include <math.h>
#include <algorithm>

#include <faust/gui/UI.h>
#include <faust/gui/meta.h>
#include <faust/dsp/dsp.h>

using std::max;
using std::min;

/********************************
	VECTOR INTRINSICS
*********************************/


/********************************
	ABSTRACT USER INTERFACE
*********************************/

#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS faust_tsar
#endif

class faust_tsar : public dsp {
  private:
	int 	iVec0[3];
	FAUSTFLOAT 	fslider0;
	float 	fRec0[2];
	float 	fConst0;
	float 	fConst1;
	float 	fTempPerm0;
	float 	fTempPerm1;
	float 	fTempPerm2;
	float 	fTempPerm3;
	float 	fTempPerm4;
	float 	fTempPerm5;
	float 	fTempPerm6;
	float 	fTempPerm7;
	float 	fTempPerm8;
	float 	fTempPerm9;
	float 	fTempPerm10;
	float 	fTempPerm11;
	float 	fTempPerm12;
	float 	fTempPerm13;
	float 	fTempPerm14;
	float 	fTempPerm15;
	float 	fTempPerm16;
	float 	fTempPerm17;
	float 	fTempPerm18;
	float 	fTempPerm19;
	float 	fTempPerm20;
	float 	fTempPerm21;
	float 	fTempPerm22;
	float 	fTempPerm23;
	float 	fTempPerm24;
	FAUSTFLOAT 	fslider1;
	FAUSTFLOAT 	fslider2;
	FAUSTFLOAT 	fslider3;
	FAUSTFLOAT 	fbutton0;
	int 	iRec8[2];
	int 	iTempPerm25;
	float 	fConst2;
	float 	fTempPerm26;
	FAUSTFLOAT 	fslider4;
	float 	fRec7[2];
	float 	fTempPerm27;
	FAUSTFLOAT 	fslider5;
	FAUSTFLOAT 	fslider6;
	float 	fVec1[2];
	float 	fConst3;
	float 	fTempPerm28;
	float 	fRec9[2];
	float 	fTempPerm29;
	float 	fTempPerm30;
	float 	fVec2[2];
	float 	fConst4;
	float 	fTempPerm31;
	float 	fVec3[2];
	float 	fTempPerm32;
	FAUSTFLOAT 	fbutton1;
	int 	iRec11[2];
	int 	iTempPerm33;
	float 	fTempPerm34;
	float 	fRec10[2];
	float 	fTempPerm35;
	FAUSTFLOAT 	fslider7;
	FAUSTFLOAT 	fbutton2;
	int 	iRec13[2];
	int 	iTempPerm36;
	float 	fTempPerm37;
	float 	fRec12[2];
	float 	fTempPerm38;
	FAUSTFLOAT 	fslider8;
	FAUSTFLOAT 	fbutton3;
	int 	iRec15[2];
	int 	iTempPerm39;
	float 	fTempPerm40;
	float 	fRec14[2];
	float 	fTempPerm41;
	FAUSTFLOAT 	fslider9;
	FAUSTFLOAT 	fbutton4;
	int 	iRec17[2];
	int 	iTempPerm42;
	float 	fTempPerm43;
	float 	fRec16[2];
	float 	fTempPerm44;
	FAUSTFLOAT 	fslider10;
	FAUSTFLOAT 	fbutton5;
	int 	iRec19[2];
	int 	iTempPerm45;
	float 	fTempPerm46;
	float 	fRec18[2];
	float 	fTempPerm47;
	FAUSTFLOAT 	fslider11;
	FAUSTFLOAT 	fslider12;
	float 	fRec20[2];
	float 	fTempPerm48;
	float 	fConst5;
	float 	fVec4[2];
	float 	fTempPerm49;
	float 	fRec22[2];
	float 	fTempPerm50;
	float 	fTempPerm51;
	float 	fTempPerm52;
	float 	fVec5[2];
	float 	fTempPerm53;
	float 	fConst6;
	float 	fTempPerm54;
	int 	IOTA;
	float 	fVec6[4096];
	float 	fRec21[2];
	float 	fRec23[2];
	float 	fConst7;
	float 	fTempPerm55;
	float 	fVec7[2];
	float 	fTempPerm56;
	float 	fVec8[2];
	float 	fTempPerm57;
	float 	fVec9[4096];
	float 	fRec24[2];
	float 	fTempPerm58;
	int 	iTempPerm59;
	float 	fTempPerm60;
	FAUSTFLOAT 	fslider13;
	float 	fRec25[2];
	FAUSTFLOAT 	fslider14;
	float 	fRec26[2];
	float 	fTempPerm61;
	float 	fTempPerm62;
	float 	fTempPerm63;
	float 	fTempPerm64;
	float 	fVec10[2];
	float 	fTempPerm65;
	float 	fRec28[2];
	float 	fTempPerm66;
	float 	fTempPerm67;
	float 	fTempPerm68;
	float 	fVec11[2];
	float 	fTempPerm69;
	float 	fVec12[4096];
	float 	fTempPerm70;
	int 	iTempPerm71;
	float 	fTempPerm72;
	float 	fRec27[2];
	float 	fTempPerm73;
	float 	fTempPerm74;
	float 	fTempPerm75;
	float 	fTempPerm76;
	float 	fVec13[2];
	float 	fTempPerm77;
	float 	fRec30[2];
	float 	fTempPerm78;
	float 	fTempPerm79;
	float 	fTempPerm80;
	float 	fVec14[2];
	float 	fTempPerm81;
	float 	fVec15[4096];
	float 	fTempPerm82;
	int 	iTempPerm83;
	float 	fTempPerm84;
	float 	fRec29[2];
	float 	fConst8;
	float 	fTempPerm85;
	float 	fVec16[2];
	float 	fTempPerm86;
	float 	fVec17[2];
	float 	fTempPerm87;
	float 	fVec18[4096];
	float 	fTempPerm88;
	int 	iTempPerm89;
	float 	fTempPerm90;
	float 	fTempPerm91;
	float 	fVec19[2];
	float 	fTempPerm92;
	float 	fRec31[2];
	float 	fTempPerm93;
	float 	fTempPerm94;
	float 	fVec20[2];
	float 	fTempPerm95;
	float 	fVec21[2];
	float 	fTempPerm96;
	float 	fVec22[2];
	float 	fTempPerm97;
	float 	fVec23[2];
	float 	fTempPerm98;
	float 	fVec24[4096];
	float 	fTempPerm99;
	int 	iTempPerm100;
	float 	fTempPerm101;
	float 	fTempPerm102;
	float 	fVec25[2];
	float 	fTempPerm103;
	float 	fRec32[2];
	float 	fTempPerm104;
	float 	fTempPerm105;
	float 	fVec26[2];
	float 	fTempPerm106;
	float 	fVec27[2];
	float 	fConst9;
	float 	fVec28[2];
	float 	fTempPerm107;
	float 	fRec33[2];
	float 	fTempPerm108;
	float 	fTempPerm109;
	float 	fVec29[2];
	float 	fTempPerm110;
	float 	fVec30[2];
	float 	fVec31[2];
	float 	fTempPerm111;
	float 	fRec35[2];
	float 	fTempPerm112;
	float 	fTempPerm113;
	float 	fTempPerm114;
	float 	fVec32[2];
	float 	fTempPerm115;
	float 	fVec33[4096];
	float 	fRec34[2];
	float 	fConst10;
	float 	fTempPerm116;
	float 	fVec34[2];
	float 	fTempPerm117;
	float 	fVec35[2];
	float 	fTempPerm118;
	float 	fVec36[4096];
	float 	fTempPerm119;
	int 	iTempPerm120;
	float 	fTempPerm121;
	float 	fTempPerm122;
	float 	fTempPerm123;
	FAUSTFLOAT 	fslider15;
	float 	fVec37[2];
	float 	fTempPerm124;
	float 	fRec36[2];
	float 	fTempPerm125;
	float 	fTempPerm126;
	float 	fVec38[2];
	float 	fTempPerm127;
	float 	fVec39[2];
	float 	fVec40[2];
	float 	fTempPerm128;
	float 	fRec38[2];
	float 	fTempPerm129;
	float 	fTempPerm130;
	float 	fTempPerm131;
	float 	fVec41[2];
	float 	fTempPerm132;
	float 	fVec42[4096];
	float 	fRec37[2];
	float 	fTempPerm133;
	float 	fVec43[2];
	float 	fTempPerm134;
	float 	fVec44[2];
	float 	fTempPerm135;
	float 	fVec45[4096];
	float 	fTempPerm136;
	int 	iTempPerm137;
	float 	fTempPerm138;
	float 	fTempPerm139;
	float 	fTempPerm140;
	float 	fTempPerm141;
	float 	fVec46[2];
	float 	fTempPerm142;
	float 	fRec40[2];
	float 	fTempPerm143;
	float 	fTempPerm144;
	float 	fTempPerm145;
	float 	fVec47[2];
	float 	fTempPerm146;
	float 	fVec48[4096];
	float 	fTempPerm147;
	int 	iTempPerm148;
	float 	fTempPerm149;
	float 	fRec39[2];
	float 	fTempPerm150;
	float 	fTempPerm151;
	float 	fTempPerm152;
	float 	fVec49[2];
	float 	fTempPerm153;
	float 	fRec42[2];
	float 	fTempPerm154;
	float 	fTempPerm155;
	float 	fTempPerm156;
	float 	fVec50[2];
	float 	fTempPerm157;
	float 	fVec51[4096];
	float 	fTempPerm158;
	int 	iTempPerm159;
	float 	fTempPerm160;
	float 	fRec41[2];
	float 	fTempPerm161;
	float 	fVec52[2];
	float 	fTempPerm162;
	float 	fVec53[2];
	float 	fTempPerm163;
	float 	fVec54[4096];
	float 	fTempPerm164;
	int 	iTempPerm165;
	float 	fTempPerm166;
	float 	fTempPerm167;
	float 	fVec55[2];
	float 	fTempPerm168;
	float 	fRec43[2];
	float 	fTempPerm169;
	float 	fTempPerm170;
	float 	fVec56[2];
	float 	fTempPerm171;
	float 	fVec57[2];
	float 	fTempPerm172;
	float 	fVec58[2];
	float 	fTempPerm173;
	float 	fVec59[2];
	float 	fTempPerm174;
	float 	fVec60[4096];
	float 	fTempPerm175;
	int 	iTempPerm176;
	float 	fTempPerm177;
	float 	fTempPerm178;
	float 	fVec61[2];
	float 	fTempPerm179;
	float 	fRec44[2];
	float 	fTempPerm180;
	float 	fTempPerm181;
	float 	fVec62[2];
	float 	fTempPerm182;
	float 	fVec63[2];
	float 	fVec64[2];
	float 	fTempPerm183;
	float 	fRec45[2];
	float 	fTempPerm184;
	float 	fTempPerm185;
	float 	fVec65[2];
	float 	fTempPerm186;
	float 	fVec66[2];
	float 	fVec67[2];
	float 	fTempPerm187;
	float 	fRec47[2];
	float 	fTempPerm188;
	float 	fTempPerm189;
	float 	fTempPerm190;
	float 	fVec68[2];
	float 	fTempPerm191;
	float 	fVec69[4096];
	float 	fRec46[2];
	float 	fTempPerm192;
	float 	fVec70[2];
	float 	fTempPerm193;
	float 	fVec71[2];
	float 	fTempPerm194;
	float 	fVec72[4096];
	float 	fTempPerm195;
	int 	iTempPerm196;
	float 	fTempPerm197;
	float 	fTempPerm198;
	FAUSTFLOAT 	fslider16;
	float 	fVec73[2];
	float 	fTempPerm199;
	float 	fRec48[2];
	float 	fTempPerm200;
	float 	fTempPerm201;
	float 	fVec74[2];
	float 	fTempPerm202;
	float 	fVec75[2];
	float 	fVec76[2];
	float 	fTempPerm203;
	float 	fRec50[2];
	float 	fTempPerm204;
	float 	fTempPerm205;
	float 	fTempPerm206;
	float 	fVec77[2];
	float 	fTempPerm207;
	float 	fVec78[4096];
	float 	fRec49[2];
	float 	fTempPerm208;
	float 	fVec79[2];
	float 	fTempPerm209;
	float 	fVec80[2];
	float 	fTempPerm210;
	float 	fVec81[4096];
	float 	fTempPerm211;
	int 	iTempPerm212;
	float 	fTempPerm213;
	float 	fTempPerm214;
	float 	fTempPerm215;
	float 	fTempPerm216;
	float 	fVec82[2];
	float 	fTempPerm217;
	float 	fRec52[2];
	float 	fTempPerm218;
	float 	fTempPerm219;
	float 	fTempPerm220;
	float 	fVec83[2];
	float 	fTempPerm221;
	float 	fVec84[4096];
	float 	fTempPerm222;
	int 	iTempPerm223;
	float 	fTempPerm224;
	float 	fRec51[2];
	float 	fTempPerm225;
	float 	fTempPerm226;
	float 	fTempPerm227;
	float 	fVec85[2];
	float 	fTempPerm228;
	float 	fRec54[2];
	float 	fTempPerm229;
	float 	fTempPerm230;
	float 	fTempPerm231;
	float 	fVec86[2];
	float 	fTempPerm232;
	float 	fVec87[4096];
	float 	fTempPerm233;
	int 	iTempPerm234;
	float 	fTempPerm235;
	float 	fRec53[2];
	float 	fTempPerm236;
	float 	fVec88[2];
	float 	fTempPerm237;
	float 	fVec89[2];
	float 	fTempPerm238;
	float 	fVec90[4096];
	float 	fTempPerm239;
	int 	iTempPerm240;
	float 	fTempPerm241;
	float 	fTempPerm242;
	float 	fVec91[2];
	float 	fTempPerm243;
	float 	fRec55[2];
	float 	fTempPerm244;
	float 	fTempPerm245;
	float 	fVec92[2];
	float 	fTempPerm246;
	float 	fVec93[2];
	float 	fTempPerm247;
	float 	fVec94[2];
	float 	fTempPerm248;
	float 	fVec95[2];
	float 	fTempPerm249;
	float 	fVec96[4096];
	float 	fTempPerm250;
	int 	iTempPerm251;
	float 	fTempPerm252;
	float 	fTempPerm253;
	float 	fVec97[2];
	float 	fTempPerm254;
	float 	fRec56[2];
	float 	fTempPerm255;
	float 	fTempPerm256;
	float 	fVec98[2];
	float 	fTempPerm257;
	float 	fVec99[2];
	float 	fVec100[2];
	float 	fTempPerm258;
	float 	fRec57[2];
	float 	fTempPerm259;
	float 	fTempPerm260;
	float 	fVec101[2];
	float 	fTempPerm261;
	float 	fVec102[2];
	float 	fVec103[2];
	float 	fTempPerm262;
	float 	fRec59[2];
	float 	fTempPerm263;
	float 	fTempPerm264;
	float 	fTempPerm265;
	float 	fVec104[2];
	float 	fTempPerm266;
	float 	fVec105[4096];
	float 	fRec58[2];
	float 	fTempPerm267;
	float 	fVec106[2];
	float 	fTempPerm268;
	float 	fVec107[2];
	float 	fTempPerm269;
	float 	fVec108[4096];
	float 	fTempPerm270;
	int 	iTempPerm271;
	float 	fTempPerm272;
	float 	fTempPerm273;
	FAUSTFLOAT 	fslider17;
	float 	fVec109[2];
	float 	fTempPerm274;
	float 	fRec60[2];
	float 	fTempPerm275;
	float 	fTempPerm276;
	float 	fVec110[2];
	float 	fTempPerm277;
	float 	fVec111[2];
	float 	fVec112[2];
	float 	fTempPerm278;
	float 	fRec62[2];
	float 	fTempPerm279;
	float 	fTempPerm280;
	float 	fTempPerm281;
	float 	fVec113[2];
	float 	fTempPerm282;
	float 	fVec114[4096];
	float 	fRec61[2];
	float 	fTempPerm283;
	float 	fVec115[2];
	float 	fTempPerm284;
	float 	fVec116[2];
	float 	fTempPerm285;
	float 	fVec117[4096];
	float 	fTempPerm286;
	int 	iTempPerm287;
	float 	fTempPerm288;
	float 	fTempPerm289;
	float 	fTempPerm290;
	float 	fTempPerm291;
	float 	fVec118[2];
	float 	fTempPerm292;
	float 	fRec64[2];
	float 	fTempPerm293;
	float 	fTempPerm294;
	float 	fTempPerm295;
	float 	fVec119[2];
	float 	fTempPerm296;
	float 	fVec120[4096];
	float 	fTempPerm297;
	int 	iTempPerm298;
	float 	fTempPerm299;
	float 	fRec63[2];
	float 	fTempPerm300;
	float 	fTempPerm301;
	float 	fTempPerm302;
	float 	fVec121[2];
	float 	fTempPerm303;
	float 	fRec66[2];
	float 	fTempPerm304;
	float 	fTempPerm305;
	float 	fTempPerm306;
	float 	fVec122[2];
	float 	fTempPerm307;
	float 	fVec123[4096];
	float 	fTempPerm308;
	int 	iTempPerm309;
	float 	fTempPerm310;
	float 	fRec65[2];
	float 	fTempPerm311;
	float 	fVec124[2];
	float 	fTempPerm312;
	float 	fVec125[2];
	float 	fTempPerm313;
	float 	fVec126[4096];
	float 	fTempPerm314;
	int 	iTempPerm315;
	float 	fTempPerm316;
	float 	fTempPerm317;
	float 	fVec127[2];
	float 	fTempPerm318;
	float 	fRec67[2];
	float 	fTempPerm319;
	float 	fTempPerm320;
	float 	fVec128[2];
	float 	fTempPerm321;
	float 	fVec129[2];
	float 	fTempPerm322;
	float 	fVec130[2];
	float 	fTempPerm323;
	float 	fVec131[2];
	float 	fTempPerm324;
	float 	fVec132[4096];
	float 	fTempPerm325;
	int 	iTempPerm326;
	float 	fTempPerm327;
	float 	fTempPerm328;
	float 	fVec133[2];
	float 	fTempPerm329;
	float 	fRec68[2];
	float 	fTempPerm330;
	float 	fTempPerm331;
	float 	fVec134[2];
	float 	fTempPerm332;
	float 	fVec135[2];
	float 	fVec136[2];
	float 	fTempPerm333;
	float 	fRec69[2];
	float 	fTempPerm334;
	float 	fTempPerm335;
	float 	fVec137[2];
	float 	fTempPerm336;
	float 	fVec138[2];
	float 	fVec139[2];
	float 	fTempPerm337;
	float 	fRec71[2];
	float 	fTempPerm338;
	float 	fTempPerm339;
	float 	fTempPerm340;
	float 	fVec140[2];
	float 	fTempPerm341;
	float 	fVec141[4096];
	float 	fRec70[2];
	float 	fTempPerm342;
	float 	fVec142[2];
	float 	fTempPerm343;
	float 	fVec143[2];
	float 	fTempPerm344;
	float 	fVec144[4096];
	float 	fTempPerm345;
	int 	iTempPerm346;
	float 	fTempPerm347;
	float 	fTempPerm348;
	FAUSTFLOAT 	fslider18;
	float 	fVec145[2];
	float 	fTempPerm349;
	float 	fRec72[2];
	float 	fTempPerm350;
	float 	fTempPerm351;
	float 	fVec146[2];
	float 	fTempPerm352;
	float 	fVec147[2];
	float 	fVec148[2];
	float 	fTempPerm353;
	float 	fRec74[2];
	float 	fTempPerm354;
	float 	fTempPerm355;
	float 	fTempPerm356;
	float 	fVec149[2];
	float 	fTempPerm357;
	float 	fVec150[4096];
	float 	fRec73[2];
	float 	fTempPerm358;
	float 	fVec151[2];
	float 	fTempPerm359;
	float 	fVec152[2];
	float 	fTempPerm360;
	float 	fVec153[4096];
	float 	fTempPerm361;
	int 	iTempPerm362;
	float 	fTempPerm363;
	float 	fTempPerm364;
	float 	fTempPerm365;
	float 	fTempPerm366;
	float 	fVec154[2];
	float 	fTempPerm367;
	float 	fRec76[2];
	float 	fTempPerm368;
	float 	fTempPerm369;
	float 	fTempPerm370;
	float 	fVec155[2];
	float 	fTempPerm371;
	float 	fVec156[4096];
	float 	fTempPerm372;
	int 	iTempPerm373;
	float 	fTempPerm374;
	float 	fRec75[2];
	float 	fTempPerm375;
	float 	fTempPerm376;
	float 	fTempPerm377;
	float 	fVec157[2];
	float 	fTempPerm378;
	float 	fRec78[2];
	float 	fTempPerm379;
	float 	fTempPerm380;
	float 	fTempPerm381;
	float 	fVec158[2];
	float 	fTempPerm382;
	float 	fVec159[4096];
	float 	fTempPerm383;
	int 	iTempPerm384;
	float 	fTempPerm385;
	float 	fRec77[2];
	float 	fTempPerm386;
	float 	fVec160[2];
	float 	fTempPerm387;
	float 	fVec161[2];
	float 	fTempPerm388;
	float 	fVec162[4096];
	float 	fTempPerm389;
	int 	iTempPerm390;
	float 	fTempPerm391;
	float 	fTempPerm392;
	float 	fVec163[2];
	float 	fTempPerm393;
	float 	fRec79[2];
	float 	fTempPerm394;
	float 	fTempPerm395;
	float 	fVec164[2];
	float 	fTempPerm396;
	float 	fVec165[2];
	float 	fTempPerm397;
	float 	fVec166[2];
	float 	fTempPerm398;
	float 	fVec167[2];
	float 	fTempPerm399;
	float 	fVec168[4096];
	float 	fTempPerm400;
	int 	iTempPerm401;
	float 	fTempPerm402;
	float 	fTempPerm403;
	float 	fVec169[2];
	float 	fTempPerm404;
	float 	fRec80[2];
	float 	fTempPerm405;
	float 	fTempPerm406;
	float 	fVec170[2];
	float 	fTempPerm407;
	float 	fVec171[2];
	float 	fVec172[2];
	float 	fTempPerm408;
	float 	fRec81[2];
	float 	fTempPerm409;
	float 	fTempPerm410;
	float 	fVec173[2];
	float 	fTempPerm411;
	float 	fVec174[2];
	float 	fVec175[2];
	float 	fTempPerm412;
	float 	fRec83[2];
	float 	fTempPerm413;
	float 	fTempPerm414;
	float 	fTempPerm415;
	float 	fVec176[2];
	float 	fTempPerm416;
	float 	fVec177[4096];
	float 	fRec82[2];
	float 	fTempPerm417;
	float 	fVec178[2];
	float 	fTempPerm418;
	float 	fVec179[2];
	float 	fTempPerm419;
	float 	fVec180[4096];
	float 	fTempPerm420;
	int 	iTempPerm421;
	float 	fTempPerm422;
	float 	fTempPerm423;
	FAUSTFLOAT 	fslider19;
	float 	fVec181[2];
	float 	fTempPerm424;
	float 	fRec84[2];
	float 	fTempPerm425;
	float 	fTempPerm426;
	float 	fVec182[2];
	float 	fTempPerm427;
	float 	fVec183[2];
	float 	fVec184[2];
	float 	fTempPerm428;
	float 	fRec86[2];
	float 	fTempPerm429;
	float 	fTempPerm430;
	float 	fTempPerm431;
	float 	fVec185[2];
	float 	fTempPerm432;
	float 	fVec186[4096];
	float 	fRec85[2];
	float 	fTempPerm433;
	float 	fVec187[2];
	float 	fTempPerm434;
	float 	fVec188[2];
	float 	fTempPerm435;
	float 	fVec189[4096];
	float 	fTempPerm436;
	int 	iTempPerm437;
	float 	fTempPerm438;
	float 	fTempPerm439;
	float 	fTempPerm440;
	float 	fTempPerm441;
	float 	fVec190[2];
	float 	fTempPerm442;
	float 	fRec88[2];
	float 	fTempPerm443;
	float 	fTempPerm444;
	float 	fTempPerm445;
	float 	fVec191[2];
	float 	fTempPerm446;
	float 	fVec192[4096];
	float 	fTempPerm447;
	int 	iTempPerm448;
	float 	fTempPerm449;
	float 	fRec87[2];
	float 	fTempPerm450;
	float 	fTempPerm451;
	float 	fTempPerm452;
	float 	fVec193[2];
	float 	fTempPerm453;
	float 	fRec90[2];
	float 	fTempPerm454;
	float 	fTempPerm455;
	float 	fTempPerm456;
	float 	fVec194[2];
	float 	fTempPerm457;
	float 	fVec195[4096];
	float 	fTempPerm458;
	int 	iTempPerm459;
	float 	fTempPerm460;
	float 	fRec89[2];
	float 	fTempPerm461;
	float 	fVec196[2];
	float 	fTempPerm462;
	float 	fVec197[2];
	float 	fTempPerm463;
	float 	fVec198[4096];
	float 	fTempPerm464;
	int 	iTempPerm465;
	float 	fTempPerm466;
	float 	fTempPerm467;
	float 	fVec199[2];
	float 	fTempPerm468;
	float 	fRec91[2];
	float 	fTempPerm469;
	float 	fTempPerm470;
	float 	fVec200[2];
	float 	fTempPerm471;
	float 	fVec201[2];
	float 	fTempPerm472;
	float 	fVec202[2];
	float 	fTempPerm473;
	float 	fVec203[2];
	float 	fTempPerm474;
	float 	fVec204[4096];
	float 	fTempPerm475;
	int 	iTempPerm476;
	float 	fTempPerm477;
	float 	fTempPerm478;
	float 	fVec205[2];
	float 	fTempPerm479;
	float 	fRec92[2];
	float 	fTempPerm480;
	float 	fTempPerm481;
	float 	fVec206[2];
	float 	fTempPerm482;
	float 	fVec207[2];
	float 	fVec208[2];
	float 	fTempPerm483;
	float 	fRec93[2];
	float 	fTempPerm484;
	float 	fTempPerm485;
	float 	fVec209[2];
	float 	fTempPerm486;
	float 	fVec210[2];
	float 	fVec211[2];
	float 	fTempPerm487;
	float 	fRec95[2];
	float 	fTempPerm488;
	float 	fTempPerm489;
	float 	fTempPerm490;
	float 	fVec212[2];
	float 	fTempPerm491;
	float 	fVec213[4096];
	float 	fRec94[2];
	float 	fTempPerm492;
	float 	fVec214[2];
	float 	fTempPerm493;
	float 	fVec215[2];
	float 	fTempPerm494;
	float 	fVec216[4096];
	float 	fTempPerm495;
	int 	iTempPerm496;
	float 	fTempPerm497;
	float 	fTempPerm498;
	float 	fTempPerm499;
	float 	fTempPerm500;
	float 	fRec6[2];
	float 	fRec4[2];
	float 	fTempPerm501;
	float 	fTempPerm502;
	float 	fRec3[2];
	float 	fRec1[2];
	int fSamplingFreq;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("basics.lib/name", "Faust Basic Element Library");
		m->declare("basics.lib/version", "0.0");
		m->declare("filename", "tsar");
		m->declare("filters.lib/name", "Faust Filters Library");
		m->declare("filters.lib/version", "0.0");
		m->declare("maths.lib/author", "GRAME");
		m->declare("maths.lib/copyright", "GRAME");
		m->declare("maths.lib/license", "LGPL with exception");
		m->declare("maths.lib/name", "Faust Math Library");
		m->declare("maths.lib/version", "2.1");
		m->declare("name", "tsar");
		m->declare("oscillators.lib/name", "Faust Oscillator Library");
		m->declare("oscillators.lib/version", "0.0");
		m->declare("signals.lib/name", "Faust Signal Routing Library");
		m->declare("signals.lib/version", "0.0");
		m->declare("vaeffects.lib/name", "Faust Virtual Analog Filter Effect Library");
		m->declare("vaeffects.lib/version", "0.0");
	}

	virtual int getNumInputs() { return 0; }
	virtual int getNumOutputs() { return 1; }
	static void classInit(int samplingFreq) {
	}
	virtual void instanceConstants(int samplingFreq) {
		fSamplingFreq = samplingFreq;
		fConst0 = min(192000.0f, max(1.0f, (float)fSamplingFreq));
		fConst1 = (3.1415926535897931f / fConst0);
		fTempPerm0 = 0;
		fTempPerm1 = 0;
		fTempPerm2 = 0;
		fTempPerm3 = 0;
		fTempPerm4 = 0;
		fTempPerm5 = 0;
		fTempPerm6 = 0;
		fTempPerm7 = 0;
		fTempPerm8 = 0;
		fTempPerm9 = 0;
		fTempPerm10 = 0;
		fTempPerm11 = 0;
		fTempPerm12 = 0;
		fTempPerm13 = 0;
		fTempPerm14 = 0;
		fTempPerm15 = 0;
		fTempPerm16 = 0;
		fTempPerm17 = 0;
		fTempPerm18 = 0;
		fTempPerm19 = 0;
		fTempPerm20 = 0;
		fTempPerm21 = 0;
		fTempPerm22 = 0;
		fTempPerm23 = 0;
		fTempPerm24 = 0;
		iTempPerm25 = 0;
		fConst2 = (6.9100000000000001f / fConst0);
		fTempPerm26 = 0;
		fTempPerm27 = 0;
		fConst3 = (1.0f / fConst0);
		fTempPerm28 = 0;
		fTempPerm29 = 0;
		fTempPerm30 = 0;
		fConst4 = (0.5f * fConst0);
		fTempPerm31 = 0;
		fTempPerm32 = 0;
		iTempPerm33 = 0;
		fTempPerm34 = 0;
		fTempPerm35 = 0;
		iTempPerm36 = 0;
		fTempPerm37 = 0;
		fTempPerm38 = 0;
		iTempPerm39 = 0;
		fTempPerm40 = 0;
		fTempPerm41 = 0;
		iTempPerm42 = 0;
		fTempPerm43 = 0;
		fTempPerm44 = 0;
		iTempPerm45 = 0;
		fTempPerm46 = 0;
		fTempPerm47 = 0;
		fTempPerm48 = 0;
		fConst5 = (0.083333333333333329f * fConst0);
		fTempPerm49 = 0;
		fTempPerm50 = 0;
		fTempPerm51 = 0;
		fTempPerm52 = 0;
		fTempPerm53 = 0;
		fConst6 = (0.25f * fConst0);
		fTempPerm54 = 0;
		fConst7 = (12.0f / fConst0);
		fTempPerm55 = 0;
		fTempPerm56 = 0;
		fTempPerm57 = 0;
		fTempPerm58 = 0;
		iTempPerm59 = 0;
		fTempPerm60 = 0;
		fTempPerm61 = 0;
		fTempPerm62 = 0;
		fTempPerm63 = 0;
		fTempPerm64 = 0;
		fTempPerm65 = 0;
		fTempPerm66 = 0;
		fTempPerm67 = 0;
		fTempPerm68 = 0;
		fTempPerm69 = 0;
		fTempPerm70 = 0;
		iTempPerm71 = 0;
		fTempPerm72 = 0;
		fTempPerm73 = 0;
		fTempPerm74 = 0;
		fTempPerm75 = 0;
		fTempPerm76 = 0;
		fTempPerm77 = 0;
		fTempPerm78 = 0;
		fTempPerm79 = 0;
		fTempPerm80 = 0;
		fTempPerm81 = 0;
		fTempPerm82 = 0;
		iTempPerm83 = 0;
		fTempPerm84 = 0;
		fConst8 = (6.0f / fConst0);
		fTempPerm85 = 0;
		fTempPerm86 = 0;
		fTempPerm87 = 0;
		fTempPerm88 = 0;
		iTempPerm89 = 0;
		fTempPerm90 = 0;
		fTempPerm91 = 0;
		fTempPerm92 = 0;
		fTempPerm93 = 0;
		fTempPerm94 = 0;
		fTempPerm95 = 0;
		fTempPerm96 = 0;
		fTempPerm97 = 0;
		fTempPerm98 = 0;
		fTempPerm99 = 0;
		iTempPerm100 = 0;
		fTempPerm101 = 0;
		fTempPerm102 = 0;
		fTempPerm103 = 0;
		fTempPerm104 = 0;
		fTempPerm105 = 0;
		fTempPerm106 = 0;
		fConst9 = (0.041666666666666664f * faustpower<2>(fConst0));
		fTempPerm107 = 0;
		fTempPerm108 = 0;
		fTempPerm109 = 0;
		fTempPerm110 = 0;
		fTempPerm111 = 0;
		fTempPerm112 = 0;
		fTempPerm113 = 0;
		fTempPerm114 = 0;
		fTempPerm115 = 0;
		fConst10 = (3.0f / fConst0);
		fTempPerm116 = 0;
		fTempPerm117 = 0;
		fTempPerm118 = 0;
		fTempPerm119 = 0;
		iTempPerm120 = 0;
		fTempPerm121 = 0;
		fTempPerm122 = 0;
		fTempPerm123 = 0;
		fTempPerm124 = 0;
		fTempPerm125 = 0;
		fTempPerm126 = 0;
		fTempPerm127 = 0;
		fTempPerm128 = 0;
		fTempPerm129 = 0;
		fTempPerm130 = 0;
		fTempPerm131 = 0;
		fTempPerm132 = 0;
		fTempPerm133 = 0;
		fTempPerm134 = 0;
		fTempPerm135 = 0;
		fTempPerm136 = 0;
		iTempPerm137 = 0;
		fTempPerm138 = 0;
		fTempPerm139 = 0;
		fTempPerm140 = 0;
		fTempPerm141 = 0;
		fTempPerm142 = 0;
		fTempPerm143 = 0;
		fTempPerm144 = 0;
		fTempPerm145 = 0;
		fTempPerm146 = 0;
		fTempPerm147 = 0;
		iTempPerm148 = 0;
		fTempPerm149 = 0;
		fTempPerm150 = 0;
		fTempPerm151 = 0;
		fTempPerm152 = 0;
		fTempPerm153 = 0;
		fTempPerm154 = 0;
		fTempPerm155 = 0;
		fTempPerm156 = 0;
		fTempPerm157 = 0;
		fTempPerm158 = 0;
		iTempPerm159 = 0;
		fTempPerm160 = 0;
		fTempPerm161 = 0;
		fTempPerm162 = 0;
		fTempPerm163 = 0;
		fTempPerm164 = 0;
		iTempPerm165 = 0;
		fTempPerm166 = 0;
		fTempPerm167 = 0;
		fTempPerm168 = 0;
		fTempPerm169 = 0;
		fTempPerm170 = 0;
		fTempPerm171 = 0;
		fTempPerm172 = 0;
		fTempPerm173 = 0;
		fTempPerm174 = 0;
		fTempPerm175 = 0;
		iTempPerm176 = 0;
		fTempPerm177 = 0;
		fTempPerm178 = 0;
		fTempPerm179 = 0;
		fTempPerm180 = 0;
		fTempPerm181 = 0;
		fTempPerm182 = 0;
		fTempPerm183 = 0;
		fTempPerm184 = 0;
		fTempPerm185 = 0;
		fTempPerm186 = 0;
		fTempPerm187 = 0;
		fTempPerm188 = 0;
		fTempPerm189 = 0;
		fTempPerm190 = 0;
		fTempPerm191 = 0;
		fTempPerm192 = 0;
		fTempPerm193 = 0;
		fTempPerm194 = 0;
		fTempPerm195 = 0;
		iTempPerm196 = 0;
		fTempPerm197 = 0;
		fTempPerm198 = 0;
		fTempPerm199 = 0;
		fTempPerm200 = 0;
		fTempPerm201 = 0;
		fTempPerm202 = 0;
		fTempPerm203 = 0;
		fTempPerm204 = 0;
		fTempPerm205 = 0;
		fTempPerm206 = 0;
		fTempPerm207 = 0;
		fTempPerm208 = 0;
		fTempPerm209 = 0;
		fTempPerm210 = 0;
		fTempPerm211 = 0;
		iTempPerm212 = 0;
		fTempPerm213 = 0;
		fTempPerm214 = 0;
		fTempPerm215 = 0;
		fTempPerm216 = 0;
		fTempPerm217 = 0;
		fTempPerm218 = 0;
		fTempPerm219 = 0;
		fTempPerm220 = 0;
		fTempPerm221 = 0;
		fTempPerm222 = 0;
		iTempPerm223 = 0;
		fTempPerm224 = 0;
		fTempPerm225 = 0;
		fTempPerm226 = 0;
		fTempPerm227 = 0;
		fTempPerm228 = 0;
		fTempPerm229 = 0;
		fTempPerm230 = 0;
		fTempPerm231 = 0;
		fTempPerm232 = 0;
		fTempPerm233 = 0;
		iTempPerm234 = 0;
		fTempPerm235 = 0;
		fTempPerm236 = 0;
		fTempPerm237 = 0;
		fTempPerm238 = 0;
		fTempPerm239 = 0;
		iTempPerm240 = 0;
		fTempPerm241 = 0;
		fTempPerm242 = 0;
		fTempPerm243 = 0;
		fTempPerm244 = 0;
		fTempPerm245 = 0;
		fTempPerm246 = 0;
		fTempPerm247 = 0;
		fTempPerm248 = 0;
		fTempPerm249 = 0;
		fTempPerm250 = 0;
		iTempPerm251 = 0;
		fTempPerm252 = 0;
		fTempPerm253 = 0;
		fTempPerm254 = 0;
		fTempPerm255 = 0;
		fTempPerm256 = 0;
		fTempPerm257 = 0;
		fTempPerm258 = 0;
		fTempPerm259 = 0;
		fTempPerm260 = 0;
		fTempPerm261 = 0;
		fTempPerm262 = 0;
		fTempPerm263 = 0;
		fTempPerm264 = 0;
		fTempPerm265 = 0;
		fTempPerm266 = 0;
		fTempPerm267 = 0;
		fTempPerm268 = 0;
		fTempPerm269 = 0;
		fTempPerm270 = 0;
		iTempPerm271 = 0;
		fTempPerm272 = 0;
		fTempPerm273 = 0;
		fTempPerm274 = 0;
		fTempPerm275 = 0;
		fTempPerm276 = 0;
		fTempPerm277 = 0;
		fTempPerm278 = 0;
		fTempPerm279 = 0;
		fTempPerm280 = 0;
		fTempPerm281 = 0;
		fTempPerm282 = 0;
		fTempPerm283 = 0;
		fTempPerm284 = 0;
		fTempPerm285 = 0;
		fTempPerm286 = 0;
		iTempPerm287 = 0;
		fTempPerm288 = 0;
		fTempPerm289 = 0;
		fTempPerm290 = 0;
		fTempPerm291 = 0;
		fTempPerm292 = 0;
		fTempPerm293 = 0;
		fTempPerm294 = 0;
		fTempPerm295 = 0;
		fTempPerm296 = 0;
		fTempPerm297 = 0;
		iTempPerm298 = 0;
		fTempPerm299 = 0;
		fTempPerm300 = 0;
		fTempPerm301 = 0;
		fTempPerm302 = 0;
		fTempPerm303 = 0;
		fTempPerm304 = 0;
		fTempPerm305 = 0;
		fTempPerm306 = 0;
		fTempPerm307 = 0;
		fTempPerm308 = 0;
		iTempPerm309 = 0;
		fTempPerm310 = 0;
		fTempPerm311 = 0;
		fTempPerm312 = 0;
		fTempPerm313 = 0;
		fTempPerm314 = 0;
		iTempPerm315 = 0;
		fTempPerm316 = 0;
		fTempPerm317 = 0;
		fTempPerm318 = 0;
		fTempPerm319 = 0;
		fTempPerm320 = 0;
		fTempPerm321 = 0;
		fTempPerm322 = 0;
		fTempPerm323 = 0;
		fTempPerm324 = 0;
		fTempPerm325 = 0;
		iTempPerm326 = 0;
		fTempPerm327 = 0;
		fTempPerm328 = 0;
		fTempPerm329 = 0;
		fTempPerm330 = 0;
		fTempPerm331 = 0;
		fTempPerm332 = 0;
		fTempPerm333 = 0;
		fTempPerm334 = 0;
		fTempPerm335 = 0;
		fTempPerm336 = 0;
		fTempPerm337 = 0;
		fTempPerm338 = 0;
		fTempPerm339 = 0;
		fTempPerm340 = 0;
		fTempPerm341 = 0;
		fTempPerm342 = 0;
		fTempPerm343 = 0;
		fTempPerm344 = 0;
		fTempPerm345 = 0;
		iTempPerm346 = 0;
		fTempPerm347 = 0;
		fTempPerm348 = 0;
		fTempPerm349 = 0;
		fTempPerm350 = 0;
		fTempPerm351 = 0;
		fTempPerm352 = 0;
		fTempPerm353 = 0;
		fTempPerm354 = 0;
		fTempPerm355 = 0;
		fTempPerm356 = 0;
		fTempPerm357 = 0;
		fTempPerm358 = 0;
		fTempPerm359 = 0;
		fTempPerm360 = 0;
		fTempPerm361 = 0;
		iTempPerm362 = 0;
		fTempPerm363 = 0;
		fTempPerm364 = 0;
		fTempPerm365 = 0;
		fTempPerm366 = 0;
		fTempPerm367 = 0;
		fTempPerm368 = 0;
		fTempPerm369 = 0;
		fTempPerm370 = 0;
		fTempPerm371 = 0;
		fTempPerm372 = 0;
		iTempPerm373 = 0;
		fTempPerm374 = 0;
		fTempPerm375 = 0;
		fTempPerm376 = 0;
		fTempPerm377 = 0;
		fTempPerm378 = 0;
		fTempPerm379 = 0;
		fTempPerm380 = 0;
		fTempPerm381 = 0;
		fTempPerm382 = 0;
		fTempPerm383 = 0;
		iTempPerm384 = 0;
		fTempPerm385 = 0;
		fTempPerm386 = 0;
		fTempPerm387 = 0;
		fTempPerm388 = 0;
		fTempPerm389 = 0;
		iTempPerm390 = 0;
		fTempPerm391 = 0;
		fTempPerm392 = 0;
		fTempPerm393 = 0;
		fTempPerm394 = 0;
		fTempPerm395 = 0;
		fTempPerm396 = 0;
		fTempPerm397 = 0;
		fTempPerm398 = 0;
		fTempPerm399 = 0;
		fTempPerm400 = 0;
		iTempPerm401 = 0;
		fTempPerm402 = 0;
		fTempPerm403 = 0;
		fTempPerm404 = 0;
		fTempPerm405 = 0;
		fTempPerm406 = 0;
		fTempPerm407 = 0;
		fTempPerm408 = 0;
		fTempPerm409 = 0;
		fTempPerm410 = 0;
		fTempPerm411 = 0;
		fTempPerm412 = 0;
		fTempPerm413 = 0;
		fTempPerm414 = 0;
		fTempPerm415 = 0;
		fTempPerm416 = 0;
		fTempPerm417 = 0;
		fTempPerm418 = 0;
		fTempPerm419 = 0;
		fTempPerm420 = 0;
		iTempPerm421 = 0;
		fTempPerm422 = 0;
		fTempPerm423 = 0;
		fTempPerm424 = 0;
		fTempPerm425 = 0;
		fTempPerm426 = 0;
		fTempPerm427 = 0;
		fTempPerm428 = 0;
		fTempPerm429 = 0;
		fTempPerm430 = 0;
		fTempPerm431 = 0;
		fTempPerm432 = 0;
		fTempPerm433 = 0;
		fTempPerm434 = 0;
		fTempPerm435 = 0;
		fTempPerm436 = 0;
		iTempPerm437 = 0;
		fTempPerm438 = 0;
		fTempPerm439 = 0;
		fTempPerm440 = 0;
		fTempPerm441 = 0;
		fTempPerm442 = 0;
		fTempPerm443 = 0;
		fTempPerm444 = 0;
		fTempPerm445 = 0;
		fTempPerm446 = 0;
		fTempPerm447 = 0;
		iTempPerm448 = 0;
		fTempPerm449 = 0;
		fTempPerm450 = 0;
		fTempPerm451 = 0;
		fTempPerm452 = 0;
		fTempPerm453 = 0;
		fTempPerm454 = 0;
		fTempPerm455 = 0;
		fTempPerm456 = 0;
		fTempPerm457 = 0;
		fTempPerm458 = 0;
		iTempPerm459 = 0;
		fTempPerm460 = 0;
		fTempPerm461 = 0;
		fTempPerm462 = 0;
		fTempPerm463 = 0;
		fTempPerm464 = 0;
		iTempPerm465 = 0;
		fTempPerm466 = 0;
		fTempPerm467 = 0;
		fTempPerm468 = 0;
		fTempPerm469 = 0;
		fTempPerm470 = 0;
		fTempPerm471 = 0;
		fTempPerm472 = 0;
		fTempPerm473 = 0;
		fTempPerm474 = 0;
		fTempPerm475 = 0;
		iTempPerm476 = 0;
		fTempPerm477 = 0;
		fTempPerm478 = 0;
		fTempPerm479 = 0;
		fTempPerm480 = 0;
		fTempPerm481 = 0;
		fTempPerm482 = 0;
		fTempPerm483 = 0;
		fTempPerm484 = 0;
		fTempPerm485 = 0;
		fTempPerm486 = 0;
		fTempPerm487 = 0;
		fTempPerm488 = 0;
		fTempPerm489 = 0;
		fTempPerm490 = 0;
		fTempPerm491 = 0;
		fTempPerm492 = 0;
		fTempPerm493 = 0;
		fTempPerm494 = 0;
		fTempPerm495 = 0;
		iTempPerm496 = 0;
		fTempPerm497 = 0;
		fTempPerm498 = 0;
		fTempPerm499 = 0;
		fTempPerm500 = 0;
		fTempPerm501 = 0;
		fTempPerm502 = 0;
	}
	virtual void instanceResetUserInterface() {
		fslider0 = 0.5f;
		fslider1 = 0.0f;
		fslider2 = 0.0f;
		fslider3 = 0.001f;
		fbutton0 = 0.0;
		fslider4 = 1.0f;
		fslider5 = 1.0f;
		fslider6 = 440.0f;
		fbutton1 = 0.0;
		fslider7 = 1.0f;
		fbutton2 = 0.0;
		fslider8 = 1.0f;
		fbutton3 = 0.0;
		fslider9 = 1.0f;
		fbutton4 = 0.0;
		fslider10 = 1.0f;
		fbutton5 = 0.0;
		fslider11 = 1.0f;
		fslider12 = 1.0f;
		fslider13 = 0.0f;
		fslider14 = 0.0f;
		fslider15 = 440.0f;
		fslider16 = 440.0f;
		fslider17 = 440.0f;
		fslider18 = 440.0f;
		fslider19 = 440.0f;
	}
	virtual void instanceClear() {
		for (int i=0; i<3; i++) iVec0[i] = 0;
		for (int i=0; i<2; i++) fRec0[i] = 0;
		for (int i=0; i<2; i++) iRec8[i] = 0;
		for (int i=0; i<2; i++) fRec7[i] = 0;
		for (int i=0; i<2; i++) fVec1[i] = 0;
		for (int i=0; i<2; i++) fRec9[i] = 0;
		for (int i=0; i<2; i++) fVec2[i] = 0;
		for (int i=0; i<2; i++) fVec3[i] = 0;
		for (int i=0; i<2; i++) iRec11[i] = 0;
		for (int i=0; i<2; i++) fRec10[i] = 0;
		for (int i=0; i<2; i++) iRec13[i] = 0;
		for (int i=0; i<2; i++) fRec12[i] = 0;
		for (int i=0; i<2; i++) iRec15[i] = 0;
		for (int i=0; i<2; i++) fRec14[i] = 0;
		for (int i=0; i<2; i++) iRec17[i] = 0;
		for (int i=0; i<2; i++) fRec16[i] = 0;
		for (int i=0; i<2; i++) iRec19[i] = 0;
		for (int i=0; i<2; i++) fRec18[i] = 0;
		for (int i=0; i<2; i++) fRec20[i] = 0;
		for (int i=0; i<2; i++) fVec4[i] = 0;
		for (int i=0; i<2; i++) fRec22[i] = 0;
		for (int i=0; i<2; i++) fVec5[i] = 0;
		IOTA = 0;
		for (int i=0; i<4096; i++) fVec6[i] = 0;
		for (int i=0; i<2; i++) fRec21[i] = 0;
		for (int i=0; i<2; i++) fRec23[i] = 0;
		for (int i=0; i<2; i++) fVec7[i] = 0;
		for (int i=0; i<2; i++) fVec8[i] = 0;
		for (int i=0; i<4096; i++) fVec9[i] = 0;
		for (int i=0; i<2; i++) fRec24[i] = 0;
		for (int i=0; i<2; i++) fRec25[i] = 0;
		for (int i=0; i<2; i++) fRec26[i] = 0;
		for (int i=0; i<2; i++) fVec10[i] = 0;
		for (int i=0; i<2; i++) fRec28[i] = 0;
		for (int i=0; i<2; i++) fVec11[i] = 0;
		for (int i=0; i<4096; i++) fVec12[i] = 0;
		for (int i=0; i<2; i++) fRec27[i] = 0;
		for (int i=0; i<2; i++) fVec13[i] = 0;
		for (int i=0; i<2; i++) fRec30[i] = 0;
		for (int i=0; i<2; i++) fVec14[i] = 0;
		for (int i=0; i<4096; i++) fVec15[i] = 0;
		for (int i=0; i<2; i++) fRec29[i] = 0;
		for (int i=0; i<2; i++) fVec16[i] = 0;
		for (int i=0; i<2; i++) fVec17[i] = 0;
		for (int i=0; i<4096; i++) fVec18[i] = 0;
		for (int i=0; i<2; i++) fVec19[i] = 0;
		for (int i=0; i<2; i++) fRec31[i] = 0;
		for (int i=0; i<2; i++) fVec20[i] = 0;
		for (int i=0; i<2; i++) fVec21[i] = 0;
		for (int i=0; i<2; i++) fVec22[i] = 0;
		for (int i=0; i<2; i++) fVec23[i] = 0;
		for (int i=0; i<4096; i++) fVec24[i] = 0;
		for (int i=0; i<2; i++) fVec25[i] = 0;
		for (int i=0; i<2; i++) fRec32[i] = 0;
		for (int i=0; i<2; i++) fVec26[i] = 0;
		for (int i=0; i<2; i++) fVec27[i] = 0;
		for (int i=0; i<2; i++) fVec28[i] = 0;
		for (int i=0; i<2; i++) fRec33[i] = 0;
		for (int i=0; i<2; i++) fVec29[i] = 0;
		for (int i=0; i<2; i++) fVec30[i] = 0;
		for (int i=0; i<2; i++) fVec31[i] = 0;
		for (int i=0; i<2; i++) fRec35[i] = 0;
		for (int i=0; i<2; i++) fVec32[i] = 0;
		for (int i=0; i<4096; i++) fVec33[i] = 0;
		for (int i=0; i<2; i++) fRec34[i] = 0;
		for (int i=0; i<2; i++) fVec34[i] = 0;
		for (int i=0; i<2; i++) fVec35[i] = 0;
		for (int i=0; i<4096; i++) fVec36[i] = 0;
		for (int i=0; i<2; i++) fVec37[i] = 0;
		for (int i=0; i<2; i++) fRec36[i] = 0;
		for (int i=0; i<2; i++) fVec38[i] = 0;
		for (int i=0; i<2; i++) fVec39[i] = 0;
		for (int i=0; i<2; i++) fVec40[i] = 0;
		for (int i=0; i<2; i++) fRec38[i] = 0;
		for (int i=0; i<2; i++) fVec41[i] = 0;
		for (int i=0; i<4096; i++) fVec42[i] = 0;
		for (int i=0; i<2; i++) fRec37[i] = 0;
		for (int i=0; i<2; i++) fVec43[i] = 0;
		for (int i=0; i<2; i++) fVec44[i] = 0;
		for (int i=0; i<4096; i++) fVec45[i] = 0;
		for (int i=0; i<2; i++) fVec46[i] = 0;
		for (int i=0; i<2; i++) fRec40[i] = 0;
		for (int i=0; i<2; i++) fVec47[i] = 0;
		for (int i=0; i<4096; i++) fVec48[i] = 0;
		for (int i=0; i<2; i++) fRec39[i] = 0;
		for (int i=0; i<2; i++) fVec49[i] = 0;
		for (int i=0; i<2; i++) fRec42[i] = 0;
		for (int i=0; i<2; i++) fVec50[i] = 0;
		for (int i=0; i<4096; i++) fVec51[i] = 0;
		for (int i=0; i<2; i++) fRec41[i] = 0;
		for (int i=0; i<2; i++) fVec52[i] = 0;
		for (int i=0; i<2; i++) fVec53[i] = 0;
		for (int i=0; i<4096; i++) fVec54[i] = 0;
		for (int i=0; i<2; i++) fVec55[i] = 0;
		for (int i=0; i<2; i++) fRec43[i] = 0;
		for (int i=0; i<2; i++) fVec56[i] = 0;
		for (int i=0; i<2; i++) fVec57[i] = 0;
		for (int i=0; i<2; i++) fVec58[i] = 0;
		for (int i=0; i<2; i++) fVec59[i] = 0;
		for (int i=0; i<4096; i++) fVec60[i] = 0;
		for (int i=0; i<2; i++) fVec61[i] = 0;
		for (int i=0; i<2; i++) fRec44[i] = 0;
		for (int i=0; i<2; i++) fVec62[i] = 0;
		for (int i=0; i<2; i++) fVec63[i] = 0;
		for (int i=0; i<2; i++) fVec64[i] = 0;
		for (int i=0; i<2; i++) fRec45[i] = 0;
		for (int i=0; i<2; i++) fVec65[i] = 0;
		for (int i=0; i<2; i++) fVec66[i] = 0;
		for (int i=0; i<2; i++) fVec67[i] = 0;
		for (int i=0; i<2; i++) fRec47[i] = 0;
		for (int i=0; i<2; i++) fVec68[i] = 0;
		for (int i=0; i<4096; i++) fVec69[i] = 0;
		for (int i=0; i<2; i++) fRec46[i] = 0;
		for (int i=0; i<2; i++) fVec70[i] = 0;
		for (int i=0; i<2; i++) fVec71[i] = 0;
		for (int i=0; i<4096; i++) fVec72[i] = 0;
		for (int i=0; i<2; i++) fVec73[i] = 0;
		for (int i=0; i<2; i++) fRec48[i] = 0;
		for (int i=0; i<2; i++) fVec74[i] = 0;
		for (int i=0; i<2; i++) fVec75[i] = 0;
		for (int i=0; i<2; i++) fVec76[i] = 0;
		for (int i=0; i<2; i++) fRec50[i] = 0;
		for (int i=0; i<2; i++) fVec77[i] = 0;
		for (int i=0; i<4096; i++) fVec78[i] = 0;
		for (int i=0; i<2; i++) fRec49[i] = 0;
		for (int i=0; i<2; i++) fVec79[i] = 0;
		for (int i=0; i<2; i++) fVec80[i] = 0;
		for (int i=0; i<4096; i++) fVec81[i] = 0;
		for (int i=0; i<2; i++) fVec82[i] = 0;
		for (int i=0; i<2; i++) fRec52[i] = 0;
		for (int i=0; i<2; i++) fVec83[i] = 0;
		for (int i=0; i<4096; i++) fVec84[i] = 0;
		for (int i=0; i<2; i++) fRec51[i] = 0;
		for (int i=0; i<2; i++) fVec85[i] = 0;
		for (int i=0; i<2; i++) fRec54[i] = 0;
		for (int i=0; i<2; i++) fVec86[i] = 0;
		for (int i=0; i<4096; i++) fVec87[i] = 0;
		for (int i=0; i<2; i++) fRec53[i] = 0;
		for (int i=0; i<2; i++) fVec88[i] = 0;
		for (int i=0; i<2; i++) fVec89[i] = 0;
		for (int i=0; i<4096; i++) fVec90[i] = 0;
		for (int i=0; i<2; i++) fVec91[i] = 0;
		for (int i=0; i<2; i++) fRec55[i] = 0;
		for (int i=0; i<2; i++) fVec92[i] = 0;
		for (int i=0; i<2; i++) fVec93[i] = 0;
		for (int i=0; i<2; i++) fVec94[i] = 0;
		for (int i=0; i<2; i++) fVec95[i] = 0;
		for (int i=0; i<4096; i++) fVec96[i] = 0;
		for (int i=0; i<2; i++) fVec97[i] = 0;
		for (int i=0; i<2; i++) fRec56[i] = 0;
		for (int i=0; i<2; i++) fVec98[i] = 0;
		for (int i=0; i<2; i++) fVec99[i] = 0;
		for (int i=0; i<2; i++) fVec100[i] = 0;
		for (int i=0; i<2; i++) fRec57[i] = 0;
		for (int i=0; i<2; i++) fVec101[i] = 0;
		for (int i=0; i<2; i++) fVec102[i] = 0;
		for (int i=0; i<2; i++) fVec103[i] = 0;
		for (int i=0; i<2; i++) fRec59[i] = 0;
		for (int i=0; i<2; i++) fVec104[i] = 0;
		for (int i=0; i<4096; i++) fVec105[i] = 0;
		for (int i=0; i<2; i++) fRec58[i] = 0;
		for (int i=0; i<2; i++) fVec106[i] = 0;
		for (int i=0; i<2; i++) fVec107[i] = 0;
		for (int i=0; i<4096; i++) fVec108[i] = 0;
		for (int i=0; i<2; i++) fVec109[i] = 0;
		for (int i=0; i<2; i++) fRec60[i] = 0;
		for (int i=0; i<2; i++) fVec110[i] = 0;
		for (int i=0; i<2; i++) fVec111[i] = 0;
		for (int i=0; i<2; i++) fVec112[i] = 0;
		for (int i=0; i<2; i++) fRec62[i] = 0;
		for (int i=0; i<2; i++) fVec113[i] = 0;
		for (int i=0; i<4096; i++) fVec114[i] = 0;
		for (int i=0; i<2; i++) fRec61[i] = 0;
		for (int i=0; i<2; i++) fVec115[i] = 0;
		for (int i=0; i<2; i++) fVec116[i] = 0;
		for (int i=0; i<4096; i++) fVec117[i] = 0;
		for (int i=0; i<2; i++) fVec118[i] = 0;
		for (int i=0; i<2; i++) fRec64[i] = 0;
		for (int i=0; i<2; i++) fVec119[i] = 0;
		for (int i=0; i<4096; i++) fVec120[i] = 0;
		for (int i=0; i<2; i++) fRec63[i] = 0;
		for (int i=0; i<2; i++) fVec121[i] = 0;
		for (int i=0; i<2; i++) fRec66[i] = 0;
		for (int i=0; i<2; i++) fVec122[i] = 0;
		for (int i=0; i<4096; i++) fVec123[i] = 0;
		for (int i=0; i<2; i++) fRec65[i] = 0;
		for (int i=0; i<2; i++) fVec124[i] = 0;
		for (int i=0; i<2; i++) fVec125[i] = 0;
		for (int i=0; i<4096; i++) fVec126[i] = 0;
		for (int i=0; i<2; i++) fVec127[i] = 0;
		for (int i=0; i<2; i++) fRec67[i] = 0;
		for (int i=0; i<2; i++) fVec128[i] = 0;
		for (int i=0; i<2; i++) fVec129[i] = 0;
		for (int i=0; i<2; i++) fVec130[i] = 0;
		for (int i=0; i<2; i++) fVec131[i] = 0;
		for (int i=0; i<4096; i++) fVec132[i] = 0;
		for (int i=0; i<2; i++) fVec133[i] = 0;
		for (int i=0; i<2; i++) fRec68[i] = 0;
		for (int i=0; i<2; i++) fVec134[i] = 0;
		for (int i=0; i<2; i++) fVec135[i] = 0;
		for (int i=0; i<2; i++) fVec136[i] = 0;
		for (int i=0; i<2; i++) fRec69[i] = 0;
		for (int i=0; i<2; i++) fVec137[i] = 0;
		for (int i=0; i<2; i++) fVec138[i] = 0;
		for (int i=0; i<2; i++) fVec139[i] = 0;
		for (int i=0; i<2; i++) fRec71[i] = 0;
		for (int i=0; i<2; i++) fVec140[i] = 0;
		for (int i=0; i<4096; i++) fVec141[i] = 0;
		for (int i=0; i<2; i++) fRec70[i] = 0;
		for (int i=0; i<2; i++) fVec142[i] = 0;
		for (int i=0; i<2; i++) fVec143[i] = 0;
		for (int i=0; i<4096; i++) fVec144[i] = 0;
		for (int i=0; i<2; i++) fVec145[i] = 0;
		for (int i=0; i<2; i++) fRec72[i] = 0;
		for (int i=0; i<2; i++) fVec146[i] = 0;
		for (int i=0; i<2; i++) fVec147[i] = 0;
		for (int i=0; i<2; i++) fVec148[i] = 0;
		for (int i=0; i<2; i++) fRec74[i] = 0;
		for (int i=0; i<2; i++) fVec149[i] = 0;
		for (int i=0; i<4096; i++) fVec150[i] = 0;
		for (int i=0; i<2; i++) fRec73[i] = 0;
		for (int i=0; i<2; i++) fVec151[i] = 0;
		for (int i=0; i<2; i++) fVec152[i] = 0;
		for (int i=0; i<4096; i++) fVec153[i] = 0;
		for (int i=0; i<2; i++) fVec154[i] = 0;
		for (int i=0; i<2; i++) fRec76[i] = 0;
		for (int i=0; i<2; i++) fVec155[i] = 0;
		for (int i=0; i<4096; i++) fVec156[i] = 0;
		for (int i=0; i<2; i++) fRec75[i] = 0;
		for (int i=0; i<2; i++) fVec157[i] = 0;
		for (int i=0; i<2; i++) fRec78[i] = 0;
		for (int i=0; i<2; i++) fVec158[i] = 0;
		for (int i=0; i<4096; i++) fVec159[i] = 0;
		for (int i=0; i<2; i++) fRec77[i] = 0;
		for (int i=0; i<2; i++) fVec160[i] = 0;
		for (int i=0; i<2; i++) fVec161[i] = 0;
		for (int i=0; i<4096; i++) fVec162[i] = 0;
		for (int i=0; i<2; i++) fVec163[i] = 0;
		for (int i=0; i<2; i++) fRec79[i] = 0;
		for (int i=0; i<2; i++) fVec164[i] = 0;
		for (int i=0; i<2; i++) fVec165[i] = 0;
		for (int i=0; i<2; i++) fVec166[i] = 0;
		for (int i=0; i<2; i++) fVec167[i] = 0;
		for (int i=0; i<4096; i++) fVec168[i] = 0;
		for (int i=0; i<2; i++) fVec169[i] = 0;
		for (int i=0; i<2; i++) fRec80[i] = 0;
		for (int i=0; i<2; i++) fVec170[i] = 0;
		for (int i=0; i<2; i++) fVec171[i] = 0;
		for (int i=0; i<2; i++) fVec172[i] = 0;
		for (int i=0; i<2; i++) fRec81[i] = 0;
		for (int i=0; i<2; i++) fVec173[i] = 0;
		for (int i=0; i<2; i++) fVec174[i] = 0;
		for (int i=0; i<2; i++) fVec175[i] = 0;
		for (int i=0; i<2; i++) fRec83[i] = 0;
		for (int i=0; i<2; i++) fVec176[i] = 0;
		for (int i=0; i<4096; i++) fVec177[i] = 0;
		for (int i=0; i<2; i++) fRec82[i] = 0;
		for (int i=0; i<2; i++) fVec178[i] = 0;
		for (int i=0; i<2; i++) fVec179[i] = 0;
		for (int i=0; i<4096; i++) fVec180[i] = 0;
		for (int i=0; i<2; i++) fVec181[i] = 0;
		for (int i=0; i<2; i++) fRec84[i] = 0;
		for (int i=0; i<2; i++) fVec182[i] = 0;
		for (int i=0; i<2; i++) fVec183[i] = 0;
		for (int i=0; i<2; i++) fVec184[i] = 0;
		for (int i=0; i<2; i++) fRec86[i] = 0;
		for (int i=0; i<2; i++) fVec185[i] = 0;
		for (int i=0; i<4096; i++) fVec186[i] = 0;
		for (int i=0; i<2; i++) fRec85[i] = 0;
		for (int i=0; i<2; i++) fVec187[i] = 0;
		for (int i=0; i<2; i++) fVec188[i] = 0;
		for (int i=0; i<4096; i++) fVec189[i] = 0;
		for (int i=0; i<2; i++) fVec190[i] = 0;
		for (int i=0; i<2; i++) fRec88[i] = 0;
		for (int i=0; i<2; i++) fVec191[i] = 0;
		for (int i=0; i<4096; i++) fVec192[i] = 0;
		for (int i=0; i<2; i++) fRec87[i] = 0;
		for (int i=0; i<2; i++) fVec193[i] = 0;
		for (int i=0; i<2; i++) fRec90[i] = 0;
		for (int i=0; i<2; i++) fVec194[i] = 0;
		for (int i=0; i<4096; i++) fVec195[i] = 0;
		for (int i=0; i<2; i++) fRec89[i] = 0;
		for (int i=0; i<2; i++) fVec196[i] = 0;
		for (int i=0; i<2; i++) fVec197[i] = 0;
		for (int i=0; i<4096; i++) fVec198[i] = 0;
		for (int i=0; i<2; i++) fVec199[i] = 0;
		for (int i=0; i<2; i++) fRec91[i] = 0;
		for (int i=0; i<2; i++) fVec200[i] = 0;
		for (int i=0; i<2; i++) fVec201[i] = 0;
		for (int i=0; i<2; i++) fVec202[i] = 0;
		for (int i=0; i<2; i++) fVec203[i] = 0;
		for (int i=0; i<4096; i++) fVec204[i] = 0;
		for (int i=0; i<2; i++) fVec205[i] = 0;
		for (int i=0; i<2; i++) fRec92[i] = 0;
		for (int i=0; i<2; i++) fVec206[i] = 0;
		for (int i=0; i<2; i++) fVec207[i] = 0;
		for (int i=0; i<2; i++) fVec208[i] = 0;
		for (int i=0; i<2; i++) fRec93[i] = 0;
		for (int i=0; i<2; i++) fVec209[i] = 0;
		for (int i=0; i<2; i++) fVec210[i] = 0;
		for (int i=0; i<2; i++) fVec211[i] = 0;
		for (int i=0; i<2; i++) fRec95[i] = 0;
		for (int i=0; i<2; i++) fVec212[i] = 0;
		for (int i=0; i<4096; i++) fVec213[i] = 0;
		for (int i=0; i<2; i++) fRec94[i] = 0;
		for (int i=0; i<2; i++) fVec214[i] = 0;
		for (int i=0; i<2; i++) fVec215[i] = 0;
		for (int i=0; i<4096; i++) fVec216[i] = 0;
		for (int i=0; i<2; i++) fRec6[i] = 0;
		for (int i=0; i<2; i++) fRec4[i] = 0;
		for (int i=0; i<2; i++) fRec3[i] = 0;
		for (int i=0; i<2; i++) fRec1[i] = 0;
	}
	virtual void init(int samplingFreq) {
		classInit(samplingFreq);
		instanceInit(samplingFreq);
	}
	virtual void instanceInit(int samplingFreq) {
		instanceConstants(samplingFreq);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual faust_tsar* clone() {
		return new faust_tsar();
	}
	virtual int getSampleRate() {
		return fSamplingFreq;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("tsar");
		ui_interface->addHorizontalSlider("Filter", &fslider0, 0.5f, 0.0f, 1.0f, 0.01f);
		ui_interface->addHorizontalSlider("Relation", &fslider14, 0.0f, 0.0f, 1.0f, 0.001f);
		ui_interface->addHorizontalSlider("Sub", &fslider13, 0.0f, 0.0f, 1.0f, 0.001f);
		ui_interface->addHorizontalSlider("Wave", &fslider12, 1.0f, 0.080000000000000002f, 4.0f, 0.01f);
		ui_interface->openVerticalBox("envelope");
		ui_interface->addHorizontalSlider("Attack", &fslider3, 0.001f, 0.001f, 4.0f, 0.001f);
		ui_interface->addHorizontalSlider("Decay", &fslider2, 0.0f, 0.0f, 4.0f, 0.001f);
		ui_interface->addHorizontalSlider("Release", &fslider1, 0.0f, 0.0f, 4.0f, 0.01f);
		ui_interface->addHorizontalSlider("Sustain", &fslider4, 1.0f, 0.0f, 1.0f, 0.01f);
		ui_interface->closeBox();
		ui_interface->openVerticalBox("voices");
		ui_interface->openVerticalBox("0");
		ui_interface->openHorizontalBox("midi");
		ui_interface->addHorizontalSlider("freq", &fslider19, 440.0f, 20.0f, 1000.0f, 1.0f);
		ui_interface->addButton("trigger", &fbutton5);
		ui_interface->addHorizontalSlider("velocity", &fslider11, 1.0f, 0.0f, 1.0f, 0.007874015748031496f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->openVerticalBox("1");
		ui_interface->openHorizontalBox("midi");
		ui_interface->addHorizontalSlider("freq", &fslider18, 440.0f, 20.0f, 1000.0f, 1.0f);
		ui_interface->addButton("trigger", &fbutton4);
		ui_interface->addHorizontalSlider("velocity", &fslider10, 1.0f, 0.0f, 1.0f, 0.007874015748031496f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->openVerticalBox("2");
		ui_interface->openHorizontalBox("midi");
		ui_interface->addHorizontalSlider("freq", &fslider17, 440.0f, 20.0f, 1000.0f, 1.0f);
		ui_interface->addButton("trigger", &fbutton3);
		ui_interface->addHorizontalSlider("velocity", &fslider9, 1.0f, 0.0f, 1.0f, 0.007874015748031496f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->openVerticalBox("3");
		ui_interface->openHorizontalBox("midi");
		ui_interface->addHorizontalSlider("freq", &fslider16, 440.0f, 20.0f, 1000.0f, 1.0f);
		ui_interface->addButton("trigger", &fbutton2);
		ui_interface->addHorizontalSlider("velocity", &fslider8, 1.0f, 0.0f, 1.0f, 0.007874015748031496f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->openVerticalBox("4");
		ui_interface->openHorizontalBox("midi");
		ui_interface->addHorizontalSlider("freq", &fslider15, 440.0f, 20.0f, 1000.0f, 1.0f);
		ui_interface->addButton("trigger", &fbutton1);
		ui_interface->addHorizontalSlider("velocity", &fslider7, 1.0f, 0.0f, 1.0f, 0.007874015748031496f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->openVerticalBox("5");
		ui_interface->openHorizontalBox("midi");
		ui_interface->addHorizontalSlider("freq", &fslider6, 440.0f, 20.0f, 1000.0f, 1.0f);
		ui_interface->addButton("trigger", &fbutton0);
		ui_interface->addHorizontalSlider("velocity", &fslider5, 1.0f, 0.0f, 1.0f, 0.007874015748031496f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		//zone1
		//zone2
		float 	fSlow0 = (0.0010000000000000009f * ((10000.0f * faustpower<2>(float(fslider0))) + 100.0f));
		float 	fSlow1 = float(fslider1);
		float 	fSlow2 = float(fslider2);
		float 	fSlow3 = float(fslider3);
		float 	fSlow4 = (6.9100000000000001f * fSlow3);
		int 	iSlow5 = int((fConst0 * fSlow3));
		int 	iSlow6 = (float(fbutton0) > 0.0f);
		int 	iSlow7 = int(iSlow6);
		float 	fSlow8 = float(fslider4);
		float 	fSlow9 = (float(iSlow6) * fSlow8);
		float 	fSlow10 = float(fslider5);
		float 	fSlow11 = float(fslider6);
		float 	fSlow12 = (2.0f * fSlow11);
		float 	fSlow13 = max(20.0f, fabsf(fSlow12));
		float 	fSlow14 = (fConst4 / fSlow13);
		int 	iSlow15 = (float(fbutton1) > 0.0f);
		int 	iSlow16 = int(iSlow15);
		float 	fSlow17 = (float(iSlow15) * fSlow8);
		float 	fSlow18 = float(fslider7);
		int 	iSlow19 = (float(fbutton2) > 0.0f);
		int 	iSlow20 = int(iSlow19);
		float 	fSlow21 = (float(iSlow19) * fSlow8);
		float 	fSlow22 = float(fslider8);
		int 	iSlow23 = (float(fbutton3) > 0.0f);
		int 	iSlow24 = int(iSlow23);
		float 	fSlow25 = (float(iSlow23) * fSlow8);
		float 	fSlow26 = float(fslider9);
		int 	iSlow27 = (float(fbutton4) > 0.0f);
		int 	iSlow28 = int(iSlow27);
		float 	fSlow29 = (float(iSlow27) * fSlow8);
		float 	fSlow30 = float(fslider10);
		int 	iSlow31 = (float(fbutton5) > 0.0f);
		int 	iSlow32 = int(iSlow31);
		float 	fSlow33 = (float(iSlow31) * fSlow8);
		float 	fSlow34 = float(fslider11);
		float 	fSlow35 = float(fslider12);
		float 	fSlow36 = fmodf(fSlow35,3.0f);
		float 	fSlow37 = (0.0010000000000000009f * max((float)0, min((fSlow36 + -1.0f), (3.0f - fSlow36))));
		float 	fSlow38 = (fConst5 / fSlow13);
		float 	fSlow39 = max(fSlow12, 23.448949682462139f);
		float 	fSlow40 = max(20.0f, fabsf(fSlow39));
		float 	fSlow41 = (fConst6 / fSlow40);
		float 	fSlow42 = max((float)0, min((float)2047, (fConst4 / fSlow39)));
		int 	iSlow43 = int(fSlow42);
		int 	iSlow44 = int((iSlow43 + 1));
		float 	fSlow45 = floorf(fSlow42);
		float 	fSlow46 = (fSlow42 - fSlow45);
		float 	fSlow47 = (fSlow45 + (1.0f - fSlow42));
		float 	fSlow48 = (0.0010000000000000009f * max((float)0, min(fSlow36, (2.0f - fSlow36))));
		float 	fSlow49 = (fConst7 * fSlow11);
		float 	fSlow50 = (fConst4 / fSlow40);
		float 	fSlow51 = (fConst5 / fSlow40);
		float 	fSlow52 = (0.0010000000000000009f * ((int((fSlow35 < 1.0f)))?(0.5f * (1.0f - fSlow35)):0.5f));
		float 	fSlow53 = (fConst0 / fSlow39);
		float 	fSlow54 = max((float)0, max((1.0f - fSlow36), (fSlow36 + -2.0f)));
		float 	fSlow55 = (0.0010000000000000009f * float(fslider13));
		float 	fSlow56 = (0.0010000000000000009f * float(fslider14));
		float 	fSlow57 = (fConst8 * fSlow11);
		float 	fSlow58 = (0.5f * fSlow11);
		float 	fSlow59 = max(20.0f, fabsf(fSlow58));
		float 	fSlow60 = (fConst4 / fSlow59);
		float 	fSlow61 = (fConst5 / fSlow59);
		float 	fSlow62 = max(fSlow58, 23.448949682462139f);
		float 	fSlow63 = max(20.0f, fabsf(fSlow62));
		float 	fSlow64 = (fConst6 / fSlow63);
		float 	fSlow65 = max((float)0, min((float)2047, (fConst4 / fSlow62)));
		int 	iSlow66 = int(fSlow65);
		int 	iSlow67 = int((iSlow66 + 1));
		float 	fSlow68 = floorf(fSlow65);
		float 	fSlow69 = (fSlow65 - fSlow68);
		float 	fSlow70 = (fSlow68 + (1.0f - fSlow65));
		float 	fSlow71 = (fConst10 * fSlow11);
		float 	fSlow72 = (fConst4 / fSlow63);
		float 	fSlow73 = (fConst5 / fSlow63);
		float 	fSlow74 = (fConst0 / fSlow62);
		float 	fSlow75 = float(fslider15);
		float 	fSlow76 = (2.0f * fSlow75);
		float 	fSlow77 = max(20.0f, fabsf(fSlow76));
		float 	fSlow78 = (fConst4 / fSlow77);
		float 	fSlow79 = (fConst5 / fSlow77);
		float 	fSlow80 = max(fSlow76, 23.448949682462139f);
		float 	fSlow81 = max(20.0f, fabsf(fSlow80));
		float 	fSlow82 = (fConst6 / fSlow81);
		float 	fSlow83 = max((float)0, min((float)2047, (fConst4 / fSlow80)));
		int 	iSlow84 = int(fSlow83);
		int 	iSlow85 = int((iSlow84 + 1));
		float 	fSlow86 = floorf(fSlow83);
		float 	fSlow87 = (fSlow83 - fSlow86);
		float 	fSlow88 = (fSlow86 + (1.0f - fSlow83));
		float 	fSlow89 = (fConst7 * fSlow75);
		float 	fSlow90 = (fConst4 / fSlow81);
		float 	fSlow91 = (fConst5 / fSlow81);
		float 	fSlow92 = (fConst0 / fSlow80);
		float 	fSlow93 = (fConst8 * fSlow75);
		float 	fSlow94 = (0.5f * fSlow75);
		float 	fSlow95 = max(20.0f, fabsf(fSlow94));
		float 	fSlow96 = (fConst4 / fSlow95);
		float 	fSlow97 = (fConst5 / fSlow95);
		float 	fSlow98 = max(fSlow94, 23.448949682462139f);
		float 	fSlow99 = max(20.0f, fabsf(fSlow98));
		float 	fSlow100 = (fConst6 / fSlow99);
		float 	fSlow101 = max((float)0, min((float)2047, (fConst4 / fSlow98)));
		int 	iSlow102 = int(fSlow101);
		int 	iSlow103 = int((iSlow102 + 1));
		float 	fSlow104 = floorf(fSlow101);
		float 	fSlow105 = (fSlow101 - fSlow104);
		float 	fSlow106 = (fSlow104 + (1.0f - fSlow101));
		float 	fSlow107 = (fConst10 * fSlow75);
		float 	fSlow108 = (fConst4 / fSlow99);
		float 	fSlow109 = (fConst5 / fSlow99);
		float 	fSlow110 = (fConst0 / fSlow98);
		float 	fSlow111 = float(fslider16);
		float 	fSlow112 = (2.0f * fSlow111);
		float 	fSlow113 = max(20.0f, fabsf(fSlow112));
		float 	fSlow114 = (fConst4 / fSlow113);
		float 	fSlow115 = (fConst5 / fSlow113);
		float 	fSlow116 = max(fSlow112, 23.448949682462139f);
		float 	fSlow117 = max(20.0f, fabsf(fSlow116));
		float 	fSlow118 = (fConst6 / fSlow117);
		float 	fSlow119 = max((float)0, min((float)2047, (fConst4 / fSlow116)));
		int 	iSlow120 = int(fSlow119);
		int 	iSlow121 = int((iSlow120 + 1));
		float 	fSlow122 = floorf(fSlow119);
		float 	fSlow123 = (fSlow119 - fSlow122);
		float 	fSlow124 = (fSlow122 + (1.0f - fSlow119));
		float 	fSlow125 = (fConst7 * fSlow111);
		float 	fSlow126 = (fConst4 / fSlow117);
		float 	fSlow127 = (fConst5 / fSlow117);
		float 	fSlow128 = (fConst0 / fSlow116);
		float 	fSlow129 = (fConst8 * fSlow111);
		float 	fSlow130 = (0.5f * fSlow111);
		float 	fSlow131 = max(20.0f, fabsf(fSlow130));
		float 	fSlow132 = (fConst4 / fSlow131);
		float 	fSlow133 = (fConst5 / fSlow131);
		float 	fSlow134 = max(fSlow130, 23.448949682462139f);
		float 	fSlow135 = max(20.0f, fabsf(fSlow134));
		float 	fSlow136 = (fConst6 / fSlow135);
		float 	fSlow137 = max((float)0, min((float)2047, (fConst4 / fSlow134)));
		int 	iSlow138 = int(fSlow137);
		int 	iSlow139 = int((iSlow138 + 1));
		float 	fSlow140 = floorf(fSlow137);
		float 	fSlow141 = (fSlow137 - fSlow140);
		float 	fSlow142 = (fSlow140 + (1.0f - fSlow137));
		float 	fSlow143 = (fConst10 * fSlow111);
		float 	fSlow144 = (fConst4 / fSlow135);
		float 	fSlow145 = (fConst5 / fSlow135);
		float 	fSlow146 = (fConst0 / fSlow134);
		float 	fSlow147 = float(fslider17);
		float 	fSlow148 = (2.0f * fSlow147);
		float 	fSlow149 = max(20.0f, fabsf(fSlow148));
		float 	fSlow150 = (fConst4 / fSlow149);
		float 	fSlow151 = (fConst5 / fSlow149);
		float 	fSlow152 = max(fSlow148, 23.448949682462139f);
		float 	fSlow153 = max(20.0f, fabsf(fSlow152));
		float 	fSlow154 = (fConst6 / fSlow153);
		float 	fSlow155 = max((float)0, min((float)2047, (fConst4 / fSlow152)));
		int 	iSlow156 = int(fSlow155);
		int 	iSlow157 = int((iSlow156 + 1));
		float 	fSlow158 = floorf(fSlow155);
		float 	fSlow159 = (fSlow155 - fSlow158);
		float 	fSlow160 = (fSlow158 + (1.0f - fSlow155));
		float 	fSlow161 = (fConst7 * fSlow147);
		float 	fSlow162 = (fConst4 / fSlow153);
		float 	fSlow163 = (fConst5 / fSlow153);
		float 	fSlow164 = (fConst0 / fSlow152);
		float 	fSlow165 = (fConst8 * fSlow147);
		float 	fSlow166 = (0.5f * fSlow147);
		float 	fSlow167 = max(20.0f, fabsf(fSlow166));
		float 	fSlow168 = (fConst4 / fSlow167);
		float 	fSlow169 = (fConst5 / fSlow167);
		float 	fSlow170 = max(fSlow166, 23.448949682462139f);
		float 	fSlow171 = max(20.0f, fabsf(fSlow170));
		float 	fSlow172 = (fConst6 / fSlow171);
		float 	fSlow173 = max((float)0, min((float)2047, (fConst4 / fSlow170)));
		int 	iSlow174 = int(fSlow173);
		int 	iSlow175 = int((iSlow174 + 1));
		float 	fSlow176 = floorf(fSlow173);
		float 	fSlow177 = (fSlow173 - fSlow176);
		float 	fSlow178 = (fSlow176 + (1.0f - fSlow173));
		float 	fSlow179 = (fConst10 * fSlow147);
		float 	fSlow180 = (fConst4 / fSlow171);
		float 	fSlow181 = (fConst5 / fSlow171);
		float 	fSlow182 = (fConst0 / fSlow170);
		float 	fSlow183 = float(fslider18);
		float 	fSlow184 = (2.0f * fSlow183);
		float 	fSlow185 = max(20.0f, fabsf(fSlow184));
		float 	fSlow186 = (fConst4 / fSlow185);
		float 	fSlow187 = (fConst5 / fSlow185);
		float 	fSlow188 = max(fSlow184, 23.448949682462139f);
		float 	fSlow189 = max(20.0f, fabsf(fSlow188));
		float 	fSlow190 = (fConst6 / fSlow189);
		float 	fSlow191 = max((float)0, min((float)2047, (fConst4 / fSlow188)));
		int 	iSlow192 = int(fSlow191);
		int 	iSlow193 = int((iSlow192 + 1));
		float 	fSlow194 = floorf(fSlow191);
		float 	fSlow195 = (fSlow191 - fSlow194);
		float 	fSlow196 = (fSlow194 + (1.0f - fSlow191));
		float 	fSlow197 = (fConst7 * fSlow183);
		float 	fSlow198 = (fConst4 / fSlow189);
		float 	fSlow199 = (fConst5 / fSlow189);
		float 	fSlow200 = (fConst0 / fSlow188);
		float 	fSlow201 = (fConst8 * fSlow183);
		float 	fSlow202 = (0.5f * fSlow183);
		float 	fSlow203 = max(20.0f, fabsf(fSlow202));
		float 	fSlow204 = (fConst4 / fSlow203);
		float 	fSlow205 = (fConst5 / fSlow203);
		float 	fSlow206 = max(fSlow202, 23.448949682462139f);
		float 	fSlow207 = max(20.0f, fabsf(fSlow206));
		float 	fSlow208 = (fConst6 / fSlow207);
		float 	fSlow209 = max((float)0, min((float)2047, (fConst4 / fSlow206)));
		int 	iSlow210 = int(fSlow209);
		int 	iSlow211 = int((iSlow210 + 1));
		float 	fSlow212 = floorf(fSlow209);
		float 	fSlow213 = (fSlow209 - fSlow212);
		float 	fSlow214 = (fSlow212 + (1.0f - fSlow209));
		float 	fSlow215 = (fConst10 * fSlow183);
		float 	fSlow216 = (fConst4 / fSlow207);
		float 	fSlow217 = (fConst5 / fSlow207);
		float 	fSlow218 = (fConst0 / fSlow206);
		float 	fSlow219 = float(fslider19);
		float 	fSlow220 = (2.0f * fSlow219);
		float 	fSlow221 = max(20.0f, fabsf(fSlow220));
		float 	fSlow222 = (fConst4 / fSlow221);
		float 	fSlow223 = (fConst5 / fSlow221);
		float 	fSlow224 = max(fSlow220, 23.448949682462139f);
		float 	fSlow225 = max(20.0f, fabsf(fSlow224));
		float 	fSlow226 = (fConst6 / fSlow225);
		float 	fSlow227 = max((float)0, min((float)2047, (fConst4 / fSlow224)));
		int 	iSlow228 = int(fSlow227);
		int 	iSlow229 = int((iSlow228 + 1));
		float 	fSlow230 = floorf(fSlow227);
		float 	fSlow231 = (fSlow227 - fSlow230);
		float 	fSlow232 = (fSlow230 + (1.0f - fSlow227));
		float 	fSlow233 = (fConst7 * fSlow219);
		float 	fSlow234 = (fConst4 / fSlow225);
		float 	fSlow235 = (fConst5 / fSlow225);
		float 	fSlow236 = (fConst0 / fSlow224);
		float 	fSlow237 = (fConst8 * fSlow219);
		float 	fSlow238 = (0.5f * fSlow219);
		float 	fSlow239 = max(20.0f, fabsf(fSlow238));
		float 	fSlow240 = (fConst4 / fSlow239);
		float 	fSlow241 = (fConst5 / fSlow239);
		float 	fSlow242 = max(fSlow238, 23.448949682462139f);
		float 	fSlow243 = max(20.0f, fabsf(fSlow242));
		float 	fSlow244 = (fConst6 / fSlow243);
		float 	fSlow245 = max((float)0, min((float)2047, (fConst4 / fSlow242)));
		int 	iSlow246 = int(fSlow245);
		int 	iSlow247 = int((iSlow246 + 1));
		float 	fSlow248 = floorf(fSlow245);
		float 	fSlow249 = (fSlow245 - fSlow248);
		float 	fSlow250 = (fSlow248 + (1.0f - fSlow245));
		float 	fSlow251 = (fConst10 * fSlow219);
		float 	fSlow252 = (fConst4 / fSlow243);
		float 	fSlow253 = (fConst5 / fSlow243);
		float 	fSlow254 = (fConst0 / fSlow242);
		//zone2b
		//zone3
		FAUSTFLOAT* output0 = output[0];
		//LoopGraphScalar
		for (int i=0; i<count; i++) {
			iVec0[0] = 1;
			fRec0[0] = (fSlow0 + (0.999f * fRec0[1]));
			fTempPerm0 = tanf((fConst1 * max(fRec0[0], (float)20)));
			fTempPerm1 = (1.0f / fTempPerm0);
			fTempPerm2 = (((fTempPerm1 + 1.8000019999999999f) / fTempPerm0) + 0.82000160000199984f);
			fTempPerm3 = ((((fTempPerm1 + -1.8000019999999999f) / fTempPerm0) + 0.82000160000199984f) / fTempPerm2);
			fTempPerm4 = (1.0f / faustpower<2>(fTempPerm0));
			fTempPerm5 = (0.82000160000199984f - fTempPerm4);
			fTempPerm6 = max(-0.99990000000000001f, min(0.99990000000000001f, (2.0f * (fTempPerm5 / (fTempPerm2 * (fTempPerm3 + 1.0f))))));
			fTempPerm7 = (1.0f - faustpower<2>(fTempPerm6));
			fTempPerm8 = max(-0.99990000000000001f, min(0.99990000000000001f, fTempPerm3));
			fTempPerm9 = (1.0f - faustpower<2>(fTempPerm8));
			fTempPerm10 = sqrtf(fTempPerm9);
			fTempPerm11 = (1.0f - (fTempPerm5 / fTempPerm2));
			fTempPerm12 = sqrtf(max((float)0, fTempPerm7));
			fTempPerm13 = (((fTempPerm1 + 2.1999979999999999f) / fTempPerm0) + 1.2199976000020001f);
			fTempPerm14 = sqrtf(max((float)0, fTempPerm9));
			fTempPerm15 = ((((fTempPerm1 + -2.1999979999999999f) / fTempPerm0) + 1.2199976000020001f) / fTempPerm13);
			fTempPerm16 = (1.2199976000020001f - fTempPerm4);
			fTempPerm17 = max(-0.99990000000000001f, min(0.99990000000000001f, (2.0f * (fTempPerm16 / (fTempPerm13 * (fTempPerm15 + 1.0f))))));
			fTempPerm18 = (1.0f - faustpower<2>(fTempPerm17));
			fTempPerm19 = max(-0.99990000000000001f, min(0.99990000000000001f, fTempPerm15));
			fTempPerm20 = (1.0f - faustpower<2>(fTempPerm19));
			fTempPerm21 = sqrtf(fTempPerm20);
			fTempPerm22 = (1.0f - (fTempPerm16 / fTempPerm13));
			fTempPerm23 = sqrtf(max((float)0, fTempPerm18));
			fTempPerm24 = sqrtf(max((float)0, fTempPerm20));
			iRec8[0] = (iSlow6 * (iRec8[1] + 1));
			iTempPerm25 = int((iRec8[0] < iSlow5));
			fTempPerm26 = expf((0 - (fConst2 / ((iSlow7)?((iTempPerm25)?fSlow4:fSlow2):fSlow1))));
			fRec7[0] = ((fRec7[1] * fTempPerm26) + (((iSlow7)?((iTempPerm25)?1.5873015873015872f:fSlow9):0.0f) * (1.0f - fTempPerm26)));
			fTempPerm27 = min(1.0f, fRec7[0]);
			if ((float(((fSlow10 * fTempPerm27) > 0.001f)) != 0.0f)) {
				fVec1[0] = fSlow13;
				fTempPerm28 = (fRec9[1] + (fConst3 * fVec1[1]));
				fRec9[0] = (fTempPerm28 - floorf(fTempPerm28));
				fTempPerm29 = (2.0f * fRec9[0]);
				fTempPerm30 = faustpower<3>((fTempPerm29 + -1.0f));
				fVec2[0] = (fTempPerm30 + (1.0f - fTempPerm29));
				fTempPerm31 = (fSlow14 * (fTempPerm30 + (1.0f - (fTempPerm29 + fVec2[1]))));
				fVec3[0] = fTempPerm31;
			}
			iRec11[0] = (iSlow15 * (iRec11[1] + 1));
			iTempPerm33 = int((iRec11[0] < iSlow5));
			fTempPerm34 = expf((0 - (fConst2 / ((iSlow16)?((iTempPerm33)?fSlow4:fSlow2):fSlow1))));
			fRec10[0] = ((fRec10[1] * fTempPerm34) + (((iSlow16)?((iTempPerm33)?1.5873015873015872f:fSlow17):0.0f) * (1.0f - fTempPerm34)));
			fTempPerm35 = min(1.0f, fRec10[0]);
			iRec13[0] = (iSlow19 * (iRec13[1] + 1));
			iTempPerm36 = int((iRec13[0] < iSlow5));
			fTempPerm37 = expf((0 - (fConst2 / ((iSlow20)?((iTempPerm36)?fSlow4:fSlow2):fSlow1))));
			fRec12[0] = ((fRec12[1] * fTempPerm37) + (((iSlow20)?((iTempPerm36)?1.5873015873015872f:fSlow21):0.0f) * (1.0f - fTempPerm37)));
			fTempPerm38 = min(1.0f, fRec12[0]);
			iRec15[0] = (iSlow23 * (iRec15[1] + 1));
			iTempPerm39 = int((iRec15[0] < iSlow5));
			fTempPerm40 = expf((0 - (fConst2 / ((iSlow24)?((iTempPerm39)?fSlow4:fSlow2):fSlow1))));
			fRec14[0] = ((fRec14[1] * fTempPerm40) + (((iSlow24)?((iTempPerm39)?1.5873015873015872f:fSlow25):0.0f) * (1.0f - fTempPerm40)));
			fTempPerm41 = min(1.0f, fRec14[0]);
			iRec17[0] = (iSlow27 * (iRec17[1] + 1));
			iTempPerm42 = int((iRec17[0] < iSlow5));
			fTempPerm43 = expf((0 - (fConst2 / ((iSlow28)?((iTempPerm42)?fSlow4:fSlow2):fSlow1))));
			fRec16[0] = ((fRec16[1] * fTempPerm43) + (((iSlow28)?((iTempPerm42)?1.5873015873015872f:fSlow29):0.0f) * (1.0f - fTempPerm43)));
			fTempPerm44 = min(1.0f, fRec16[0]);
			iRec19[0] = (iSlow31 * (iRec19[1] + 1));
			iTempPerm45 = int((iRec19[0] < iSlow5));
			fTempPerm46 = expf((0 - (fConst2 / ((iSlow32)?((iTempPerm45)?fSlow4:fSlow2):fSlow1))));
			fRec18[0] = ((fRec18[1] * fTempPerm46) + (((iSlow32)?((iTempPerm45)?1.5873015873015872f:fSlow33):0.0f) * (1.0f - fTempPerm46)));
			fTempPerm47 = min(1.0f, fRec18[0]);
			if ((float(((fSlow34 * fTempPerm47) > 0.001f)) != 0.0f) || (float(((fSlow30 * fTempPerm44) > 0.001f)) != 0.0f) || (float(((fSlow26 * fTempPerm41) > 0.001f)) != 0.0f) || (float(((fSlow22 * fTempPerm38) > 0.001f)) != 0.0f) || (float(((fSlow18 * fTempPerm35) > 0.001f)) != 0.0f) || (float(((fSlow10 * fTempPerm27) > 0.001f)) != 0.0f)) {
				fTempPerm32 = float(iVec0[2]);
				fRec20[0] = (fSlow37 + (0.999f * fRec20[1]));
				fTempPerm48 = (fRec20[0] * fTempPerm32);
			}
			if ((float(((fSlow10 * fTempPerm27) > 0.001f)) != 0.0f)) {
				fVec4[0] = fSlow40;
				fTempPerm49 = (fRec22[1] + (fConst3 * fVec4[1]));
				fRec22[0] = (fTempPerm49 - floorf(fTempPerm49));
				fTempPerm50 = (2.0f * fRec22[0]);
				fTempPerm51 = (fTempPerm50 + -1.0f);
				fTempPerm52 = faustpower<2>(fTempPerm51);
				fVec5[0] = fTempPerm52;
			}
			if ((float(((fSlow34 * fTempPerm47) > 0.001f)) != 0.0f) || (float(((fSlow30 * fTempPerm44) > 0.001f)) != 0.0f) || (float(((fSlow26 * fTempPerm41) > 0.001f)) != 0.0f) || (float(((fSlow22 * fTempPerm38) > 0.001f)) != 0.0f) || (float(((fSlow18 * fTempPerm35) > 0.001f)) != 0.0f) || (float(((fSlow10 * fTempPerm27) > 0.001f)) != 0.0f)) {
				fTempPerm53 = float(iVec0[1]);
			}
			if ((float(((fSlow10 * fTempPerm27) > 0.001f)) != 0.0f)) {
				fTempPerm54 = (fSlow41 * (fTempPerm53 * (fVec5[0] - fVec5[1])));
				fVec6[IOTA&4095] = fTempPerm54;
				fRec21[0] = (((0.999f * fRec21[1]) + fVec6[IOTA&4095]) - ((fSlow47 * fVec6[(IOTA-iSlow43)&4095]) + (fSlow46 * fVec6[(IOTA-iSlow44)&4095])));
			}
			if ((float(((fSlow34 * fTempPerm47) > 0.001f)) != 0.0f) || (float(((fSlow30 * fTempPerm44) > 0.001f)) != 0.0f) || (float(((fSlow26 * fTempPerm41) > 0.001f)) != 0.0f) || (float(((fSlow22 * fTempPerm38) > 0.001f)) != 0.0f) || (float(((fSlow18 * fTempPerm35) > 0.001f)) != 0.0f) || (float(((fSlow10 * fTempPerm27) > 0.001f)) != 0.0f)) {
				fRec23[0] = (fSlow48 + (0.999f * fRec23[1]));
			}
			if ((float(((fSlow10 * fTempPerm27) > 0.001f)) != 0.0f)) {
				fTempPerm55 = faustpower<3>(fTempPerm51);
				fVec7[0] = (fTempPerm55 + (1.0f - fTempPerm50));
				fTempPerm56 = (fSlow50 * (fTempPerm55 + (1.0f - (fTempPerm50 + fVec7[1]))));
				fVec8[0] = fTempPerm56;
				fTempPerm57 = (fSlow51 * (fTempPerm32 * (fVec8[0] - fVec8[1])));
				fVec9[IOTA&4095] = fTempPerm57;
			}
			if ((float(((fSlow34 * fTempPerm47) > 0.001f)) != 0.0f) || (float(((fSlow30 * fTempPerm44) > 0.001f)) != 0.0f) || (float(((fSlow26 * fTempPerm41) > 0.001f)) != 0.0f) || (float(((fSlow22 * fTempPerm38) > 0.001f)) != 0.0f) || (float(((fSlow18 * fTempPerm35) > 0.001f)) != 0.0f) || (float(((fSlow10 * fTempPerm27) > 0.001f)) != 0.0f)) {
				fRec24[0] = ((0.999f * fRec24[1]) + fSlow52);
			}
			if ((float(((fSlow10 * fTempPerm27) > 0.001f)) != 0.0f)) {
				fTempPerm58 = max((float)0, min((float)2047, (fSlow53 * fRec24[0])));
				iTempPerm59 = int(fTempPerm58);
				fTempPerm60 = floorf(fTempPerm58);
			}
			if ((float(((fSlow34 * fTempPerm47) > 0.001f)) != 0.0f) || (float(((fSlow30 * fTempPerm44) > 0.001f)) != 0.0f) || (float(((fSlow26 * fTempPerm41) > 0.001f)) != 0.0f) || (float(((fSlow22 * fTempPerm38) > 0.001f)) != 0.0f) || (float(((fSlow18 * fTempPerm35) > 0.001f)) != 0.0f) || (float(((fSlow10 * fTempPerm27) > 0.001f)) != 0.0f)) {
				fRec25[0] = (fSlow55 + (0.999f * fRec25[1]));
				fRec26[0] = (fSlow56 + (0.999f * fRec26[1]));
				fTempPerm61 = (1.0f - (0.056125687309999998f * fRec26[0]));
			}
			if ((float(((fSlow10 * fTempPerm27) > 0.001f)) != 0.0f)) {
				fTempPerm62 = (fSlow11 * fTempPerm61);
				fTempPerm63 = max(fTempPerm62, 23.448949682462139f);
				fTempPerm64 = max(20.0f, fabsf(fTempPerm63));
				fVec10[0] = fTempPerm64;
				fTempPerm65 = (fRec28[1] + (fConst3 * fVec10[1]));
				fRec28[0] = (fTempPerm65 - floorf(fTempPerm65));
				fTempPerm66 = (2.0f * fRec28[0]);
				fTempPerm67 = (fTempPerm66 + -1.0f);
				fTempPerm68 = faustpower<2>(fTempPerm67);
				fVec11[0] = fTempPerm68;
				fTempPerm69 = ((fTempPerm53 * (fVec11[0] - fVec11[1])) / fVec10[0]);
				fVec12[IOTA&4095] = fTempPerm69;
				fTempPerm70 = max((float)0, min((float)2047, (fConst4 / fTempPerm63)));
				iTempPerm71 = int(fTempPerm70);
				fTempPerm72 = floorf(fTempPerm70);
				fRec27[0] = ((0.999f * fRec27[1]) + (fConst6 * ((fVec12[IOTA&4095] - (fVec12[(IOTA-iTempPerm71)&4095] * (fTempPerm72 + (1.0f - fTempPerm70)))) - ((fTempPerm70 - fTempPerm72) * fVec12[(IOTA-int((iTempPerm71 + 1)))&4095]))));
			}
			if ((float(((fSlow34 * fTempPerm47) > 0.001f)) != 0.0f) || (float(((fSlow30 * fTempPerm44) > 0.001f)) != 0.0f) || (float(((fSlow26 * fTempPerm41) > 0.001f)) != 0.0f) || (float(((fSlow22 * fTempPerm38) > 0.001f)) != 0.0f) || (float(((fSlow18 * fTempPerm35) > 0.001f)) != 0.0f) || (float(((fSlow10 * fTempPerm27) > 0.001f)) != 0.0f)) {
				fTempPerm73 = ((0.059463094360000003f * fRec26[0]) + 1.0f);
			}
			if ((float(((fSlow10 * fTempPerm27) > 0.001f)) != 0.0f)) {
				fTempPerm74 = (fSlow11 * fTempPerm73);
				fTempPerm75 = max(fTempPerm74, 23.448949682462139f);
				fTempPerm76 = max(20.0f, fabsf(fTempPerm75));
				fVec13[0] = fTempPerm76;
				fTempPerm77 = (fRec30[1] + (fConst3 * fVec13[1]));
				fRec30[0] = (fTempPerm77 - floorf(fTempPerm77));
				fTempPerm78 = (2.0f * fRec30[0]);
				fTempPerm79 = (fTempPerm78 + -1.0f);
				fTempPerm80 = faustpower<2>(fTempPerm79);
				fVec14[0] = fTempPerm80;
				fTempPerm81 = ((fTempPerm53 * (fVec14[0] - fVec14[1])) / fVec13[0]);
				fVec15[IOTA&4095] = fTempPerm81;
				fTempPerm82 = max((float)0, min((float)2047, (fConst4 / fTempPerm75)));
				iTempPerm83 = int(fTempPerm82);
				fTempPerm84 = floorf(fTempPerm82);
				fRec29[0] = ((0.999f * fRec29[1]) + (fConst6 * ((fVec15[IOTA&4095] - (fVec15[(IOTA-iTempPerm83)&4095] * (fTempPerm84 + (1.0f - fTempPerm82)))) - ((fTempPerm82 - fTempPerm84) * fVec15[(IOTA-int((iTempPerm83 + 1)))&4095]))));
				fTempPerm85 = faustpower<3>(fTempPerm67);
				fVec16[0] = (fTempPerm85 + (1.0f - fTempPerm66));
				fTempPerm86 = ((fTempPerm85 + (1.0f - (fTempPerm66 + fVec16[1]))) / fVec10[0]);
				fVec17[0] = fTempPerm86;
				fTempPerm87 = ((fTempPerm32 * (fVec17[0] - fVec17[1])) / fVec10[0]);
				fVec18[IOTA&4095] = fTempPerm87;
				fTempPerm88 = max((float)0, min((float)2047, (fConst0 * (fRec24[0] / fTempPerm63))));
				iTempPerm89 = int(fTempPerm88);
				fTempPerm90 = floorf(fTempPerm88);
				fTempPerm91 = max(20.0f, fabsf(fTempPerm62));
				fVec19[0] = fTempPerm91;
				fTempPerm92 = (fRec31[1] + (fConst3 * fVec19[1]));
				fRec31[0] = (fTempPerm92 - floorf(fTempPerm92));
				fTempPerm93 = (2.0f * fRec31[0]);
				fTempPerm94 = faustpower<3>((fTempPerm93 + -1.0f));
				fVec20[0] = (fTempPerm94 + (1.0f - fTempPerm93));
				fTempPerm95 = ((fTempPerm94 + (1.0f - (fTempPerm93 + fVec20[1]))) / fVec19[0]);
				fVec21[0] = fTempPerm95;
				fTempPerm96 = faustpower<3>(fTempPerm79);
				fVec22[0] = (fTempPerm96 + (1.0f - fTempPerm78));
				fTempPerm97 = ((fTempPerm96 + (1.0f - (fTempPerm78 + fVec22[1]))) / fVec13[0]);
				fVec23[0] = fTempPerm97;
				fTempPerm98 = ((fTempPerm32 * (fVec23[0] - fVec23[1])) / fVec13[0]);
				fVec24[IOTA&4095] = fTempPerm98;
				fTempPerm99 = max((float)0, min((float)2047, (fConst0 * (fRec24[0] / fTempPerm75))));
				iTempPerm100 = int(fTempPerm99);
				fTempPerm101 = floorf(fTempPerm99);
				fTempPerm102 = max(20.0f, fabsf(fTempPerm74));
				fVec25[0] = fTempPerm102;
				fTempPerm103 = (fRec32[1] + (fConst3 * fVec25[1]));
				fRec32[0] = (fTempPerm103 - floorf(fTempPerm103));
				fTempPerm104 = (2.0f * fRec32[0]);
				fTempPerm105 = faustpower<3>((fTempPerm104 + -1.0f));
				fVec26[0] = (fTempPerm105 + (1.0f - fTempPerm104));
				fTempPerm106 = ((fTempPerm105 + (1.0f - (fTempPerm104 + fVec26[1]))) / fVec25[0]);
				fVec27[0] = fTempPerm106;
				fVec28[0] = fSlow59;
				fTempPerm107 = (fRec33[1] + (fConst3 * fVec28[1]));
				fRec33[0] = (fTempPerm107 - floorf(fTempPerm107));
				fTempPerm108 = (2.0f * fRec33[0]);
				fTempPerm109 = faustpower<3>((fTempPerm108 + -1.0f));
				fVec29[0] = (fTempPerm109 + (1.0f - fTempPerm108));
				fTempPerm110 = (fSlow60 * (fTempPerm109 + (1.0f - (fTempPerm108 + fVec29[1]))));
				fVec30[0] = fTempPerm110;
				fVec31[0] = fSlow63;
				fTempPerm111 = (fRec35[1] + (fConst3 * fVec31[1]));
				fRec35[0] = (fTempPerm111 - floorf(fTempPerm111));
				fTempPerm112 = (2.0f * fRec35[0]);
				fTempPerm113 = (fTempPerm112 + -1.0f);
				fTempPerm114 = faustpower<2>(fTempPerm113);
				fVec32[0] = fTempPerm114;
				fTempPerm115 = (fSlow64 * (fTempPerm53 * (fVec32[0] - fVec32[1])));
				fVec33[IOTA&4095] = fTempPerm115;
				fRec34[0] = (((0.999f * fRec34[1]) + fVec33[IOTA&4095]) - ((fSlow70 * fVec33[(IOTA-iSlow66)&4095]) + (fSlow69 * fVec33[(IOTA-iSlow67)&4095])));
				fTempPerm116 = faustpower<3>(fTempPerm113);
				fVec34[0] = (fTempPerm116 + (1.0f - fTempPerm112));
				fTempPerm117 = (fSlow72 * (fTempPerm116 + (1.0f - (fTempPerm112 + fVec34[1]))));
				fVec35[0] = fTempPerm117;
				fTempPerm118 = (fSlow73 * (fTempPerm32 * (fVec35[0] - fVec35[1])));
				fVec36[IOTA&4095] = fTempPerm118;
				fTempPerm119 = max((float)0, min((float)2047, (fSlow74 * fRec24[0])));
				iTempPerm120 = int(fTempPerm119);
				fTempPerm121 = floorf(fTempPerm119);
			}
			if ((float(((fSlow34 * fTempPerm47) > 0.001f)) != 0.0f) || (float(((fSlow30 * fTempPerm44) > 0.001f)) != 0.0f) || (float(((fSlow26 * fTempPerm41) > 0.001f)) != 0.0f) || (float(((fSlow22 * fTempPerm38) > 0.001f)) != 0.0f) || (float(((fSlow18 * fTempPerm35) > 0.001f)) != 0.0f) || (float(((fSlow10 * fTempPerm27) > 0.001f)) != 0.0f)) {
				fTempPerm122 = (1.0f - fRec25[0]);
			}
			if ((float(((fSlow10 * fTempPerm27) > 0.001f)) != 0.0f)) {
				fTempPerm123 = (fSlow10 * (fTempPerm27 * ((fTempPerm122 * (((fSlow54 * (fVec36[IOTA&4095] - ((fVec36[(IOTA-iTempPerm120)&4095] * (fTempPerm121 + (1.0f - fTempPerm119))) + ((fTempPerm119 - fTempPerm121) * fVec36[(IOTA-int((iTempPerm120 + 1)))&4095])))) + (fSlow71 * (fRec23[0] * fRec34[0]))) + (fSlow61 * (fTempPerm48 * (fVec30[0] - fVec30[1]))))) + (((fConst9 * ((((fTempPerm48 * (fVec27[0] - fVec27[1])) / fVec25[0]) + (fSlow54 * ((fVec24[IOTA&4095] - (fVec24[(IOTA-iTempPerm100)&4095] * (fTempPerm101 + (1.0f - fTempPerm99)))) - ((fTempPerm99 - fTempPerm101) * fVec24[(IOTA-int((iTempPerm100 + 1)))&4095])))) + (((fTempPerm48 * (fVec21[0] - fVec21[1])) / fVec19[0]) + (fSlow54 * ((fVec18[IOTA&4095] - (fVec18[(IOTA-iTempPerm89)&4095] * (fTempPerm90 + (1.0f - fTempPerm88)))) - ((fTempPerm88 - fTempPerm90) * fVec18[(IOTA-int((iTempPerm89 + 1)))&4095])))))) + (fSlow57 * (fRec23[0] * ((fRec29[0] * fTempPerm73) + (fRec27[0] * fTempPerm61))))) + (fRec25[0] * (((fSlow54 * (fVec9[IOTA&4095] - ((fVec9[(IOTA-iTempPerm59)&4095] * (fTempPerm60 + (1.0f - fTempPerm58))) + ((fTempPerm58 - fTempPerm60) * fVec9[(IOTA-int((iTempPerm59 + 1)))&4095])))) + (fSlow49 * (fRec23[0] * fRec21[0]))) + (fSlow38 * (fTempPerm48 * (fVec3[0] - fVec3[1])))))))));
			}
			if ((float(((fSlow18 * fTempPerm35) > 0.001f)) != 0.0f)) {
				fVec37[0] = fSlow77;
				fTempPerm124 = (fRec36[1] + (fConst3 * fVec37[1]));
				fRec36[0] = (fTempPerm124 - floorf(fTempPerm124));
				fTempPerm125 = (2.0f * fRec36[0]);
				fTempPerm126 = faustpower<3>((fTempPerm125 + -1.0f));
				fVec38[0] = (fTempPerm126 + (1.0f - fTempPerm125));
				fTempPerm127 = (fSlow78 * (fTempPerm126 + (1.0f - (fTempPerm125 + fVec38[1]))));
				fVec39[0] = fTempPerm127;
				fVec40[0] = fSlow81;
				fTempPerm128 = (fRec38[1] + (fConst3 * fVec40[1]));
				fRec38[0] = (fTempPerm128 - floorf(fTempPerm128));
				fTempPerm129 = (2.0f * fRec38[0]);
				fTempPerm130 = (fTempPerm129 + -1.0f);
				fTempPerm131 = faustpower<2>(fTempPerm130);
				fVec41[0] = fTempPerm131;
				fTempPerm132 = (fSlow82 * (fTempPerm53 * (fVec41[0] - fVec41[1])));
				fVec42[IOTA&4095] = fTempPerm132;
				fRec37[0] = (((0.999f * fRec37[1]) + fVec42[IOTA&4095]) - ((fSlow88 * fVec42[(IOTA-iSlow84)&4095]) + (fSlow87 * fVec42[(IOTA-iSlow85)&4095])));
				fTempPerm133 = faustpower<3>(fTempPerm130);
				fVec43[0] = (fTempPerm133 + (1.0f - fTempPerm129));
				fTempPerm134 = (fSlow90 * (fTempPerm133 + (1.0f - (fTempPerm129 + fVec43[1]))));
				fVec44[0] = fTempPerm134;
				fTempPerm135 = (fSlow91 * (fTempPerm32 * (fVec44[0] - fVec44[1])));
				fVec45[IOTA&4095] = fTempPerm135;
				fTempPerm136 = max((float)0, min((float)2047, (fSlow92 * fRec24[0])));
				iTempPerm137 = int(fTempPerm136);
				fTempPerm138 = floorf(fTempPerm136);
				fTempPerm139 = (fSlow75 * fTempPerm61);
				fTempPerm140 = max(fTempPerm139, 23.448949682462139f);
				fTempPerm141 = max(20.0f, fabsf(fTempPerm140));
				fVec46[0] = fTempPerm141;
				fTempPerm142 = (fRec40[1] + (fConst3 * fVec46[1]));
				fRec40[0] = (fTempPerm142 - floorf(fTempPerm142));
				fTempPerm143 = (2.0f * fRec40[0]);
				fTempPerm144 = (fTempPerm143 + -1.0f);
				fTempPerm145 = faustpower<2>(fTempPerm144);
				fVec47[0] = fTempPerm145;
				fTempPerm146 = ((fTempPerm53 * (fVec47[0] - fVec47[1])) / fVec46[0]);
				fVec48[IOTA&4095] = fTempPerm146;
				fTempPerm147 = max((float)0, min((float)2047, (fConst4 / fTempPerm140)));
				iTempPerm148 = int(fTempPerm147);
				fTempPerm149 = floorf(fTempPerm147);
				fRec39[0] = ((0.999f * fRec39[1]) + (fConst6 * ((fVec48[IOTA&4095] - (fVec48[(IOTA-iTempPerm148)&4095] * (fTempPerm149 + (1.0f - fTempPerm147)))) - ((fTempPerm147 - fTempPerm149) * fVec48[(IOTA-int((iTempPerm148 + 1)))&4095]))));
				fTempPerm150 = (fSlow75 * fTempPerm73);
				fTempPerm151 = max(fTempPerm150, 23.448949682462139f);
				fTempPerm152 = max(20.0f, fabsf(fTempPerm151));
				fVec49[0] = fTempPerm152;
				fTempPerm153 = (fRec42[1] + (fConst3 * fVec49[1]));
				fRec42[0] = (fTempPerm153 - floorf(fTempPerm153));
				fTempPerm154 = (2.0f * fRec42[0]);
				fTempPerm155 = (fTempPerm154 + -1.0f);
				fTempPerm156 = faustpower<2>(fTempPerm155);
				fVec50[0] = fTempPerm156;
				fTempPerm157 = ((fTempPerm53 * (fVec50[0] - fVec50[1])) / fVec49[0]);
				fVec51[IOTA&4095] = fTempPerm157;
				fTempPerm158 = max((float)0, min((float)2047, (fConst4 / fTempPerm151)));
				iTempPerm159 = int(fTempPerm158);
				fTempPerm160 = floorf(fTempPerm158);
				fRec41[0] = ((0.999f * fRec41[1]) + (fConst6 * ((fVec51[IOTA&4095] - (fVec51[(IOTA-iTempPerm159)&4095] * (fTempPerm160 + (1.0f - fTempPerm158)))) - ((fTempPerm158 - fTempPerm160) * fVec51[(IOTA-int((iTempPerm159 + 1)))&4095]))));
				fTempPerm161 = faustpower<3>(fTempPerm144);
				fVec52[0] = (fTempPerm161 + (1.0f - fTempPerm143));
				fTempPerm162 = ((fTempPerm161 + (1.0f - (fTempPerm143 + fVec52[1]))) / fVec46[0]);
				fVec53[0] = fTempPerm162;
				fTempPerm163 = ((fTempPerm32 * (fVec53[0] - fVec53[1])) / fVec46[0]);
				fVec54[IOTA&4095] = fTempPerm163;
				fTempPerm164 = max((float)0, min((float)2047, (fConst0 * (fRec24[0] / fTempPerm140))));
				iTempPerm165 = int(fTempPerm164);
				fTempPerm166 = floorf(fTempPerm164);
				fTempPerm167 = max(20.0f, fabsf(fTempPerm139));
				fVec55[0] = fTempPerm167;
				fTempPerm168 = (fRec43[1] + (fConst3 * fVec55[1]));
				fRec43[0] = (fTempPerm168 - floorf(fTempPerm168));
				fTempPerm169 = (2.0f * fRec43[0]);
				fTempPerm170 = faustpower<3>((fTempPerm169 + -1.0f));
				fVec56[0] = (fTempPerm170 + (1.0f - fTempPerm169));
				fTempPerm171 = ((fTempPerm170 + (1.0f - (fTempPerm169 + fVec56[1]))) / fVec55[0]);
				fVec57[0] = fTempPerm171;
				fTempPerm172 = faustpower<3>(fTempPerm155);
				fVec58[0] = (fTempPerm172 + (1.0f - fTempPerm154));
				fTempPerm173 = ((fTempPerm172 + (1.0f - (fTempPerm154 + fVec58[1]))) / fVec49[0]);
				fVec59[0] = fTempPerm173;
				fTempPerm174 = ((fTempPerm32 * (fVec59[0] - fVec59[1])) / fVec49[0]);
				fVec60[IOTA&4095] = fTempPerm174;
				fTempPerm175 = max((float)0, min((float)2047, (fConst0 * (fRec24[0] / fTempPerm151))));
				iTempPerm176 = int(fTempPerm175);
				fTempPerm177 = floorf(fTempPerm175);
				fTempPerm178 = max(20.0f, fabsf(fTempPerm150));
				fVec61[0] = fTempPerm178;
				fTempPerm179 = (fRec44[1] + (fConst3 * fVec61[1]));
				fRec44[0] = (fTempPerm179 - floorf(fTempPerm179));
				fTempPerm180 = (2.0f * fRec44[0]);
				fTempPerm181 = faustpower<3>((fTempPerm180 + -1.0f));
				fVec62[0] = (fTempPerm181 + (1.0f - fTempPerm180));
				fTempPerm182 = ((fTempPerm181 + (1.0f - (fTempPerm180 + fVec62[1]))) / fVec61[0]);
				fVec63[0] = fTempPerm182;
				fVec64[0] = fSlow95;
				fTempPerm183 = (fRec45[1] + (fConst3 * fVec64[1]));
				fRec45[0] = (fTempPerm183 - floorf(fTempPerm183));
				fTempPerm184 = (2.0f * fRec45[0]);
				fTempPerm185 = faustpower<3>((fTempPerm184 + -1.0f));
				fVec65[0] = (fTempPerm185 + (1.0f - fTempPerm184));
				fTempPerm186 = (fSlow96 * (fTempPerm185 + (1.0f - (fTempPerm184 + fVec65[1]))));
				fVec66[0] = fTempPerm186;
				fVec67[0] = fSlow99;
				fTempPerm187 = (fRec47[1] + (fConst3 * fVec67[1]));
				fRec47[0] = (fTempPerm187 - floorf(fTempPerm187));
				fTempPerm188 = (2.0f * fRec47[0]);
				fTempPerm189 = (fTempPerm188 + -1.0f);
				fTempPerm190 = faustpower<2>(fTempPerm189);
				fVec68[0] = fTempPerm190;
				fTempPerm191 = (fSlow100 * (fTempPerm53 * (fVec68[0] - fVec68[1])));
				fVec69[IOTA&4095] = fTempPerm191;
				fRec46[0] = (((0.999f * fRec46[1]) + fVec69[IOTA&4095]) - ((fSlow106 * fVec69[(IOTA-iSlow102)&4095]) + (fSlow105 * fVec69[(IOTA-iSlow103)&4095])));
				fTempPerm192 = faustpower<3>(fTempPerm189);
				fVec70[0] = (fTempPerm192 + (1.0f - fTempPerm188));
				fTempPerm193 = (fSlow108 * (fTempPerm192 + (1.0f - (fTempPerm188 + fVec70[1]))));
				fVec71[0] = fTempPerm193;
				fTempPerm194 = (fSlow109 * (fTempPerm32 * (fVec71[0] - fVec71[1])));
				fVec72[IOTA&4095] = fTempPerm194;
				fTempPerm195 = max((float)0, min((float)2047, (fSlow110 * fRec24[0])));
				iTempPerm196 = int(fTempPerm195);
				fTempPerm197 = floorf(fTempPerm195);
				fTempPerm198 = (fSlow18 * (fTempPerm35 * ((fTempPerm122 * (((fSlow54 * (fVec72[IOTA&4095] - ((fVec72[(IOTA-iTempPerm196)&4095] * (fTempPerm197 + (1.0f - fTempPerm195))) + ((fTempPerm195 - fTempPerm197) * fVec72[(IOTA-int((iTempPerm196 + 1)))&4095])))) + (fSlow107 * (fRec23[0] * fRec46[0]))) + (fSlow97 * (fTempPerm48 * (fVec66[0] - fVec66[1]))))) + (((fConst9 * ((((fTempPerm48 * (fVec63[0] - fVec63[1])) / fVec61[0]) + (fSlow54 * ((fVec60[IOTA&4095] - (fVec60[(IOTA-iTempPerm176)&4095] * (fTempPerm177 + (1.0f - fTempPerm175)))) - ((fTempPerm175 - fTempPerm177) * fVec60[(IOTA-int((iTempPerm176 + 1)))&4095])))) + (((fTempPerm48 * (fVec57[0] - fVec57[1])) / fVec55[0]) + (fSlow54 * ((fVec54[IOTA&4095] - (fVec54[(IOTA-iTempPerm165)&4095] * (fTempPerm166 + (1.0f - fTempPerm164)))) - ((fTempPerm164 - fTempPerm166) * fVec54[(IOTA-int((iTempPerm165 + 1)))&4095])))))) + (fSlow93 * (fRec23[0] * ((fRec41[0] * fTempPerm73) + (fRec39[0] * fTempPerm61))))) + (fRec25[0] * (((fSlow54 * (fVec45[IOTA&4095] - ((fVec45[(IOTA-iTempPerm137)&4095] * (fTempPerm138 + (1.0f - fTempPerm136))) + ((fTempPerm136 - fTempPerm138) * fVec45[(IOTA-int((iTempPerm137 + 1)))&4095])))) + (fSlow89 * (fRec23[0] * fRec37[0]))) + (fSlow79 * (fTempPerm48 * (fVec39[0] - fVec39[1])))))))));
			}
			if ((float(((fSlow22 * fTempPerm38) > 0.001f)) != 0.0f)) {
				fVec73[0] = fSlow113;
				fTempPerm199 = (fRec48[1] + (fConst3 * fVec73[1]));
				fRec48[0] = (fTempPerm199 - floorf(fTempPerm199));
				fTempPerm200 = (2.0f * fRec48[0]);
				fTempPerm201 = faustpower<3>((fTempPerm200 + -1.0f));
				fVec74[0] = (fTempPerm201 + (1.0f - fTempPerm200));
				fTempPerm202 = (fSlow114 * (fTempPerm201 + (1.0f - (fTempPerm200 + fVec74[1]))));
				fVec75[0] = fTempPerm202;
				fVec76[0] = fSlow117;
				fTempPerm203 = (fRec50[1] + (fConst3 * fVec76[1]));
				fRec50[0] = (fTempPerm203 - floorf(fTempPerm203));
				fTempPerm204 = (2.0f * fRec50[0]);
				fTempPerm205 = (fTempPerm204 + -1.0f);
				fTempPerm206 = faustpower<2>(fTempPerm205);
				fVec77[0] = fTempPerm206;
				fTempPerm207 = (fSlow118 * (fTempPerm53 * (fVec77[0] - fVec77[1])));
				fVec78[IOTA&4095] = fTempPerm207;
				fRec49[0] = (((0.999f * fRec49[1]) + fVec78[IOTA&4095]) - ((fSlow124 * fVec78[(IOTA-iSlow120)&4095]) + (fSlow123 * fVec78[(IOTA-iSlow121)&4095])));
				fTempPerm208 = faustpower<3>(fTempPerm205);
				fVec79[0] = (fTempPerm208 + (1.0f - fTempPerm204));
				fTempPerm209 = (fSlow126 * (fTempPerm208 + (1.0f - (fTempPerm204 + fVec79[1]))));
				fVec80[0] = fTempPerm209;
				fTempPerm210 = (fSlow127 * (fTempPerm32 * (fVec80[0] - fVec80[1])));
				fVec81[IOTA&4095] = fTempPerm210;
				fTempPerm211 = max((float)0, min((float)2047, (fSlow128 * fRec24[0])));
				iTempPerm212 = int(fTempPerm211);
				fTempPerm213 = floorf(fTempPerm211);
				fTempPerm214 = (fSlow111 * fTempPerm61);
				fTempPerm215 = max(fTempPerm214, 23.448949682462139f);
				fTempPerm216 = max(20.0f, fabsf(fTempPerm215));
				fVec82[0] = fTempPerm216;
				fTempPerm217 = (fRec52[1] + (fConst3 * fVec82[1]));
				fRec52[0] = (fTempPerm217 - floorf(fTempPerm217));
				fTempPerm218 = (2.0f * fRec52[0]);
				fTempPerm219 = (fTempPerm218 + -1.0f);
				fTempPerm220 = faustpower<2>(fTempPerm219);
				fVec83[0] = fTempPerm220;
				fTempPerm221 = ((fTempPerm53 * (fVec83[0] - fVec83[1])) / fVec82[0]);
				fVec84[IOTA&4095] = fTempPerm221;
				fTempPerm222 = max((float)0, min((float)2047, (fConst4 / fTempPerm215)));
				iTempPerm223 = int(fTempPerm222);
				fTempPerm224 = floorf(fTempPerm222);
				fRec51[0] = ((0.999f * fRec51[1]) + (fConst6 * ((fVec84[IOTA&4095] - (fVec84[(IOTA-iTempPerm223)&4095] * (fTempPerm224 + (1.0f - fTempPerm222)))) - ((fTempPerm222 - fTempPerm224) * fVec84[(IOTA-int((iTempPerm223 + 1)))&4095]))));
				fTempPerm225 = (fSlow111 * fTempPerm73);
				fTempPerm226 = max(fTempPerm225, 23.448949682462139f);
				fTempPerm227 = max(20.0f, fabsf(fTempPerm226));
				fVec85[0] = fTempPerm227;
				fTempPerm228 = (fRec54[1] + (fConst3 * fVec85[1]));
				fRec54[0] = (fTempPerm228 - floorf(fTempPerm228));
				fTempPerm229 = (2.0f * fRec54[0]);
				fTempPerm230 = (fTempPerm229 + -1.0f);
				fTempPerm231 = faustpower<2>(fTempPerm230);
				fVec86[0] = fTempPerm231;
				fTempPerm232 = ((fTempPerm53 * (fVec86[0] - fVec86[1])) / fVec85[0]);
				fVec87[IOTA&4095] = fTempPerm232;
				fTempPerm233 = max((float)0, min((float)2047, (fConst4 / fTempPerm226)));
				iTempPerm234 = int(fTempPerm233);
				fTempPerm235 = floorf(fTempPerm233);
				fRec53[0] = ((0.999f * fRec53[1]) + (fConst6 * ((fVec87[IOTA&4095] - (fVec87[(IOTA-iTempPerm234)&4095] * (fTempPerm235 + (1.0f - fTempPerm233)))) - ((fTempPerm233 - fTempPerm235) * fVec87[(IOTA-int((iTempPerm234 + 1)))&4095]))));
				fTempPerm236 = faustpower<3>(fTempPerm219);
				fVec88[0] = (fTempPerm236 + (1.0f - fTempPerm218));
				fTempPerm237 = ((fTempPerm236 + (1.0f - (fTempPerm218 + fVec88[1]))) / fVec82[0]);
				fVec89[0] = fTempPerm237;
				fTempPerm238 = ((fTempPerm32 * (fVec89[0] - fVec89[1])) / fVec82[0]);
				fVec90[IOTA&4095] = fTempPerm238;
				fTempPerm239 = max((float)0, min((float)2047, (fConst0 * (fRec24[0] / fTempPerm215))));
				iTempPerm240 = int(fTempPerm239);
				fTempPerm241 = floorf(fTempPerm239);
				fTempPerm242 = max(20.0f, fabsf(fTempPerm214));
				fVec91[0] = fTempPerm242;
				fTempPerm243 = (fRec55[1] + (fConst3 * fVec91[1]));
				fRec55[0] = (fTempPerm243 - floorf(fTempPerm243));
				fTempPerm244 = (2.0f * fRec55[0]);
				fTempPerm245 = faustpower<3>((fTempPerm244 + -1.0f));
				fVec92[0] = (fTempPerm245 + (1.0f - fTempPerm244));
				fTempPerm246 = ((fTempPerm245 + (1.0f - (fTempPerm244 + fVec92[1]))) / fVec91[0]);
				fVec93[0] = fTempPerm246;
				fTempPerm247 = faustpower<3>(fTempPerm230);
				fVec94[0] = (fTempPerm247 + (1.0f - fTempPerm229));
				fTempPerm248 = ((fTempPerm247 + (1.0f - (fTempPerm229 + fVec94[1]))) / fVec85[0]);
				fVec95[0] = fTempPerm248;
				fTempPerm249 = ((fTempPerm32 * (fVec95[0] - fVec95[1])) / fVec85[0]);
				fVec96[IOTA&4095] = fTempPerm249;
				fTempPerm250 = max((float)0, min((float)2047, (fConst0 * (fRec24[0] / fTempPerm226))));
				iTempPerm251 = int(fTempPerm250);
				fTempPerm252 = floorf(fTempPerm250);
				fTempPerm253 = max(20.0f, fabsf(fTempPerm225));
				fVec97[0] = fTempPerm253;
				fTempPerm254 = (fRec56[1] + (fConst3 * fVec97[1]));
				fRec56[0] = (fTempPerm254 - floorf(fTempPerm254));
				fTempPerm255 = (2.0f * fRec56[0]);
				fTempPerm256 = faustpower<3>((fTempPerm255 + -1.0f));
				fVec98[0] = (fTempPerm256 + (1.0f - fTempPerm255));
				fTempPerm257 = ((fTempPerm256 + (1.0f - (fTempPerm255 + fVec98[1]))) / fVec97[0]);
				fVec99[0] = fTempPerm257;
				fVec100[0] = fSlow131;
				fTempPerm258 = (fRec57[1] + (fConst3 * fVec100[1]));
				fRec57[0] = (fTempPerm258 - floorf(fTempPerm258));
				fTempPerm259 = (2.0f * fRec57[0]);
				fTempPerm260 = faustpower<3>((fTempPerm259 + -1.0f));
				fVec101[0] = (fTempPerm260 + (1.0f - fTempPerm259));
				fTempPerm261 = (fSlow132 * (fTempPerm260 + (1.0f - (fTempPerm259 + fVec101[1]))));
				fVec102[0] = fTempPerm261;
				fVec103[0] = fSlow135;
				fTempPerm262 = (fRec59[1] + (fConst3 * fVec103[1]));
				fRec59[0] = (fTempPerm262 - floorf(fTempPerm262));
				fTempPerm263 = (2.0f * fRec59[0]);
				fTempPerm264 = (fTempPerm263 + -1.0f);
				fTempPerm265 = faustpower<2>(fTempPerm264);
				fVec104[0] = fTempPerm265;
				fTempPerm266 = (fSlow136 * (fTempPerm53 * (fVec104[0] - fVec104[1])));
				fVec105[IOTA&4095] = fTempPerm266;
				fRec58[0] = (((0.999f * fRec58[1]) + fVec105[IOTA&4095]) - ((fSlow142 * fVec105[(IOTA-iSlow138)&4095]) + (fSlow141 * fVec105[(IOTA-iSlow139)&4095])));
				fTempPerm267 = faustpower<3>(fTempPerm264);
				fVec106[0] = (fTempPerm267 + (1.0f - fTempPerm263));
				fTempPerm268 = (fSlow144 * (fTempPerm267 + (1.0f - (fTempPerm263 + fVec106[1]))));
				fVec107[0] = fTempPerm268;
				fTempPerm269 = (fSlow145 * (fTempPerm32 * (fVec107[0] - fVec107[1])));
				fVec108[IOTA&4095] = fTempPerm269;
				fTempPerm270 = max((float)0, min((float)2047, (fSlow146 * fRec24[0])));
				iTempPerm271 = int(fTempPerm270);
				fTempPerm272 = floorf(fTempPerm270);
				fTempPerm273 = (fSlow22 * (fTempPerm38 * ((fTempPerm122 * (((fSlow54 * (fVec108[IOTA&4095] - ((fVec108[(IOTA-iTempPerm271)&4095] * (fTempPerm272 + (1.0f - fTempPerm270))) + ((fTempPerm270 - fTempPerm272) * fVec108[(IOTA-int((iTempPerm271 + 1)))&4095])))) + (fSlow143 * (fRec23[0] * fRec58[0]))) + (fSlow133 * (fTempPerm48 * (fVec102[0] - fVec102[1]))))) + (((fConst9 * ((((fTempPerm48 * (fVec99[0] - fVec99[1])) / fVec97[0]) + (fSlow54 * ((fVec96[IOTA&4095] - (fVec96[(IOTA-iTempPerm251)&4095] * (fTempPerm252 + (1.0f - fTempPerm250)))) - ((fTempPerm250 - fTempPerm252) * fVec96[(IOTA-int((iTempPerm251 + 1)))&4095])))) + (((fTempPerm48 * (fVec93[0] - fVec93[1])) / fVec91[0]) + (fSlow54 * ((fVec90[IOTA&4095] - (fVec90[(IOTA-iTempPerm240)&4095] * (fTempPerm241 + (1.0f - fTempPerm239)))) - ((fTempPerm239 - fTempPerm241) * fVec90[(IOTA-int((iTempPerm240 + 1)))&4095])))))) + (fSlow129 * (fRec23[0] * ((fRec53[0] * fTempPerm73) + (fRec51[0] * fTempPerm61))))) + (fRec25[0] * (((fSlow54 * (fVec81[IOTA&4095] - ((fVec81[(IOTA-iTempPerm212)&4095] * (fTempPerm213 + (1.0f - fTempPerm211))) + ((fTempPerm211 - fTempPerm213) * fVec81[(IOTA-int((iTempPerm212 + 1)))&4095])))) + (fSlow125 * (fRec23[0] * fRec49[0]))) + (fSlow115 * (fTempPerm48 * (fVec75[0] - fVec75[1])))))))));
			}
			if ((float(((fSlow26 * fTempPerm41) > 0.001f)) != 0.0f)) {
				fVec109[0] = fSlow149;
				fTempPerm274 = (fRec60[1] + (fConst3 * fVec109[1]));
				fRec60[0] = (fTempPerm274 - floorf(fTempPerm274));
				fTempPerm275 = (2.0f * fRec60[0]);
				fTempPerm276 = faustpower<3>((fTempPerm275 + -1.0f));
				fVec110[0] = (fTempPerm276 + (1.0f - fTempPerm275));
				fTempPerm277 = (fSlow150 * (fTempPerm276 + (1.0f - (fTempPerm275 + fVec110[1]))));
				fVec111[0] = fTempPerm277;
				fVec112[0] = fSlow153;
				fTempPerm278 = (fRec62[1] + (fConst3 * fVec112[1]));
				fRec62[0] = (fTempPerm278 - floorf(fTempPerm278));
				fTempPerm279 = (2.0f * fRec62[0]);
				fTempPerm280 = (fTempPerm279 + -1.0f);
				fTempPerm281 = faustpower<2>(fTempPerm280);
				fVec113[0] = fTempPerm281;
				fTempPerm282 = (fSlow154 * (fTempPerm53 * (fVec113[0] - fVec113[1])));
				fVec114[IOTA&4095] = fTempPerm282;
				fRec61[0] = (((0.999f * fRec61[1]) + fVec114[IOTA&4095]) - ((fSlow160 * fVec114[(IOTA-iSlow156)&4095]) + (fSlow159 * fVec114[(IOTA-iSlow157)&4095])));
				fTempPerm283 = faustpower<3>(fTempPerm280);
				fVec115[0] = (fTempPerm283 + (1.0f - fTempPerm279));
				fTempPerm284 = (fSlow162 * (fTempPerm283 + (1.0f - (fTempPerm279 + fVec115[1]))));
				fVec116[0] = fTempPerm284;
				fTempPerm285 = (fSlow163 * (fTempPerm32 * (fVec116[0] - fVec116[1])));
				fVec117[IOTA&4095] = fTempPerm285;
				fTempPerm286 = max((float)0, min((float)2047, (fSlow164 * fRec24[0])));
				iTempPerm287 = int(fTempPerm286);
				fTempPerm288 = floorf(fTempPerm286);
				fTempPerm289 = (fSlow147 * fTempPerm61);
				fTempPerm290 = max(fTempPerm289, 23.448949682462139f);
				fTempPerm291 = max(20.0f, fabsf(fTempPerm290));
				fVec118[0] = fTempPerm291;
				fTempPerm292 = (fRec64[1] + (fConst3 * fVec118[1]));
				fRec64[0] = (fTempPerm292 - floorf(fTempPerm292));
				fTempPerm293 = (2.0f * fRec64[0]);
				fTempPerm294 = (fTempPerm293 + -1.0f);
				fTempPerm295 = faustpower<2>(fTempPerm294);
				fVec119[0] = fTempPerm295;
				fTempPerm296 = ((fTempPerm53 * (fVec119[0] - fVec119[1])) / fVec118[0]);
				fVec120[IOTA&4095] = fTempPerm296;
				fTempPerm297 = max((float)0, min((float)2047, (fConst4 / fTempPerm290)));
				iTempPerm298 = int(fTempPerm297);
				fTempPerm299 = floorf(fTempPerm297);
				fRec63[0] = ((0.999f * fRec63[1]) + (fConst6 * ((fVec120[IOTA&4095] - (fVec120[(IOTA-iTempPerm298)&4095] * (fTempPerm299 + (1.0f - fTempPerm297)))) - ((fTempPerm297 - fTempPerm299) * fVec120[(IOTA-int((iTempPerm298 + 1)))&4095]))));
				fTempPerm300 = (fSlow147 * fTempPerm73);
				fTempPerm301 = max(fTempPerm300, 23.448949682462139f);
				fTempPerm302 = max(20.0f, fabsf(fTempPerm301));
				fVec121[0] = fTempPerm302;
				fTempPerm303 = (fRec66[1] + (fConst3 * fVec121[1]));
				fRec66[0] = (fTempPerm303 - floorf(fTempPerm303));
				fTempPerm304 = (2.0f * fRec66[0]);
				fTempPerm305 = (fTempPerm304 + -1.0f);
				fTempPerm306 = faustpower<2>(fTempPerm305);
				fVec122[0] = fTempPerm306;
				fTempPerm307 = ((fTempPerm53 * (fVec122[0] - fVec122[1])) / fVec121[0]);
				fVec123[IOTA&4095] = fTempPerm307;
				fTempPerm308 = max((float)0, min((float)2047, (fConst4 / fTempPerm301)));
				iTempPerm309 = int(fTempPerm308);
				fTempPerm310 = floorf(fTempPerm308);
				fRec65[0] = ((0.999f * fRec65[1]) + (fConst6 * ((fVec123[IOTA&4095] - (fVec123[(IOTA-iTempPerm309)&4095] * (fTempPerm310 + (1.0f - fTempPerm308)))) - ((fTempPerm308 - fTempPerm310) * fVec123[(IOTA-int((iTempPerm309 + 1)))&4095]))));
				fTempPerm311 = faustpower<3>(fTempPerm294);
				fVec124[0] = (fTempPerm311 + (1.0f - fTempPerm293));
				fTempPerm312 = ((fTempPerm311 + (1.0f - (fTempPerm293 + fVec124[1]))) / fVec118[0]);
				fVec125[0] = fTempPerm312;
				fTempPerm313 = ((fTempPerm32 * (fVec125[0] - fVec125[1])) / fVec118[0]);
				fVec126[IOTA&4095] = fTempPerm313;
				fTempPerm314 = max((float)0, min((float)2047, (fConst0 * (fRec24[0] / fTempPerm290))));
				iTempPerm315 = int(fTempPerm314);
				fTempPerm316 = floorf(fTempPerm314);
				fTempPerm317 = max(20.0f, fabsf(fTempPerm289));
				fVec127[0] = fTempPerm317;
				fTempPerm318 = (fRec67[1] + (fConst3 * fVec127[1]));
				fRec67[0] = (fTempPerm318 - floorf(fTempPerm318));
				fTempPerm319 = (2.0f * fRec67[0]);
				fTempPerm320 = faustpower<3>((fTempPerm319 + -1.0f));
				fVec128[0] = (fTempPerm320 + (1.0f - fTempPerm319));
				fTempPerm321 = ((fTempPerm320 + (1.0f - (fTempPerm319 + fVec128[1]))) / fVec127[0]);
				fVec129[0] = fTempPerm321;
				fTempPerm322 = faustpower<3>(fTempPerm305);
				fVec130[0] = (fTempPerm322 + (1.0f - fTempPerm304));
				fTempPerm323 = ((fTempPerm322 + (1.0f - (fTempPerm304 + fVec130[1]))) / fVec121[0]);
				fVec131[0] = fTempPerm323;
				fTempPerm324 = ((fTempPerm32 * (fVec131[0] - fVec131[1])) / fVec121[0]);
				fVec132[IOTA&4095] = fTempPerm324;
				fTempPerm325 = max((float)0, min((float)2047, (fConst0 * (fRec24[0] / fTempPerm301))));
				iTempPerm326 = int(fTempPerm325);
				fTempPerm327 = floorf(fTempPerm325);
				fTempPerm328 = max(20.0f, fabsf(fTempPerm300));
				fVec133[0] = fTempPerm328;
				fTempPerm329 = (fRec68[1] + (fConst3 * fVec133[1]));
				fRec68[0] = (fTempPerm329 - floorf(fTempPerm329));
				fTempPerm330 = (2.0f * fRec68[0]);
				fTempPerm331 = faustpower<3>((fTempPerm330 + -1.0f));
				fVec134[0] = (fTempPerm331 + (1.0f - fTempPerm330));
				fTempPerm332 = ((fTempPerm331 + (1.0f - (fTempPerm330 + fVec134[1]))) / fVec133[0]);
				fVec135[0] = fTempPerm332;
				fVec136[0] = fSlow167;
				fTempPerm333 = (fRec69[1] + (fConst3 * fVec136[1]));
				fRec69[0] = (fTempPerm333 - floorf(fTempPerm333));
				fTempPerm334 = (2.0f * fRec69[0]);
				fTempPerm335 = faustpower<3>((fTempPerm334 + -1.0f));
				fVec137[0] = (fTempPerm335 + (1.0f - fTempPerm334));
				fTempPerm336 = (fSlow168 * (fTempPerm335 + (1.0f - (fTempPerm334 + fVec137[1]))));
				fVec138[0] = fTempPerm336;
				fVec139[0] = fSlow171;
				fTempPerm337 = (fRec71[1] + (fConst3 * fVec139[1]));
				fRec71[0] = (fTempPerm337 - floorf(fTempPerm337));
				fTempPerm338 = (2.0f * fRec71[0]);
				fTempPerm339 = (fTempPerm338 + -1.0f);
				fTempPerm340 = faustpower<2>(fTempPerm339);
				fVec140[0] = fTempPerm340;
				fTempPerm341 = (fSlow172 * (fTempPerm53 * (fVec140[0] - fVec140[1])));
				fVec141[IOTA&4095] = fTempPerm341;
				fRec70[0] = (((0.999f * fRec70[1]) + fVec141[IOTA&4095]) - ((fSlow178 * fVec141[(IOTA-iSlow174)&4095]) + (fSlow177 * fVec141[(IOTA-iSlow175)&4095])));
				fTempPerm342 = faustpower<3>(fTempPerm339);
				fVec142[0] = (fTempPerm342 + (1.0f - fTempPerm338));
				fTempPerm343 = (fSlow180 * (fTempPerm342 + (1.0f - (fTempPerm338 + fVec142[1]))));
				fVec143[0] = fTempPerm343;
				fTempPerm344 = (fSlow181 * (fTempPerm32 * (fVec143[0] - fVec143[1])));
				fVec144[IOTA&4095] = fTempPerm344;
				fTempPerm345 = max((float)0, min((float)2047, (fSlow182 * fRec24[0])));
				iTempPerm346 = int(fTempPerm345);
				fTempPerm347 = floorf(fTempPerm345);
				fTempPerm348 = (fSlow26 * (fTempPerm41 * ((fTempPerm122 * (((fSlow54 * (fVec144[IOTA&4095] - ((fVec144[(IOTA-iTempPerm346)&4095] * (fTempPerm347 + (1.0f - fTempPerm345))) + ((fTempPerm345 - fTempPerm347) * fVec144[(IOTA-int((iTempPerm346 + 1)))&4095])))) + (fSlow179 * (fRec23[0] * fRec70[0]))) + (fSlow169 * (fTempPerm48 * (fVec138[0] - fVec138[1]))))) + (((fConst9 * ((((fTempPerm48 * (fVec135[0] - fVec135[1])) / fVec133[0]) + (fSlow54 * ((fVec132[IOTA&4095] - (fVec132[(IOTA-iTempPerm326)&4095] * (fTempPerm327 + (1.0f - fTempPerm325)))) - ((fTempPerm325 - fTempPerm327) * fVec132[(IOTA-int((iTempPerm326 + 1)))&4095])))) + (((fTempPerm48 * (fVec129[0] - fVec129[1])) / fVec127[0]) + (fSlow54 * ((fVec126[IOTA&4095] - (fVec126[(IOTA-iTempPerm315)&4095] * (fTempPerm316 + (1.0f - fTempPerm314)))) - ((fTempPerm314 - fTempPerm316) * fVec126[(IOTA-int((iTempPerm315 + 1)))&4095])))))) + (fSlow165 * (fRec23[0] * ((fRec65[0] * fTempPerm73) + (fRec63[0] * fTempPerm61))))) + (fRec25[0] * (((fSlow54 * (fVec117[IOTA&4095] - ((fVec117[(IOTA-iTempPerm287)&4095] * (fTempPerm288 + (1.0f - fTempPerm286))) + ((fTempPerm286 - fTempPerm288) * fVec117[(IOTA-int((iTempPerm287 + 1)))&4095])))) + (fSlow161 * (fRec23[0] * fRec61[0]))) + (fSlow151 * (fTempPerm48 * (fVec111[0] - fVec111[1])))))))));
			}
			if ((float(((fSlow30 * fTempPerm44) > 0.001f)) != 0.0f)) {
				fVec145[0] = fSlow185;
				fTempPerm349 = (fRec72[1] + (fConst3 * fVec145[1]));
				fRec72[0] = (fTempPerm349 - floorf(fTempPerm349));
				fTempPerm350 = (2.0f * fRec72[0]);
				fTempPerm351 = faustpower<3>((fTempPerm350 + -1.0f));
				fVec146[0] = (fTempPerm351 + (1.0f - fTempPerm350));
				fTempPerm352 = (fSlow186 * (fTempPerm351 + (1.0f - (fTempPerm350 + fVec146[1]))));
				fVec147[0] = fTempPerm352;
				fVec148[0] = fSlow189;
				fTempPerm353 = (fRec74[1] + (fConst3 * fVec148[1]));
				fRec74[0] = (fTempPerm353 - floorf(fTempPerm353));
				fTempPerm354 = (2.0f * fRec74[0]);
				fTempPerm355 = (fTempPerm354 + -1.0f);
				fTempPerm356 = faustpower<2>(fTempPerm355);
				fVec149[0] = fTempPerm356;
				fTempPerm357 = (fSlow190 * (fTempPerm53 * (fVec149[0] - fVec149[1])));
				fVec150[IOTA&4095] = fTempPerm357;
				fRec73[0] = (((0.999f * fRec73[1]) + fVec150[IOTA&4095]) - ((fSlow196 * fVec150[(IOTA-iSlow192)&4095]) + (fSlow195 * fVec150[(IOTA-iSlow193)&4095])));
				fTempPerm358 = faustpower<3>(fTempPerm355);
				fVec151[0] = (fTempPerm358 + (1.0f - fTempPerm354));
				fTempPerm359 = (fSlow198 * (fTempPerm358 + (1.0f - (fTempPerm354 + fVec151[1]))));
				fVec152[0] = fTempPerm359;
				fTempPerm360 = (fSlow199 * (fTempPerm32 * (fVec152[0] - fVec152[1])));
				fVec153[IOTA&4095] = fTempPerm360;
				fTempPerm361 = max((float)0, min((float)2047, (fSlow200 * fRec24[0])));
				iTempPerm362 = int(fTempPerm361);
				fTempPerm363 = floorf(fTempPerm361);
				fTempPerm364 = (fSlow183 * fTempPerm61);
				fTempPerm365 = max(fTempPerm364, 23.448949682462139f);
				fTempPerm366 = max(20.0f, fabsf(fTempPerm365));
				fVec154[0] = fTempPerm366;
				fTempPerm367 = (fRec76[1] + (fConst3 * fVec154[1]));
				fRec76[0] = (fTempPerm367 - floorf(fTempPerm367));
				fTempPerm368 = (2.0f * fRec76[0]);
				fTempPerm369 = (fTempPerm368 + -1.0f);
				fTempPerm370 = faustpower<2>(fTempPerm369);
				fVec155[0] = fTempPerm370;
				fTempPerm371 = ((fTempPerm53 * (fVec155[0] - fVec155[1])) / fVec154[0]);
				fVec156[IOTA&4095] = fTempPerm371;
				fTempPerm372 = max((float)0, min((float)2047, (fConst4 / fTempPerm365)));
				iTempPerm373 = int(fTempPerm372);
				fTempPerm374 = floorf(fTempPerm372);
				fRec75[0] = ((0.999f * fRec75[1]) + (fConst6 * ((fVec156[IOTA&4095] - (fVec156[(IOTA-iTempPerm373)&4095] * (fTempPerm374 + (1.0f - fTempPerm372)))) - ((fTempPerm372 - fTempPerm374) * fVec156[(IOTA-int((iTempPerm373 + 1)))&4095]))));
				fTempPerm375 = (fSlow183 * fTempPerm73);
				fTempPerm376 = max(fTempPerm375, 23.448949682462139f);
				fTempPerm377 = max(20.0f, fabsf(fTempPerm376));
				fVec157[0] = fTempPerm377;
				fTempPerm378 = (fRec78[1] + (fConst3 * fVec157[1]));
				fRec78[0] = (fTempPerm378 - floorf(fTempPerm378));
				fTempPerm379 = (2.0f * fRec78[0]);
				fTempPerm380 = (fTempPerm379 + -1.0f);
				fTempPerm381 = faustpower<2>(fTempPerm380);
				fVec158[0] = fTempPerm381;
				fTempPerm382 = ((fTempPerm53 * (fVec158[0] - fVec158[1])) / fVec157[0]);
				fVec159[IOTA&4095] = fTempPerm382;
				fTempPerm383 = max((float)0, min((float)2047, (fConst4 / fTempPerm376)));
				iTempPerm384 = int(fTempPerm383);
				fTempPerm385 = floorf(fTempPerm383);
				fRec77[0] = ((0.999f * fRec77[1]) + (fConst6 * ((fVec159[IOTA&4095] - (fVec159[(IOTA-iTempPerm384)&4095] * (fTempPerm385 + (1.0f - fTempPerm383)))) - ((fTempPerm383 - fTempPerm385) * fVec159[(IOTA-int((iTempPerm384 + 1)))&4095]))));
				fTempPerm386 = faustpower<3>(fTempPerm369);
				fVec160[0] = (fTempPerm386 + (1.0f - fTempPerm368));
				fTempPerm387 = ((fTempPerm386 + (1.0f - (fTempPerm368 + fVec160[1]))) / fVec154[0]);
				fVec161[0] = fTempPerm387;
				fTempPerm388 = ((fTempPerm32 * (fVec161[0] - fVec161[1])) / fVec154[0]);
				fVec162[IOTA&4095] = fTempPerm388;
				fTempPerm389 = max((float)0, min((float)2047, (fConst0 * (fRec24[0] / fTempPerm365))));
				iTempPerm390 = int(fTempPerm389);
				fTempPerm391 = floorf(fTempPerm389);
				fTempPerm392 = max(20.0f, fabsf(fTempPerm364));
				fVec163[0] = fTempPerm392;
				fTempPerm393 = (fRec79[1] + (fConst3 * fVec163[1]));
				fRec79[0] = (fTempPerm393 - floorf(fTempPerm393));
				fTempPerm394 = (2.0f * fRec79[0]);
				fTempPerm395 = faustpower<3>((fTempPerm394 + -1.0f));
				fVec164[0] = (fTempPerm395 + (1.0f - fTempPerm394));
				fTempPerm396 = ((fTempPerm395 + (1.0f - (fTempPerm394 + fVec164[1]))) / fVec163[0]);
				fVec165[0] = fTempPerm396;
				fTempPerm397 = faustpower<3>(fTempPerm380);
				fVec166[0] = (fTempPerm397 + (1.0f - fTempPerm379));
				fTempPerm398 = ((fTempPerm397 + (1.0f - (fTempPerm379 + fVec166[1]))) / fVec157[0]);
				fVec167[0] = fTempPerm398;
				fTempPerm399 = ((fTempPerm32 * (fVec167[0] - fVec167[1])) / fVec157[0]);
				fVec168[IOTA&4095] = fTempPerm399;
				fTempPerm400 = max((float)0, min((float)2047, (fConst0 * (fRec24[0] / fTempPerm376))));
				iTempPerm401 = int(fTempPerm400);
				fTempPerm402 = floorf(fTempPerm400);
				fTempPerm403 = max(20.0f, fabsf(fTempPerm375));
				fVec169[0] = fTempPerm403;
				fTempPerm404 = (fRec80[1] + (fConst3 * fVec169[1]));
				fRec80[0] = (fTempPerm404 - floorf(fTempPerm404));
				fTempPerm405 = (2.0f * fRec80[0]);
				fTempPerm406 = faustpower<3>((fTempPerm405 + -1.0f));
				fVec170[0] = (fTempPerm406 + (1.0f - fTempPerm405));
				fTempPerm407 = ((fTempPerm406 + (1.0f - (fTempPerm405 + fVec170[1]))) / fVec169[0]);
				fVec171[0] = fTempPerm407;
				fVec172[0] = fSlow203;
				fTempPerm408 = (fRec81[1] + (fConst3 * fVec172[1]));
				fRec81[0] = (fTempPerm408 - floorf(fTempPerm408));
				fTempPerm409 = (2.0f * fRec81[0]);
				fTempPerm410 = faustpower<3>((fTempPerm409 + -1.0f));
				fVec173[0] = (fTempPerm410 + (1.0f - fTempPerm409));
				fTempPerm411 = (fSlow204 * (fTempPerm410 + (1.0f - (fTempPerm409 + fVec173[1]))));
				fVec174[0] = fTempPerm411;
				fVec175[0] = fSlow207;
				fTempPerm412 = (fRec83[1] + (fConst3 * fVec175[1]));
				fRec83[0] = (fTempPerm412 - floorf(fTempPerm412));
				fTempPerm413 = (2.0f * fRec83[0]);
				fTempPerm414 = (fTempPerm413 + -1.0f);
				fTempPerm415 = faustpower<2>(fTempPerm414);
				fVec176[0] = fTempPerm415;
				fTempPerm416 = (fSlow208 * (fTempPerm53 * (fVec176[0] - fVec176[1])));
				fVec177[IOTA&4095] = fTempPerm416;
				fRec82[0] = (((0.999f * fRec82[1]) + fVec177[IOTA&4095]) - ((fSlow214 * fVec177[(IOTA-iSlow210)&4095]) + (fSlow213 * fVec177[(IOTA-iSlow211)&4095])));
				fTempPerm417 = faustpower<3>(fTempPerm414);
				fVec178[0] = (fTempPerm417 + (1.0f - fTempPerm413));
				fTempPerm418 = (fSlow216 * (fTempPerm417 + (1.0f - (fTempPerm413 + fVec178[1]))));
				fVec179[0] = fTempPerm418;
				fTempPerm419 = (fSlow217 * (fTempPerm32 * (fVec179[0] - fVec179[1])));
				fVec180[IOTA&4095] = fTempPerm419;
				fTempPerm420 = max((float)0, min((float)2047, (fSlow218 * fRec24[0])));
				iTempPerm421 = int(fTempPerm420);
				fTempPerm422 = floorf(fTempPerm420);
				fTempPerm423 = (fSlow30 * (fTempPerm44 * ((fTempPerm122 * (((fSlow54 * (fVec180[IOTA&4095] - ((fVec180[(IOTA-iTempPerm421)&4095] * (fTempPerm422 + (1.0f - fTempPerm420))) + ((fTempPerm420 - fTempPerm422) * fVec180[(IOTA-int((iTempPerm421 + 1)))&4095])))) + (fSlow215 * (fRec23[0] * fRec82[0]))) + (fSlow205 * (fTempPerm48 * (fVec174[0] - fVec174[1]))))) + (((fConst9 * ((((fTempPerm48 * (fVec171[0] - fVec171[1])) / fVec169[0]) + (fSlow54 * ((fVec168[IOTA&4095] - (fVec168[(IOTA-iTempPerm401)&4095] * (fTempPerm402 + (1.0f - fTempPerm400)))) - ((fTempPerm400 - fTempPerm402) * fVec168[(IOTA-int((iTempPerm401 + 1)))&4095])))) + (((fTempPerm48 * (fVec165[0] - fVec165[1])) / fVec163[0]) + (fSlow54 * ((fVec162[IOTA&4095] - (fVec162[(IOTA-iTempPerm390)&4095] * (fTempPerm391 + (1.0f - fTempPerm389)))) - ((fTempPerm389 - fTempPerm391) * fVec162[(IOTA-int((iTempPerm390 + 1)))&4095])))))) + (fSlow201 * (fRec23[0] * ((fRec77[0] * fTempPerm73) + (fRec75[0] * fTempPerm61))))) + (fRec25[0] * (((fSlow54 * (fVec153[IOTA&4095] - ((fVec153[(IOTA-iTempPerm362)&4095] * (fTempPerm363 + (1.0f - fTempPerm361))) + ((fTempPerm361 - fTempPerm363) * fVec153[(IOTA-int((iTempPerm362 + 1)))&4095])))) + (fSlow197 * (fRec23[0] * fRec73[0]))) + (fSlow187 * (fTempPerm48 * (fVec147[0] - fVec147[1])))))))));
			}
			if ((float(((fSlow34 * fTempPerm47) > 0.001f)) != 0.0f)) {
				fVec181[0] = fSlow221;
				fTempPerm424 = (fRec84[1] + (fConst3 * fVec181[1]));
				fRec84[0] = (fTempPerm424 - floorf(fTempPerm424));
				fTempPerm425 = (2.0f * fRec84[0]);
				fTempPerm426 = faustpower<3>((fTempPerm425 + -1.0f));
				fVec182[0] = (fTempPerm426 + (1.0f - fTempPerm425));
				fTempPerm427 = (fSlow222 * (fTempPerm426 + (1.0f - (fTempPerm425 + fVec182[1]))));
				fVec183[0] = fTempPerm427;
				fVec184[0] = fSlow225;
				fTempPerm428 = (fRec86[1] + (fConst3 * fVec184[1]));
				fRec86[0] = (fTempPerm428 - floorf(fTempPerm428));
				fTempPerm429 = (2.0f * fRec86[0]);
				fTempPerm430 = (fTempPerm429 + -1.0f);
				fTempPerm431 = faustpower<2>(fTempPerm430);
				fVec185[0] = fTempPerm431;
				fTempPerm432 = (fSlow226 * (fTempPerm53 * (fVec185[0] - fVec185[1])));
				fVec186[IOTA&4095] = fTempPerm432;
				fRec85[0] = (((0.999f * fRec85[1]) + fVec186[IOTA&4095]) - ((fSlow232 * fVec186[(IOTA-iSlow228)&4095]) + (fSlow231 * fVec186[(IOTA-iSlow229)&4095])));
				fTempPerm433 = faustpower<3>(fTempPerm430);
				fVec187[0] = (fTempPerm433 + (1.0f - fTempPerm429));
				fTempPerm434 = (fSlow234 * (fTempPerm433 + (1.0f - (fTempPerm429 + fVec187[1]))));
				fVec188[0] = fTempPerm434;
				fTempPerm435 = (fSlow235 * (fTempPerm32 * (fVec188[0] - fVec188[1])));
				fVec189[IOTA&4095] = fTempPerm435;
				fTempPerm436 = max((float)0, min((float)2047, (fSlow236 * fRec24[0])));
				iTempPerm437 = int(fTempPerm436);
				fTempPerm438 = floorf(fTempPerm436);
				fTempPerm439 = (fSlow219 * fTempPerm61);
				fTempPerm440 = max(fTempPerm439, 23.448949682462139f);
				fTempPerm441 = max(20.0f, fabsf(fTempPerm440));
				fVec190[0] = fTempPerm441;
				fTempPerm442 = (fRec88[1] + (fConst3 * fVec190[1]));
				fRec88[0] = (fTempPerm442 - floorf(fTempPerm442));
				fTempPerm443 = (2.0f * fRec88[0]);
				fTempPerm444 = (fTempPerm443 + -1.0f);
				fTempPerm445 = faustpower<2>(fTempPerm444);
				fVec191[0] = fTempPerm445;
				fTempPerm446 = ((fTempPerm53 * (fVec191[0] - fVec191[1])) / fVec190[0]);
				fVec192[IOTA&4095] = fTempPerm446;
				fTempPerm447 = max((float)0, min((float)2047, (fConst4 / fTempPerm440)));
				iTempPerm448 = int(fTempPerm447);
				fTempPerm449 = floorf(fTempPerm447);
				fRec87[0] = ((0.999f * fRec87[1]) + (fConst6 * ((fVec192[IOTA&4095] - (fVec192[(IOTA-iTempPerm448)&4095] * (fTempPerm449 + (1.0f - fTempPerm447)))) - ((fTempPerm447 - fTempPerm449) * fVec192[(IOTA-int((iTempPerm448 + 1)))&4095]))));
				fTempPerm450 = (fSlow219 * fTempPerm73);
				fTempPerm451 = max(fTempPerm450, 23.448949682462139f);
				fTempPerm452 = max(20.0f, fabsf(fTempPerm451));
				fVec193[0] = fTempPerm452;
				fTempPerm453 = (fRec90[1] + (fConst3 * fVec193[1]));
				fRec90[0] = (fTempPerm453 - floorf(fTempPerm453));
				fTempPerm454 = (2.0f * fRec90[0]);
				fTempPerm455 = (fTempPerm454 + -1.0f);
				fTempPerm456 = faustpower<2>(fTempPerm455);
				fVec194[0] = fTempPerm456;
				fTempPerm457 = ((fTempPerm53 * (fVec194[0] - fVec194[1])) / fVec193[0]);
				fVec195[IOTA&4095] = fTempPerm457;
				fTempPerm458 = max((float)0, min((float)2047, (fConst4 / fTempPerm451)));
				iTempPerm459 = int(fTempPerm458);
				fTempPerm460 = floorf(fTempPerm458);
				fRec89[0] = ((0.999f * fRec89[1]) + (fConst6 * ((fVec195[IOTA&4095] - (fVec195[(IOTA-iTempPerm459)&4095] * (fTempPerm460 + (1.0f - fTempPerm458)))) - ((fTempPerm458 - fTempPerm460) * fVec195[(IOTA-int((iTempPerm459 + 1)))&4095]))));
				fTempPerm461 = faustpower<3>(fTempPerm444);
				fVec196[0] = (fTempPerm461 + (1.0f - fTempPerm443));
				fTempPerm462 = ((fTempPerm461 + (1.0f - (fTempPerm443 + fVec196[1]))) / fVec190[0]);
				fVec197[0] = fTempPerm462;
				fTempPerm463 = ((fTempPerm32 * (fVec197[0] - fVec197[1])) / fVec190[0]);
				fVec198[IOTA&4095] = fTempPerm463;
				fTempPerm464 = max((float)0, min((float)2047, (fConst0 * (fRec24[0] / fTempPerm440))));
				iTempPerm465 = int(fTempPerm464);
				fTempPerm466 = floorf(fTempPerm464);
				fTempPerm467 = max(20.0f, fabsf(fTempPerm439));
				fVec199[0] = fTempPerm467;
				fTempPerm468 = (fRec91[1] + (fConst3 * fVec199[1]));
				fRec91[0] = (fTempPerm468 - floorf(fTempPerm468));
				fTempPerm469 = (2.0f * fRec91[0]);
				fTempPerm470 = faustpower<3>((fTempPerm469 + -1.0f));
				fVec200[0] = (fTempPerm470 + (1.0f - fTempPerm469));
				fTempPerm471 = ((fTempPerm470 + (1.0f - (fTempPerm469 + fVec200[1]))) / fVec199[0]);
				fVec201[0] = fTempPerm471;
				fTempPerm472 = faustpower<3>(fTempPerm455);
				fVec202[0] = (fTempPerm472 + (1.0f - fTempPerm454));
				fTempPerm473 = ((fTempPerm472 + (1.0f - (fTempPerm454 + fVec202[1]))) / fVec193[0]);
				fVec203[0] = fTempPerm473;
				fTempPerm474 = ((fTempPerm32 * (fVec203[0] - fVec203[1])) / fVec193[0]);
				fVec204[IOTA&4095] = fTempPerm474;
				fTempPerm475 = max((float)0, min((float)2047, (fConst0 * (fRec24[0] / fTempPerm451))));
				iTempPerm476 = int(fTempPerm475);
				fTempPerm477 = floorf(fTempPerm475);
				fTempPerm478 = max(20.0f, fabsf(fTempPerm450));
				fVec205[0] = fTempPerm478;
				fTempPerm479 = (fRec92[1] + (fConst3 * fVec205[1]));
				fRec92[0] = (fTempPerm479 - floorf(fTempPerm479));
				fTempPerm480 = (2.0f * fRec92[0]);
				fTempPerm481 = faustpower<3>((fTempPerm480 + -1.0f));
				fVec206[0] = (fTempPerm481 + (1.0f - fTempPerm480));
				fTempPerm482 = ((fTempPerm481 + (1.0f - (fTempPerm480 + fVec206[1]))) / fVec205[0]);
				fVec207[0] = fTempPerm482;
				fVec208[0] = fSlow239;
				fTempPerm483 = (fRec93[1] + (fConst3 * fVec208[1]));
				fRec93[0] = (fTempPerm483 - floorf(fTempPerm483));
				fTempPerm484 = (2.0f * fRec93[0]);
				fTempPerm485 = faustpower<3>((fTempPerm484 + -1.0f));
				fVec209[0] = (fTempPerm485 + (1.0f - fTempPerm484));
				fTempPerm486 = (fSlow240 * (fTempPerm485 + (1.0f - (fTempPerm484 + fVec209[1]))));
				fVec210[0] = fTempPerm486;
				fVec211[0] = fSlow243;
				fTempPerm487 = (fRec95[1] + (fConst3 * fVec211[1]));
				fRec95[0] = (fTempPerm487 - floorf(fTempPerm487));
				fTempPerm488 = (2.0f * fRec95[0]);
				fTempPerm489 = (fTempPerm488 + -1.0f);
				fTempPerm490 = faustpower<2>(fTempPerm489);
				fVec212[0] = fTempPerm490;
				fTempPerm491 = (fSlow244 * (fTempPerm53 * (fVec212[0] - fVec212[1])));
				fVec213[IOTA&4095] = fTempPerm491;
				fRec94[0] = (((0.999f * fRec94[1]) + fVec213[IOTA&4095]) - ((fSlow250 * fVec213[(IOTA-iSlow246)&4095]) + (fSlow249 * fVec213[(IOTA-iSlow247)&4095])));
				fTempPerm492 = faustpower<3>(fTempPerm489);
				fVec214[0] = (fTempPerm492 + (1.0f - fTempPerm488));
				fTempPerm493 = (fSlow252 * (fTempPerm492 + (1.0f - (fTempPerm488 + fVec214[1]))));
				fVec215[0] = fTempPerm493;
				fTempPerm494 = (fSlow253 * (fTempPerm32 * (fVec215[0] - fVec215[1])));
				fVec216[IOTA&4095] = fTempPerm494;
				fTempPerm495 = max((float)0, min((float)2047, (fSlow254 * fRec24[0])));
				iTempPerm496 = int(fTempPerm495);
				fTempPerm497 = floorf(fTempPerm495);
				fTempPerm498 = (fSlow34 * (fTempPerm47 * ((fTempPerm122 * (((fSlow54 * (fVec216[IOTA&4095] - ((fVec216[(IOTA-iTempPerm496)&4095] * (fTempPerm497 + (1.0f - fTempPerm495))) + ((fTempPerm495 - fTempPerm497) * fVec216[(IOTA-int((iTempPerm496 + 1)))&4095])))) + (fSlow251 * (fRec23[0] * fRec94[0]))) + (fSlow241 * (fTempPerm48 * (fVec210[0] - fVec210[1]))))) + (((fConst9 * ((((fTempPerm48 * (fVec207[0] - fVec207[1])) / fVec205[0]) + (fSlow54 * ((fVec204[IOTA&4095] - (fVec204[(IOTA-iTempPerm476)&4095] * (fTempPerm477 + (1.0f - fTempPerm475)))) - ((fTempPerm475 - fTempPerm477) * fVec204[(IOTA-int((iTempPerm476 + 1)))&4095])))) + (((fTempPerm48 * (fVec201[0] - fVec201[1])) / fVec199[0]) + (fSlow54 * ((fVec198[IOTA&4095] - (fVec198[(IOTA-iTempPerm465)&4095] * (fTempPerm466 + (1.0f - fTempPerm464)))) - ((fTempPerm464 - fTempPerm466) * fVec198[(IOTA-int((iTempPerm465 + 1)))&4095])))))) + (fSlow237 * (fRec23[0] * ((fRec89[0] * fTempPerm73) + (fRec87[0] * fTempPerm61))))) + (fRec25[0] * (((fSlow54 * (fVec189[IOTA&4095] - ((fVec189[(IOTA-iTempPerm437)&4095] * (fTempPerm438 + (1.0f - fTempPerm436))) + ((fTempPerm436 - fTempPerm438) * fVec189[(IOTA-int((iTempPerm437 + 1)))&4095])))) + (fSlow233 * (fRec23[0] * fRec85[0]))) + (fSlow223 * (fTempPerm48 * (fVec183[0] - fVec183[1])))))))));
			}
			fTempPerm499 = (((((fTempPerm498 + fTempPerm423) + fTempPerm348) + fTempPerm273) + fTempPerm198) + fTempPerm123);
			fTempPerm500 = ((fTempPerm499 * fTempPerm24) - (fTempPerm19 * fRec4[1]));
			fRec6[0] = ((fTempPerm500 * fTempPerm23) - (fTempPerm17 * fRec6[1]));
			fRec4[0] = ((fTempPerm500 * fTempPerm17) + (fRec6[1] * fTempPerm23));
			float 	fRec5 = fRec6[0];
			fTempPerm501 = ((((fTempPerm499 * fTempPerm19) + (fRec4[1] * fTempPerm24)) + (2.0f * ((fRec4[0] * fTempPerm22) / fTempPerm21))) + ((fRec5 * ((1.0f - fTempPerm15) - (2.0f * (fTempPerm17 * fTempPerm22)))) / (fTempPerm21 * sqrtf(fTempPerm18))));
			fTempPerm502 = (((fTempPerm501 * fTempPerm14) / fTempPerm13) - (fTempPerm8 * fRec1[1]));
			fRec3[0] = ((fTempPerm502 * fTempPerm12) - (fTempPerm6 * fRec3[1]));
			fRec1[0] = ((fTempPerm502 * fTempPerm6) + (fRec3[1] * fTempPerm12));
			float 	fRec2 = fRec3[0];
			output0[i] = (FAUSTFLOAT)((((((fTempPerm501 * fTempPerm8) / fTempPerm13) + (fRec1[1] * fTempPerm14)) + (2.0f * ((fRec1[0] * fTempPerm11) / fTempPerm10))) + ((fRec2 * ((1.0f - fTempPerm3) - (2.0f * (fTempPerm6 * fTempPerm11)))) / (fTempPerm10 * sqrtf(fTempPerm7)))) / fTempPerm2);
			// post processing
			fRec1[1] = fRec1[0];
			fRec3[1] = fRec3[0];
			fRec4[1] = fRec4[0];
			fRec6[1] = fRec6[0];
			if ((float(((fSlow34 * fTempPerm47) > 0.001f)) != 0.0f)) {
				fVec215[1] = fVec215[0];
				fVec214[1] = fVec214[0];
				fRec94[1] = fRec94[0];
				fVec212[1] = fVec212[0];
				fRec95[1] = fRec95[0];
				fVec211[1] = fVec211[0];
				fVec210[1] = fVec210[0];
				fVec209[1] = fVec209[0];
				fRec93[1] = fRec93[0];
				fVec208[1] = fVec208[0];
				fVec207[1] = fVec207[0];
				fVec206[1] = fVec206[0];
				fRec92[1] = fRec92[0];
				fVec205[1] = fVec205[0];
				fVec203[1] = fVec203[0];
				fVec202[1] = fVec202[0];
				fVec201[1] = fVec201[0];
				fVec200[1] = fVec200[0];
				fRec91[1] = fRec91[0];
				fVec199[1] = fVec199[0];
				fVec197[1] = fVec197[0];
				fVec196[1] = fVec196[0];
				fRec89[1] = fRec89[0];
				fVec194[1] = fVec194[0];
				fRec90[1] = fRec90[0];
				fVec193[1] = fVec193[0];
				fRec87[1] = fRec87[0];
				fVec191[1] = fVec191[0];
				fRec88[1] = fRec88[0];
				fVec190[1] = fVec190[0];
				fVec188[1] = fVec188[0];
				fVec187[1] = fVec187[0];
				fRec85[1] = fRec85[0];
				fVec185[1] = fVec185[0];
				fRec86[1] = fRec86[0];
				fVec184[1] = fVec184[0];
				fVec183[1] = fVec183[0];
				fVec182[1] = fVec182[0];
				fRec84[1] = fRec84[0];
				fVec181[1] = fVec181[0];
			}
			if ((float(((fSlow30 * fTempPerm44) > 0.001f)) != 0.0f)) {
				fVec179[1] = fVec179[0];
				fVec178[1] = fVec178[0];
				fRec82[1] = fRec82[0];
				fVec176[1] = fVec176[0];
				fRec83[1] = fRec83[0];
				fVec175[1] = fVec175[0];
				fVec174[1] = fVec174[0];
				fVec173[1] = fVec173[0];
				fRec81[1] = fRec81[0];
				fVec172[1] = fVec172[0];
				fVec171[1] = fVec171[0];
				fVec170[1] = fVec170[0];
				fRec80[1] = fRec80[0];
				fVec169[1] = fVec169[0];
				fVec167[1] = fVec167[0];
				fVec166[1] = fVec166[0];
				fVec165[1] = fVec165[0];
				fVec164[1] = fVec164[0];
				fRec79[1] = fRec79[0];
				fVec163[1] = fVec163[0];
				fVec161[1] = fVec161[0];
				fVec160[1] = fVec160[0];
				fRec77[1] = fRec77[0];
				fVec158[1] = fVec158[0];
				fRec78[1] = fRec78[0];
				fVec157[1] = fVec157[0];
				fRec75[1] = fRec75[0];
				fVec155[1] = fVec155[0];
				fRec76[1] = fRec76[0];
				fVec154[1] = fVec154[0];
				fVec152[1] = fVec152[0];
				fVec151[1] = fVec151[0];
				fRec73[1] = fRec73[0];
				fVec149[1] = fVec149[0];
				fRec74[1] = fRec74[0];
				fVec148[1] = fVec148[0];
				fVec147[1] = fVec147[0];
				fVec146[1] = fVec146[0];
				fRec72[1] = fRec72[0];
				fVec145[1] = fVec145[0];
			}
			if ((float(((fSlow26 * fTempPerm41) > 0.001f)) != 0.0f)) {
				fVec143[1] = fVec143[0];
				fVec142[1] = fVec142[0];
				fRec70[1] = fRec70[0];
				fVec140[1] = fVec140[0];
				fRec71[1] = fRec71[0];
				fVec139[1] = fVec139[0];
				fVec138[1] = fVec138[0];
				fVec137[1] = fVec137[0];
				fRec69[1] = fRec69[0];
				fVec136[1] = fVec136[0];
				fVec135[1] = fVec135[0];
				fVec134[1] = fVec134[0];
				fRec68[1] = fRec68[0];
				fVec133[1] = fVec133[0];
				fVec131[1] = fVec131[0];
				fVec130[1] = fVec130[0];
				fVec129[1] = fVec129[0];
				fVec128[1] = fVec128[0];
				fRec67[1] = fRec67[0];
				fVec127[1] = fVec127[0];
				fVec125[1] = fVec125[0];
				fVec124[1] = fVec124[0];
				fRec65[1] = fRec65[0];
				fVec122[1] = fVec122[0];
				fRec66[1] = fRec66[0];
				fVec121[1] = fVec121[0];
				fRec63[1] = fRec63[0];
				fVec119[1] = fVec119[0];
				fRec64[1] = fRec64[0];
				fVec118[1] = fVec118[0];
				fVec116[1] = fVec116[0];
				fVec115[1] = fVec115[0];
				fRec61[1] = fRec61[0];
				fVec113[1] = fVec113[0];
				fRec62[1] = fRec62[0];
				fVec112[1] = fVec112[0];
				fVec111[1] = fVec111[0];
				fVec110[1] = fVec110[0];
				fRec60[1] = fRec60[0];
				fVec109[1] = fVec109[0];
			}
			if ((float(((fSlow22 * fTempPerm38) > 0.001f)) != 0.0f)) {
				fVec107[1] = fVec107[0];
				fVec106[1] = fVec106[0];
				fRec58[1] = fRec58[0];
				fVec104[1] = fVec104[0];
				fRec59[1] = fRec59[0];
				fVec103[1] = fVec103[0];
				fVec102[1] = fVec102[0];
				fVec101[1] = fVec101[0];
				fRec57[1] = fRec57[0];
				fVec100[1] = fVec100[0];
				fVec99[1] = fVec99[0];
				fVec98[1] = fVec98[0];
				fRec56[1] = fRec56[0];
				fVec97[1] = fVec97[0];
				fVec95[1] = fVec95[0];
				fVec94[1] = fVec94[0];
				fVec93[1] = fVec93[0];
				fVec92[1] = fVec92[0];
				fRec55[1] = fRec55[0];
				fVec91[1] = fVec91[0];
				fVec89[1] = fVec89[0];
				fVec88[1] = fVec88[0];
				fRec53[1] = fRec53[0];
				fVec86[1] = fVec86[0];
				fRec54[1] = fRec54[0];
				fVec85[1] = fVec85[0];
				fRec51[1] = fRec51[0];
				fVec83[1] = fVec83[0];
				fRec52[1] = fRec52[0];
				fVec82[1] = fVec82[0];
				fVec80[1] = fVec80[0];
				fVec79[1] = fVec79[0];
				fRec49[1] = fRec49[0];
				fVec77[1] = fVec77[0];
				fRec50[1] = fRec50[0];
				fVec76[1] = fVec76[0];
				fVec75[1] = fVec75[0];
				fVec74[1] = fVec74[0];
				fRec48[1] = fRec48[0];
				fVec73[1] = fVec73[0];
			}
			if ((float(((fSlow18 * fTempPerm35) > 0.001f)) != 0.0f)) {
				fVec71[1] = fVec71[0];
				fVec70[1] = fVec70[0];
				fRec46[1] = fRec46[0];
				fVec68[1] = fVec68[0];
				fRec47[1] = fRec47[0];
				fVec67[1] = fVec67[0];
				fVec66[1] = fVec66[0];
				fVec65[1] = fVec65[0];
				fRec45[1] = fRec45[0];
				fVec64[1] = fVec64[0];
				fVec63[1] = fVec63[0];
				fVec62[1] = fVec62[0];
				fRec44[1] = fRec44[0];
				fVec61[1] = fVec61[0];
				fVec59[1] = fVec59[0];
				fVec58[1] = fVec58[0];
				fVec57[1] = fVec57[0];
				fVec56[1] = fVec56[0];
				fRec43[1] = fRec43[0];
				fVec55[1] = fVec55[0];
				fVec53[1] = fVec53[0];
				fVec52[1] = fVec52[0];
				fRec41[1] = fRec41[0];
				fVec50[1] = fVec50[0];
				fRec42[1] = fRec42[0];
				fVec49[1] = fVec49[0];
				fRec39[1] = fRec39[0];
				fVec47[1] = fVec47[0];
				fRec40[1] = fRec40[0];
				fVec46[1] = fVec46[0];
				fVec44[1] = fVec44[0];
				fVec43[1] = fVec43[0];
				fRec37[1] = fRec37[0];
				fVec41[1] = fVec41[0];
				fRec38[1] = fRec38[0];
				fVec40[1] = fVec40[0];
				fVec39[1] = fVec39[0];
				fVec38[1] = fVec38[0];
				fRec36[1] = fRec36[0];
				fVec37[1] = fVec37[0];
			}
			if ((float(((fSlow10 * fTempPerm27) > 0.001f)) != 0.0f)) {
				fVec35[1] = fVec35[0];
				fVec34[1] = fVec34[0];
				fRec34[1] = fRec34[0];
				fVec32[1] = fVec32[0];
				fRec35[1] = fRec35[0];
				fVec31[1] = fVec31[0];
				fVec30[1] = fVec30[0];
				fVec29[1] = fVec29[0];
				fRec33[1] = fRec33[0];
				fVec28[1] = fVec28[0];
				fVec27[1] = fVec27[0];
				fVec26[1] = fVec26[0];
				fRec32[1] = fRec32[0];
				fVec25[1] = fVec25[0];
				fVec23[1] = fVec23[0];
				fVec22[1] = fVec22[0];
				fVec21[1] = fVec21[0];
				fVec20[1] = fVec20[0];
				fRec31[1] = fRec31[0];
				fVec19[1] = fVec19[0];
				fVec17[1] = fVec17[0];
				fVec16[1] = fVec16[0];
				fRec29[1] = fRec29[0];
				fVec14[1] = fVec14[0];
				fRec30[1] = fRec30[0];
				fVec13[1] = fVec13[0];
				fRec27[1] = fRec27[0];
				fVec11[1] = fVec11[0];
				fRec28[1] = fRec28[0];
				fVec10[1] = fVec10[0];
			}
			if ((float(((fSlow34 * fTempPerm47) > 0.001f)) != 0.0f) || (float(((fSlow30 * fTempPerm44) > 0.001f)) != 0.0f) || (float(((fSlow26 * fTempPerm41) > 0.001f)) != 0.0f) || (float(((fSlow22 * fTempPerm38) > 0.001f)) != 0.0f) || (float(((fSlow18 * fTempPerm35) > 0.001f)) != 0.0f) || (float(((fSlow10 * fTempPerm27) > 0.001f)) != 0.0f)) {
				fRec26[1] = fRec26[0];
				fRec25[1] = fRec25[0];
				fRec24[1] = fRec24[0];
			}
			if ((float(((fSlow10 * fTempPerm27) > 0.001f)) != 0.0f)) {
				fVec8[1] = fVec8[0];
				fVec7[1] = fVec7[0];
			}
			if ((float(((fSlow34 * fTempPerm47) > 0.001f)) != 0.0f) || (float(((fSlow30 * fTempPerm44) > 0.001f)) != 0.0f) || (float(((fSlow26 * fTempPerm41) > 0.001f)) != 0.0f) || (float(((fSlow22 * fTempPerm38) > 0.001f)) != 0.0f) || (float(((fSlow18 * fTempPerm35) > 0.001f)) != 0.0f) || (float(((fSlow10 * fTempPerm27) > 0.001f)) != 0.0f)) {
				fRec23[1] = fRec23[0];
			}
			if ((float(((fSlow10 * fTempPerm27) > 0.001f)) != 0.0f)) {
				fRec21[1] = fRec21[0];
			}
			IOTA = IOTA+1;
			if ((float(((fSlow10 * fTempPerm27) > 0.001f)) != 0.0f)) {
				fVec5[1] = fVec5[0];
				fRec22[1] = fRec22[0];
				fVec4[1] = fVec4[0];
			}
			if ((float(((fSlow34 * fTempPerm47) > 0.001f)) != 0.0f) || (float(((fSlow30 * fTempPerm44) > 0.001f)) != 0.0f) || (float(((fSlow26 * fTempPerm41) > 0.001f)) != 0.0f) || (float(((fSlow22 * fTempPerm38) > 0.001f)) != 0.0f) || (float(((fSlow18 * fTempPerm35) > 0.001f)) != 0.0f) || (float(((fSlow10 * fTempPerm27) > 0.001f)) != 0.0f)) {
				fRec20[1] = fRec20[0];
			}
			fRec18[1] = fRec18[0];
			iRec19[1] = iRec19[0];
			fRec16[1] = fRec16[0];
			iRec17[1] = iRec17[0];
			fRec14[1] = fRec14[0];
			iRec15[1] = iRec15[0];
			fRec12[1] = fRec12[0];
			iRec13[1] = iRec13[0];
			fRec10[1] = fRec10[0];
			iRec11[1] = iRec11[0];
			if ((float(((fSlow10 * fTempPerm27) > 0.001f)) != 0.0f)) {
				fVec3[1] = fVec3[0];
				fVec2[1] = fVec2[0];
				fRec9[1] = fRec9[0];
				fVec1[1] = fVec1[0];
			}
			fRec7[1] = fRec7[0];
			iRec8[1] = iRec8[0];
			fRec0[1] = fRec0[0];
			iVec0[2] = iVec0[1]; iVec0[1] = iVec0[0];
		}
	}
};


