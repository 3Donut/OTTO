//----------------------------------------------------------
// name: "nuke"
//
// Code generated with Faust 2.13.11 (https://faust.grame.fr)
//----------------------------------------------------------

/* link with  */
#include <math.h>
#ifndef FAUSTPOWER
#define FAUSTPOWER
#include <cmath>
template <int N> inline int faustpower(int x)              { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <> 	 inline int faustpower<0>(int x)            { return 1; }
template <> 	 inline int faustpower<1>(int x)            { return x; }
template <> 	 inline int faustpower<2>(int x)            { return x*x; }
template <int N> inline float faustpower(float x)            { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <> 	 inline float faustpower<0>(float x)          { return 1; }
template <> 	 inline float faustpower<1>(float x)          { return x; }
template <> 	 inline float faustpower<2>(float x)          { return x*x; }
#endif
#include <math.h>
#include <algorithm>

#include <faust/gui/UI.h>
#include <faust/gui/meta.h>
#include <faust/dsp/dsp.h>

using std::max;
using std::min;

/********************************
	VECTOR INTRINSICS
*********************************/


/********************************
	ABSTRACT USER INTERFACE
*********************************/

#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS faust_nuke
#endif

class faust_nuke : public dsp {
  private:
	FAUSTFLOAT 	fslider0;
	FAUSTFLOAT 	fslider1;
	FAUSTFLOAT 	fslider2;
	float 	fConst0;
	int 	iVec0[2];
	FAUSTFLOAT 	fbutton0;
	int 	iRec1[2];
	int 	iTempPerm0;
	float 	fConst1;
	float 	fTempPerm1;
	FAUSTFLOAT 	fslider3;
	float 	fRec0[2];
	float 	fTempPerm2;
	FAUSTFLOAT 	fslider4;
	FAUSTFLOAT 	fbutton1;
	int 	iRec4[2];
	int 	iTempPerm3;
	float 	fTempPerm4;
	float 	fRec3[2];
	float 	fTempPerm5;
	FAUSTFLOAT 	fslider5;
	FAUSTFLOAT 	fbutton2;
	int 	iRec6[2];
	int 	iTempPerm6;
	float 	fTempPerm7;
	float 	fRec5[2];
	float 	fTempPerm8;
	FAUSTFLOAT 	fslider6;
	FAUSTFLOAT 	fbutton3;
	int 	iRec8[2];
	int 	iTempPerm9;
	float 	fTempPerm10;
	float 	fRec7[2];
	float 	fTempPerm11;
	FAUSTFLOAT 	fslider7;
	FAUSTFLOAT 	fbutton4;
	int 	iRec10[2];
	int 	iTempPerm12;
	float 	fTempPerm13;
	float 	fRec9[2];
	float 	fTempPerm14;
	FAUSTFLOAT 	fslider8;
	FAUSTFLOAT 	fbutton5;
	int 	iRec12[2];
	int 	iTempPerm15;
	float 	fTempPerm16;
	float 	fRec11[2];
	float 	fTempPerm17;
	FAUSTFLOAT 	fslider9;
	FAUSTFLOAT 	fslider10;
	float 	fRec2[2];
	float 	fConst2;
	float 	fTempPerm18;
	float 	fTempPerm19;
	float 	fTempPerm20;
	float 	fTempPerm21;
	float 	fTempPerm22;
	FAUSTFLOAT 	fslider11;
	float 	fRec15[2];
	float 	fTempPerm23;
	float 	fTempPerm24;
	float 	fVec1[2];
	FAUSTFLOAT 	fslider12;
	float 	fConst3;
	int 	iRec17[2];
	float 	fTempPerm25;
	float 	fRec16[2];
	float 	fTempPerm26;
	float 	fVec2[2];
	float 	fTempPerm27;
	float 	fTempPerm28;
	float 	fTempPerm29;
	float 	fVec3[2];
	float 	fTempPerm30;
	float 	fRec19[2];
	float 	fTempPerm31;
	float 	fVec4[2];
	float 	fTempPerm32;
	float 	fConst4;
	float 	fTempPerm33;
	int 	IOTA;
	float 	fVec5[4096];
	float 	fConst5;
	float 	fRec18[2];
	float 	fConst6;
	float 	fTempPerm34;
	float 	fTempPerm35;
	int 	iTempPerm36;
	float 	fTempPerm37;
	FAUSTFLOAT 	fslider13;
	float 	fRec20[2];
	float 	fTempPerm38;
	FAUSTFLOAT 	fslider14;
	float 	fRec21[2];
	int 	iTempPerm39;
	float 	fTempPerm40;
	float 	fTempPerm41;
	float 	fTempPerm42;
	float 	fTempPerm43;
	float 	fTempPerm44;
	float 	fVec6[2];
	float 	fTempPerm45;
	float 	fRec22[2];
	float 	fTempPerm46;
	float 	fVec7[2];
	float 	fTempPerm47;
	float 	fVec8[4096];
	float 	fTempPerm48;
	int 	iTempPerm49;
	float 	fTempPerm50;
	float 	fTempPerm51;
	float 	fTempPerm52;
	int 	iRec24[2];
	float 	fTempPerm53;
	float 	fRec23[2];
	float 	fTempPerm54;
	float 	fVec9[2];
	float 	fTempPerm55;
	float 	fTempPerm56;
	int 	iTempPerm57;
	float 	fTempPerm58;
	float 	fRec25[2];
	float 	fTempPerm59;
	float 	fTempPerm60;
	float 	fTempPerm61;
	float 	fTempPerm62;
	float 	fTempPerm63;
	float 	fVec10[2];
	float 	fTempPerm64;
	float 	fRec26[2];
	float 	fTempPerm65;
	float 	fVec11[2];
	float 	fTempPerm66;
	float 	fVec12[4096];
	float 	fTempPerm67;
	int 	iTempPerm68;
	float 	fTempPerm69;
	float 	fTempPerm70;
	int 	iRec28[2];
	float 	fTempPerm71;
	float 	fRec27[2];
	float 	fTempPerm72;
	float 	fVec13[2];
	float 	fTempPerm73;
	float 	fTempPerm74;
	int 	iTempPerm75;
	float 	fTempPerm76;
	float 	fRec29[2];
	float 	fTempPerm77;
	float 	fTempPerm78;
	float 	fTempPerm79;
	float 	fTempPerm80;
	float 	fConst7;
	int 	iRec31[2];
	float 	fTempPerm81;
	float 	fRec30[2];
	float 	fTempPerm82;
	float 	fVec14[2];
	float 	fVec15[2];
	float 	fTempPerm83;
	float 	fRec33[2];
	float 	fTempPerm84;
	float 	fVec16[2];
	float 	fTempPerm85;
	float 	fVec17[4096];
	float 	fRec32[2];
	float 	fConst8;
	float 	fTempPerm86;
	int 	iTempPerm87;
	float 	fTempPerm88;
	float 	fRec14[3];
	float 	fRec13[3];
	float 	fTempPerm89;
	FAUSTFLOAT 	fslider15;
	int 	iRec37[2];
	float 	fTempPerm90;
	float 	fRec36[2];
	float 	fTempPerm91;
	float 	fVec18[2];
	float 	fVec19[2];
	float 	fTempPerm92;
	float 	fRec39[2];
	float 	fTempPerm93;
	float 	fVec20[2];
	float 	fTempPerm94;
	float 	fVec21[4096];
	float 	fRec38[2];
	float 	fTempPerm95;
	int 	iTempPerm96;
	float 	fTempPerm97;
	float 	fTempPerm98;
	float 	fTempPerm99;
	float 	fVec22[2];
	float 	fTempPerm100;
	float 	fRec40[2];
	float 	fTempPerm101;
	float 	fVec23[2];
	float 	fTempPerm102;
	float 	fVec24[4096];
	float 	fTempPerm103;
	int 	iTempPerm104;
	float 	fTempPerm105;
	int 	iRec42[2];
	float 	fTempPerm106;
	float 	fRec41[2];
	float 	fTempPerm107;
	float 	fVec25[2];
	float 	fTempPerm108;
	float 	fTempPerm109;
	int 	iTempPerm110;
	float 	fTempPerm111;
	float 	fRec43[2];
	float 	fTempPerm112;
	float 	fTempPerm113;
	float 	fTempPerm114;
	float 	fVec26[2];
	float 	fTempPerm115;
	float 	fRec44[2];
	float 	fTempPerm116;
	float 	fVec27[2];
	float 	fTempPerm117;
	float 	fVec28[4096];
	float 	fTempPerm118;
	int 	iTempPerm119;
	float 	fTempPerm120;
	int 	iRec46[2];
	float 	fTempPerm121;
	float 	fRec45[2];
	float 	fTempPerm122;
	float 	fVec29[2];
	float 	fTempPerm123;
	float 	fTempPerm124;
	int 	iTempPerm125;
	float 	fTempPerm126;
	float 	fRec47[2];
	float 	fTempPerm127;
	int 	iRec49[2];
	float 	fTempPerm128;
	float 	fRec48[2];
	float 	fTempPerm129;
	float 	fVec30[2];
	float 	fVec31[2];
	float 	fTempPerm130;
	float 	fRec51[2];
	float 	fTempPerm131;
	float 	fVec32[2];
	float 	fTempPerm132;
	float 	fVec33[4096];
	float 	fRec50[2];
	float 	fTempPerm133;
	int 	iTempPerm134;
	float 	fTempPerm135;
	float 	fRec35[3];
	float 	fRec34[3];
	float 	fTempPerm136;
	FAUSTFLOAT 	fslider16;
	int 	iRec55[2];
	float 	fTempPerm137;
	float 	fRec54[2];
	float 	fTempPerm138;
	float 	fVec34[2];
	float 	fVec35[2];
	float 	fTempPerm139;
	float 	fRec57[2];
	float 	fTempPerm140;
	float 	fVec36[2];
	float 	fTempPerm141;
	float 	fVec37[4096];
	float 	fRec56[2];
	float 	fTempPerm142;
	int 	iTempPerm143;
	float 	fTempPerm144;
	float 	fTempPerm145;
	float 	fTempPerm146;
	float 	fVec38[2];
	float 	fTempPerm147;
	float 	fRec58[2];
	float 	fTempPerm148;
	float 	fVec39[2];
	float 	fTempPerm149;
	float 	fVec40[4096];
	float 	fTempPerm150;
	int 	iTempPerm151;
	float 	fTempPerm152;
	int 	iRec60[2];
	float 	fTempPerm153;
	float 	fRec59[2];
	float 	fTempPerm154;
	float 	fVec41[2];
	float 	fTempPerm155;
	float 	fTempPerm156;
	int 	iTempPerm157;
	float 	fTempPerm158;
	float 	fRec61[2];
	float 	fTempPerm159;
	float 	fTempPerm160;
	float 	fTempPerm161;
	float 	fVec42[2];
	float 	fTempPerm162;
	float 	fRec62[2];
	float 	fTempPerm163;
	float 	fVec43[2];
	float 	fTempPerm164;
	float 	fVec44[4096];
	float 	fTempPerm165;
	int 	iTempPerm166;
	float 	fTempPerm167;
	int 	iRec64[2];
	float 	fTempPerm168;
	float 	fRec63[2];
	float 	fTempPerm169;
	float 	fVec45[2];
	float 	fTempPerm170;
	float 	fTempPerm171;
	int 	iTempPerm172;
	float 	fTempPerm173;
	float 	fRec65[2];
	float 	fTempPerm174;
	int 	iRec67[2];
	float 	fTempPerm175;
	float 	fRec66[2];
	float 	fTempPerm176;
	float 	fVec46[2];
	float 	fVec47[2];
	float 	fTempPerm177;
	float 	fRec69[2];
	float 	fTempPerm178;
	float 	fVec48[2];
	float 	fTempPerm179;
	float 	fVec49[4096];
	float 	fRec68[2];
	float 	fTempPerm180;
	int 	iTempPerm181;
	float 	fTempPerm182;
	float 	fRec53[3];
	float 	fRec52[3];
	float 	fTempPerm183;
	FAUSTFLOAT 	fslider17;
	int 	iRec73[2];
	float 	fTempPerm184;
	float 	fRec72[2];
	float 	fTempPerm185;
	float 	fVec50[2];
	float 	fVec51[2];
	float 	fTempPerm186;
	float 	fRec75[2];
	float 	fTempPerm187;
	float 	fVec52[2];
	float 	fTempPerm188;
	float 	fVec53[4096];
	float 	fRec74[2];
	float 	fTempPerm189;
	int 	iTempPerm190;
	float 	fTempPerm191;
	float 	fTempPerm192;
	float 	fTempPerm193;
	float 	fVec54[2];
	float 	fTempPerm194;
	float 	fRec76[2];
	float 	fTempPerm195;
	float 	fVec55[2];
	float 	fTempPerm196;
	float 	fVec56[4096];
	float 	fTempPerm197;
	int 	iTempPerm198;
	float 	fTempPerm199;
	int 	iRec78[2];
	float 	fTempPerm200;
	float 	fRec77[2];
	float 	fTempPerm201;
	float 	fVec57[2];
	float 	fTempPerm202;
	float 	fTempPerm203;
	int 	iTempPerm204;
	float 	fTempPerm205;
	float 	fRec79[2];
	float 	fTempPerm206;
	float 	fTempPerm207;
	float 	fTempPerm208;
	float 	fVec58[2];
	float 	fTempPerm209;
	float 	fRec80[2];
	float 	fTempPerm210;
	float 	fVec59[2];
	float 	fTempPerm211;
	float 	fVec60[4096];
	float 	fTempPerm212;
	int 	iTempPerm213;
	float 	fTempPerm214;
	int 	iRec82[2];
	float 	fTempPerm215;
	float 	fRec81[2];
	float 	fTempPerm216;
	float 	fVec61[2];
	float 	fTempPerm217;
	float 	fTempPerm218;
	int 	iTempPerm219;
	float 	fTempPerm220;
	float 	fRec83[2];
	float 	fTempPerm221;
	int 	iRec85[2];
	float 	fTempPerm222;
	float 	fRec84[2];
	float 	fTempPerm223;
	float 	fVec62[2];
	float 	fVec63[2];
	float 	fTempPerm224;
	float 	fRec87[2];
	float 	fTempPerm225;
	float 	fVec64[2];
	float 	fTempPerm226;
	float 	fVec65[4096];
	float 	fRec86[2];
	float 	fTempPerm227;
	int 	iTempPerm228;
	float 	fTempPerm229;
	float 	fRec71[3];
	float 	fRec70[3];
	float 	fTempPerm230;
	FAUSTFLOAT 	fslider18;
	int 	iRec91[2];
	float 	fTempPerm231;
	float 	fRec90[2];
	float 	fTempPerm232;
	float 	fVec66[2];
	float 	fVec67[2];
	float 	fTempPerm233;
	float 	fRec93[2];
	float 	fTempPerm234;
	float 	fVec68[2];
	float 	fTempPerm235;
	float 	fVec69[4096];
	float 	fRec92[2];
	float 	fTempPerm236;
	int 	iTempPerm237;
	float 	fTempPerm238;
	float 	fTempPerm239;
	float 	fTempPerm240;
	float 	fVec70[2];
	float 	fTempPerm241;
	float 	fRec94[2];
	float 	fTempPerm242;
	float 	fVec71[2];
	float 	fTempPerm243;
	float 	fVec72[4096];
	float 	fTempPerm244;
	int 	iTempPerm245;
	float 	fTempPerm246;
	int 	iRec96[2];
	float 	fTempPerm247;
	float 	fRec95[2];
	float 	fTempPerm248;
	float 	fVec73[2];
	float 	fTempPerm249;
	float 	fTempPerm250;
	int 	iTempPerm251;
	float 	fTempPerm252;
	float 	fRec97[2];
	float 	fTempPerm253;
	float 	fTempPerm254;
	float 	fTempPerm255;
	float 	fVec74[2];
	float 	fTempPerm256;
	float 	fRec98[2];
	float 	fTempPerm257;
	float 	fVec75[2];
	float 	fTempPerm258;
	float 	fVec76[4096];
	float 	fTempPerm259;
	int 	iTempPerm260;
	float 	fTempPerm261;
	int 	iRec100[2];
	float 	fTempPerm262;
	float 	fRec99[2];
	float 	fTempPerm263;
	float 	fVec77[2];
	float 	fTempPerm264;
	float 	fTempPerm265;
	int 	iTempPerm266;
	float 	fTempPerm267;
	float 	fRec101[2];
	float 	fTempPerm268;
	int 	iRec103[2];
	float 	fTempPerm269;
	float 	fRec102[2];
	float 	fTempPerm270;
	float 	fVec78[2];
	float 	fVec79[2];
	float 	fTempPerm271;
	float 	fRec105[2];
	float 	fTempPerm272;
	float 	fVec80[2];
	float 	fTempPerm273;
	float 	fVec81[4096];
	float 	fRec104[2];
	float 	fTempPerm274;
	int 	iTempPerm275;
	float 	fTempPerm276;
	float 	fRec89[3];
	float 	fRec88[3];
	float 	fTempPerm277;
	FAUSTFLOAT 	fslider19;
	int 	iRec109[2];
	float 	fTempPerm278;
	float 	fRec108[2];
	float 	fTempPerm279;
	float 	fVec82[2];
	float 	fVec83[2];
	float 	fTempPerm280;
	float 	fRec111[2];
	float 	fTempPerm281;
	float 	fVec84[2];
	float 	fTempPerm282;
	float 	fVec85[4096];
	float 	fRec110[2];
	float 	fTempPerm283;
	int 	iTempPerm284;
	float 	fTempPerm285;
	float 	fTempPerm286;
	float 	fTempPerm287;
	float 	fVec86[2];
	float 	fTempPerm288;
	float 	fRec112[2];
	float 	fTempPerm289;
	float 	fVec87[2];
	float 	fTempPerm290;
	float 	fVec88[4096];
	float 	fTempPerm291;
	int 	iTempPerm292;
	float 	fTempPerm293;
	int 	iRec114[2];
	float 	fTempPerm294;
	float 	fRec113[2];
	float 	fTempPerm295;
	float 	fVec89[2];
	float 	fTempPerm296;
	float 	fTempPerm297;
	int 	iTempPerm298;
	float 	fTempPerm299;
	float 	fRec115[2];
	float 	fTempPerm300;
	float 	fTempPerm301;
	float 	fTempPerm302;
	float 	fVec90[2];
	float 	fTempPerm303;
	float 	fRec116[2];
	float 	fTempPerm304;
	float 	fVec91[2];
	float 	fTempPerm305;
	float 	fVec92[4096];
	float 	fTempPerm306;
	int 	iTempPerm307;
	float 	fTempPerm308;
	int 	iRec118[2];
	float 	fTempPerm309;
	float 	fRec117[2];
	float 	fTempPerm310;
	float 	fVec93[2];
	float 	fTempPerm311;
	float 	fTempPerm312;
	int 	iTempPerm313;
	float 	fTempPerm314;
	float 	fRec119[2];
	float 	fTempPerm315;
	int 	iRec121[2];
	float 	fTempPerm316;
	float 	fRec120[2];
	float 	fTempPerm317;
	float 	fVec94[2];
	float 	fVec95[2];
	float 	fTempPerm318;
	float 	fRec123[2];
	float 	fTempPerm319;
	float 	fVec96[2];
	float 	fTempPerm320;
	float 	fVec97[4096];
	float 	fRec122[2];
	float 	fTempPerm321;
	int 	iTempPerm322;
	float 	fTempPerm323;
	float 	fRec107[3];
	float 	fRec106[3];
	float 	fTempPerm324;
	int fSamplingFreq;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("basics.lib/name", "Faust Basic Element Library");
		m->declare("basics.lib/version", "0.0");
		m->declare("filename", "nuke");
		m->declare("filters.lib/name", "Faust Filters Library");
		m->declare("filters.lib/version", "0.0");
		m->declare("maths.lib/author", "GRAME");
		m->declare("maths.lib/copyright", "GRAME");
		m->declare("maths.lib/license", "LGPL with exception");
		m->declare("maths.lib/name", "Faust Math Library");
		m->declare("maths.lib/version", "2.1");
		m->declare("name", "nuke");
		m->declare("oscillators.lib/name", "Faust Oscillator Library");
		m->declare("oscillators.lib/version", "0.0");
		m->declare("signals.lib/name", "Faust Signal Routing Library");
		m->declare("signals.lib/version", "0.0");
	}

	virtual int getNumInputs() { return 0; }
	virtual int getNumOutputs() { return 1; }
	static void classInit(int samplingFreq) {
	}
	virtual void instanceConstants(int samplingFreq) {
		fSamplingFreq = samplingFreq;
		fConst0 = min(192000.0f, max(1.0f, (float)fSamplingFreq));
		iTempPerm0 = 0;
		fConst1 = (6.9100000000000001f / fConst0);
		fTempPerm1 = 0;
		fTempPerm2 = 0;
		iTempPerm3 = 0;
		fTempPerm4 = 0;
		fTempPerm5 = 0;
		iTempPerm6 = 0;
		fTempPerm7 = 0;
		fTempPerm8 = 0;
		iTempPerm9 = 0;
		fTempPerm10 = 0;
		fTempPerm11 = 0;
		iTempPerm12 = 0;
		fTempPerm13 = 0;
		fTempPerm14 = 0;
		iTempPerm15 = 0;
		fTempPerm16 = 0;
		fTempPerm17 = 0;
		fConst2 = (3.1415926535897931f / fConst0);
		fTempPerm18 = 0;
		fTempPerm19 = 0;
		fTempPerm20 = 0;
		fTempPerm21 = 0;
		fTempPerm22 = 0;
		fTempPerm23 = 0;
		fTempPerm24 = 0;
		fConst3 = (1.0f / fConst0);
		fTempPerm25 = 0;
		fTempPerm26 = 0;
		fTempPerm27 = 0;
		fTempPerm28 = 0;
		fTempPerm29 = 0;
		fTempPerm30 = 0;
		fTempPerm31 = 0;
		fTempPerm32 = 0;
		fConst4 = (0.25f * fConst0);
		fTempPerm33 = 0;
		fConst5 = (0.5f * fConst0);
		fConst6 = (6.0f / fConst0);
		fTempPerm34 = 0;
		fTempPerm35 = 0;
		iTempPerm36 = 0;
		fTempPerm37 = 0;
		fTempPerm38 = 0;
		iTempPerm39 = 0;
		fTempPerm40 = 0;
		fTempPerm41 = 0;
		fTempPerm42 = 0;
		fTempPerm43 = 0;
		fTempPerm44 = 0;
		fTempPerm45 = 0;
		fTempPerm46 = 0;
		fTempPerm47 = 0;
		fTempPerm48 = 0;
		iTempPerm49 = 0;
		fTempPerm50 = 0;
		fTempPerm51 = 0;
		fTempPerm52 = 0;
		fTempPerm53 = 0;
		fTempPerm54 = 0;
		fTempPerm55 = 0;
		fTempPerm56 = 0;
		iTempPerm57 = 0;
		fTempPerm58 = 0;
		fTempPerm59 = 0;
		fTempPerm60 = 0;
		fTempPerm61 = 0;
		fTempPerm62 = 0;
		fTempPerm63 = 0;
		fTempPerm64 = 0;
		fTempPerm65 = 0;
		fTempPerm66 = 0;
		fTempPerm67 = 0;
		iTempPerm68 = 0;
		fTempPerm69 = 0;
		fTempPerm70 = 0;
		fTempPerm71 = 0;
		fTempPerm72 = 0;
		fTempPerm73 = 0;
		fTempPerm74 = 0;
		iTempPerm75 = 0;
		fTempPerm76 = 0;
		fTempPerm77 = 0;
		fTempPerm78 = 0;
		fTempPerm79 = 0;
		fTempPerm80 = 0;
		fConst7 = (2.0f * fConst0);
		fTempPerm81 = 0;
		fTempPerm82 = 0;
		fTempPerm83 = 0;
		fTempPerm84 = 0;
		fTempPerm85 = 0;
		fConst8 = (3.0f / fConst0);
		fTempPerm86 = 0;
		iTempPerm87 = 0;
		fTempPerm88 = 0;
		fTempPerm89 = 0;
		fTempPerm90 = 0;
		fTempPerm91 = 0;
		fTempPerm92 = 0;
		fTempPerm93 = 0;
		fTempPerm94 = 0;
		fTempPerm95 = 0;
		iTempPerm96 = 0;
		fTempPerm97 = 0;
		fTempPerm98 = 0;
		fTempPerm99 = 0;
		fTempPerm100 = 0;
		fTempPerm101 = 0;
		fTempPerm102 = 0;
		fTempPerm103 = 0;
		iTempPerm104 = 0;
		fTempPerm105 = 0;
		fTempPerm106 = 0;
		fTempPerm107 = 0;
		fTempPerm108 = 0;
		fTempPerm109 = 0;
		iTempPerm110 = 0;
		fTempPerm111 = 0;
		fTempPerm112 = 0;
		fTempPerm113 = 0;
		fTempPerm114 = 0;
		fTempPerm115 = 0;
		fTempPerm116 = 0;
		fTempPerm117 = 0;
		fTempPerm118 = 0;
		iTempPerm119 = 0;
		fTempPerm120 = 0;
		fTempPerm121 = 0;
		fTempPerm122 = 0;
		fTempPerm123 = 0;
		fTempPerm124 = 0;
		iTempPerm125 = 0;
		fTempPerm126 = 0;
		fTempPerm127 = 0;
		fTempPerm128 = 0;
		fTempPerm129 = 0;
		fTempPerm130 = 0;
		fTempPerm131 = 0;
		fTempPerm132 = 0;
		fTempPerm133 = 0;
		iTempPerm134 = 0;
		fTempPerm135 = 0;
		fTempPerm136 = 0;
		fTempPerm137 = 0;
		fTempPerm138 = 0;
		fTempPerm139 = 0;
		fTempPerm140 = 0;
		fTempPerm141 = 0;
		fTempPerm142 = 0;
		iTempPerm143 = 0;
		fTempPerm144 = 0;
		fTempPerm145 = 0;
		fTempPerm146 = 0;
		fTempPerm147 = 0;
		fTempPerm148 = 0;
		fTempPerm149 = 0;
		fTempPerm150 = 0;
		iTempPerm151 = 0;
		fTempPerm152 = 0;
		fTempPerm153 = 0;
		fTempPerm154 = 0;
		fTempPerm155 = 0;
		fTempPerm156 = 0;
		iTempPerm157 = 0;
		fTempPerm158 = 0;
		fTempPerm159 = 0;
		fTempPerm160 = 0;
		fTempPerm161 = 0;
		fTempPerm162 = 0;
		fTempPerm163 = 0;
		fTempPerm164 = 0;
		fTempPerm165 = 0;
		iTempPerm166 = 0;
		fTempPerm167 = 0;
		fTempPerm168 = 0;
		fTempPerm169 = 0;
		fTempPerm170 = 0;
		fTempPerm171 = 0;
		iTempPerm172 = 0;
		fTempPerm173 = 0;
		fTempPerm174 = 0;
		fTempPerm175 = 0;
		fTempPerm176 = 0;
		fTempPerm177 = 0;
		fTempPerm178 = 0;
		fTempPerm179 = 0;
		fTempPerm180 = 0;
		iTempPerm181 = 0;
		fTempPerm182 = 0;
		fTempPerm183 = 0;
		fTempPerm184 = 0;
		fTempPerm185 = 0;
		fTempPerm186 = 0;
		fTempPerm187 = 0;
		fTempPerm188 = 0;
		fTempPerm189 = 0;
		iTempPerm190 = 0;
		fTempPerm191 = 0;
		fTempPerm192 = 0;
		fTempPerm193 = 0;
		fTempPerm194 = 0;
		fTempPerm195 = 0;
		fTempPerm196 = 0;
		fTempPerm197 = 0;
		iTempPerm198 = 0;
		fTempPerm199 = 0;
		fTempPerm200 = 0;
		fTempPerm201 = 0;
		fTempPerm202 = 0;
		fTempPerm203 = 0;
		iTempPerm204 = 0;
		fTempPerm205 = 0;
		fTempPerm206 = 0;
		fTempPerm207 = 0;
		fTempPerm208 = 0;
		fTempPerm209 = 0;
		fTempPerm210 = 0;
		fTempPerm211 = 0;
		fTempPerm212 = 0;
		iTempPerm213 = 0;
		fTempPerm214 = 0;
		fTempPerm215 = 0;
		fTempPerm216 = 0;
		fTempPerm217 = 0;
		fTempPerm218 = 0;
		iTempPerm219 = 0;
		fTempPerm220 = 0;
		fTempPerm221 = 0;
		fTempPerm222 = 0;
		fTempPerm223 = 0;
		fTempPerm224 = 0;
		fTempPerm225 = 0;
		fTempPerm226 = 0;
		fTempPerm227 = 0;
		iTempPerm228 = 0;
		fTempPerm229 = 0;
		fTempPerm230 = 0;
		fTempPerm231 = 0;
		fTempPerm232 = 0;
		fTempPerm233 = 0;
		fTempPerm234 = 0;
		fTempPerm235 = 0;
		fTempPerm236 = 0;
		iTempPerm237 = 0;
		fTempPerm238 = 0;
		fTempPerm239 = 0;
		fTempPerm240 = 0;
		fTempPerm241 = 0;
		fTempPerm242 = 0;
		fTempPerm243 = 0;
		fTempPerm244 = 0;
		iTempPerm245 = 0;
		fTempPerm246 = 0;
		fTempPerm247 = 0;
		fTempPerm248 = 0;
		fTempPerm249 = 0;
		fTempPerm250 = 0;
		iTempPerm251 = 0;
		fTempPerm252 = 0;
		fTempPerm253 = 0;
		fTempPerm254 = 0;
		fTempPerm255 = 0;
		fTempPerm256 = 0;
		fTempPerm257 = 0;
		fTempPerm258 = 0;
		fTempPerm259 = 0;
		iTempPerm260 = 0;
		fTempPerm261 = 0;
		fTempPerm262 = 0;
		fTempPerm263 = 0;
		fTempPerm264 = 0;
		fTempPerm265 = 0;
		iTempPerm266 = 0;
		fTempPerm267 = 0;
		fTempPerm268 = 0;
		fTempPerm269 = 0;
		fTempPerm270 = 0;
		fTempPerm271 = 0;
		fTempPerm272 = 0;
		fTempPerm273 = 0;
		fTempPerm274 = 0;
		iTempPerm275 = 0;
		fTempPerm276 = 0;
		fTempPerm277 = 0;
		fTempPerm278 = 0;
		fTempPerm279 = 0;
		fTempPerm280 = 0;
		fTempPerm281 = 0;
		fTempPerm282 = 0;
		fTempPerm283 = 0;
		iTempPerm284 = 0;
		fTempPerm285 = 0;
		fTempPerm286 = 0;
		fTempPerm287 = 0;
		fTempPerm288 = 0;
		fTempPerm289 = 0;
		fTempPerm290 = 0;
		fTempPerm291 = 0;
		iTempPerm292 = 0;
		fTempPerm293 = 0;
		fTempPerm294 = 0;
		fTempPerm295 = 0;
		fTempPerm296 = 0;
		fTempPerm297 = 0;
		iTempPerm298 = 0;
		fTempPerm299 = 0;
		fTempPerm300 = 0;
		fTempPerm301 = 0;
		fTempPerm302 = 0;
		fTempPerm303 = 0;
		fTempPerm304 = 0;
		fTempPerm305 = 0;
		fTempPerm306 = 0;
		iTempPerm307 = 0;
		fTempPerm308 = 0;
		fTempPerm309 = 0;
		fTempPerm310 = 0;
		fTempPerm311 = 0;
		fTempPerm312 = 0;
		iTempPerm313 = 0;
		fTempPerm314 = 0;
		fTempPerm315 = 0;
		fTempPerm316 = 0;
		fTempPerm317 = 0;
		fTempPerm318 = 0;
		fTempPerm319 = 0;
		fTempPerm320 = 0;
		fTempPerm321 = 0;
		iTempPerm322 = 0;
		fTempPerm323 = 0;
		fTempPerm324 = 0;
	}
	virtual void instanceResetUserInterface() {
		fslider0 = 0.0f;
		fslider1 = 0.0f;
		fslider2 = 0.001f;
		fbutton0 = 0.0;
		fslider3 = 1.0f;
		fslider4 = 1.0f;
		fbutton1 = 0.0;
		fslider5 = 1.0f;
		fbutton2 = 0.0;
		fslider6 = 1.0f;
		fbutton3 = 0.0;
		fslider7 = 1.0f;
		fbutton4 = 0.0;
		fslider8 = 1.0f;
		fbutton5 = 0.0;
		fslider9 = 1.0f;
		fslider10 = 0.5f;
		fslider11 = 1.0f;
		fslider12 = 440.0f;
		fslider13 = 0.0f;
		fslider14 = 2.0f;
		fslider15 = 440.0f;
		fslider16 = 440.0f;
		fslider17 = 440.0f;
		fslider18 = 440.0f;
		fslider19 = 440.0f;
	}
	virtual void instanceClear() {
		for (int i=0; i<2; i++) iVec0[i] = 0;
		for (int i=0; i<2; i++) iRec1[i] = 0;
		for (int i=0; i<2; i++) fRec0[i] = 0;
		for (int i=0; i<2; i++) iRec4[i] = 0;
		for (int i=0; i<2; i++) fRec3[i] = 0;
		for (int i=0; i<2; i++) iRec6[i] = 0;
		for (int i=0; i<2; i++) fRec5[i] = 0;
		for (int i=0; i<2; i++) iRec8[i] = 0;
		for (int i=0; i<2; i++) fRec7[i] = 0;
		for (int i=0; i<2; i++) iRec10[i] = 0;
		for (int i=0; i<2; i++) fRec9[i] = 0;
		for (int i=0; i<2; i++) iRec12[i] = 0;
		for (int i=0; i<2; i++) fRec11[i] = 0;
		for (int i=0; i<2; i++) fRec2[i] = 0;
		for (int i=0; i<2; i++) fRec15[i] = 0;
		for (int i=0; i<2; i++) fVec1[i] = 0;
		for (int i=0; i<2; i++) iRec17[i] = 0;
		for (int i=0; i<2; i++) fRec16[i] = 0;
		for (int i=0; i<2; i++) fVec2[i] = 0;
		for (int i=0; i<2; i++) fVec3[i] = 0;
		for (int i=0; i<2; i++) fRec19[i] = 0;
		for (int i=0; i<2; i++) fVec4[i] = 0;
		IOTA = 0;
		for (int i=0; i<4096; i++) fVec5[i] = 0;
		for (int i=0; i<2; i++) fRec18[i] = 0;
		for (int i=0; i<2; i++) fRec20[i] = 0;
		for (int i=0; i<2; i++) fRec21[i] = 0;
		for (int i=0; i<2; i++) fVec6[i] = 0;
		for (int i=0; i<2; i++) fRec22[i] = 0;
		for (int i=0; i<2; i++) fVec7[i] = 0;
		for (int i=0; i<4096; i++) fVec8[i] = 0;
		for (int i=0; i<2; i++) iRec24[i] = 0;
		for (int i=0; i<2; i++) fRec23[i] = 0;
		for (int i=0; i<2; i++) fVec9[i] = 0;
		for (int i=0; i<2; i++) fRec25[i] = 0;
		for (int i=0; i<2; i++) fVec10[i] = 0;
		for (int i=0; i<2; i++) fRec26[i] = 0;
		for (int i=0; i<2; i++) fVec11[i] = 0;
		for (int i=0; i<4096; i++) fVec12[i] = 0;
		for (int i=0; i<2; i++) iRec28[i] = 0;
		for (int i=0; i<2; i++) fRec27[i] = 0;
		for (int i=0; i<2; i++) fVec13[i] = 0;
		for (int i=0; i<2; i++) fRec29[i] = 0;
		for (int i=0; i<2; i++) iRec31[i] = 0;
		for (int i=0; i<2; i++) fRec30[i] = 0;
		for (int i=0; i<2; i++) fVec14[i] = 0;
		for (int i=0; i<2; i++) fVec15[i] = 0;
		for (int i=0; i<2; i++) fRec33[i] = 0;
		for (int i=0; i<2; i++) fVec16[i] = 0;
		for (int i=0; i<4096; i++) fVec17[i] = 0;
		for (int i=0; i<2; i++) fRec32[i] = 0;
		for (int i=0; i<3; i++) fRec14[i] = 0;
		for (int i=0; i<3; i++) fRec13[i] = 0;
		for (int i=0; i<2; i++) iRec37[i] = 0;
		for (int i=0; i<2; i++) fRec36[i] = 0;
		for (int i=0; i<2; i++) fVec18[i] = 0;
		for (int i=0; i<2; i++) fVec19[i] = 0;
		for (int i=0; i<2; i++) fRec39[i] = 0;
		for (int i=0; i<2; i++) fVec20[i] = 0;
		for (int i=0; i<4096; i++) fVec21[i] = 0;
		for (int i=0; i<2; i++) fRec38[i] = 0;
		for (int i=0; i<2; i++) fVec22[i] = 0;
		for (int i=0; i<2; i++) fRec40[i] = 0;
		for (int i=0; i<2; i++) fVec23[i] = 0;
		for (int i=0; i<4096; i++) fVec24[i] = 0;
		for (int i=0; i<2; i++) iRec42[i] = 0;
		for (int i=0; i<2; i++) fRec41[i] = 0;
		for (int i=0; i<2; i++) fVec25[i] = 0;
		for (int i=0; i<2; i++) fRec43[i] = 0;
		for (int i=0; i<2; i++) fVec26[i] = 0;
		for (int i=0; i<2; i++) fRec44[i] = 0;
		for (int i=0; i<2; i++) fVec27[i] = 0;
		for (int i=0; i<4096; i++) fVec28[i] = 0;
		for (int i=0; i<2; i++) iRec46[i] = 0;
		for (int i=0; i<2; i++) fRec45[i] = 0;
		for (int i=0; i<2; i++) fVec29[i] = 0;
		for (int i=0; i<2; i++) fRec47[i] = 0;
		for (int i=0; i<2; i++) iRec49[i] = 0;
		for (int i=0; i<2; i++) fRec48[i] = 0;
		for (int i=0; i<2; i++) fVec30[i] = 0;
		for (int i=0; i<2; i++) fVec31[i] = 0;
		for (int i=0; i<2; i++) fRec51[i] = 0;
		for (int i=0; i<2; i++) fVec32[i] = 0;
		for (int i=0; i<4096; i++) fVec33[i] = 0;
		for (int i=0; i<2; i++) fRec50[i] = 0;
		for (int i=0; i<3; i++) fRec35[i] = 0;
		for (int i=0; i<3; i++) fRec34[i] = 0;
		for (int i=0; i<2; i++) iRec55[i] = 0;
		for (int i=0; i<2; i++) fRec54[i] = 0;
		for (int i=0; i<2; i++) fVec34[i] = 0;
		for (int i=0; i<2; i++) fVec35[i] = 0;
		for (int i=0; i<2; i++) fRec57[i] = 0;
		for (int i=0; i<2; i++) fVec36[i] = 0;
		for (int i=0; i<4096; i++) fVec37[i] = 0;
		for (int i=0; i<2; i++) fRec56[i] = 0;
		for (int i=0; i<2; i++) fVec38[i] = 0;
		for (int i=0; i<2; i++) fRec58[i] = 0;
		for (int i=0; i<2; i++) fVec39[i] = 0;
		for (int i=0; i<4096; i++) fVec40[i] = 0;
		for (int i=0; i<2; i++) iRec60[i] = 0;
		for (int i=0; i<2; i++) fRec59[i] = 0;
		for (int i=0; i<2; i++) fVec41[i] = 0;
		for (int i=0; i<2; i++) fRec61[i] = 0;
		for (int i=0; i<2; i++) fVec42[i] = 0;
		for (int i=0; i<2; i++) fRec62[i] = 0;
		for (int i=0; i<2; i++) fVec43[i] = 0;
		for (int i=0; i<4096; i++) fVec44[i] = 0;
		for (int i=0; i<2; i++) iRec64[i] = 0;
		for (int i=0; i<2; i++) fRec63[i] = 0;
		for (int i=0; i<2; i++) fVec45[i] = 0;
		for (int i=0; i<2; i++) fRec65[i] = 0;
		for (int i=0; i<2; i++) iRec67[i] = 0;
		for (int i=0; i<2; i++) fRec66[i] = 0;
		for (int i=0; i<2; i++) fVec46[i] = 0;
		for (int i=0; i<2; i++) fVec47[i] = 0;
		for (int i=0; i<2; i++) fRec69[i] = 0;
		for (int i=0; i<2; i++) fVec48[i] = 0;
		for (int i=0; i<4096; i++) fVec49[i] = 0;
		for (int i=0; i<2; i++) fRec68[i] = 0;
		for (int i=0; i<3; i++) fRec53[i] = 0;
		for (int i=0; i<3; i++) fRec52[i] = 0;
		for (int i=0; i<2; i++) iRec73[i] = 0;
		for (int i=0; i<2; i++) fRec72[i] = 0;
		for (int i=0; i<2; i++) fVec50[i] = 0;
		for (int i=0; i<2; i++) fVec51[i] = 0;
		for (int i=0; i<2; i++) fRec75[i] = 0;
		for (int i=0; i<2; i++) fVec52[i] = 0;
		for (int i=0; i<4096; i++) fVec53[i] = 0;
		for (int i=0; i<2; i++) fRec74[i] = 0;
		for (int i=0; i<2; i++) fVec54[i] = 0;
		for (int i=0; i<2; i++) fRec76[i] = 0;
		for (int i=0; i<2; i++) fVec55[i] = 0;
		for (int i=0; i<4096; i++) fVec56[i] = 0;
		for (int i=0; i<2; i++) iRec78[i] = 0;
		for (int i=0; i<2; i++) fRec77[i] = 0;
		for (int i=0; i<2; i++) fVec57[i] = 0;
		for (int i=0; i<2; i++) fRec79[i] = 0;
		for (int i=0; i<2; i++) fVec58[i] = 0;
		for (int i=0; i<2; i++) fRec80[i] = 0;
		for (int i=0; i<2; i++) fVec59[i] = 0;
		for (int i=0; i<4096; i++) fVec60[i] = 0;
		for (int i=0; i<2; i++) iRec82[i] = 0;
		for (int i=0; i<2; i++) fRec81[i] = 0;
		for (int i=0; i<2; i++) fVec61[i] = 0;
		for (int i=0; i<2; i++) fRec83[i] = 0;
		for (int i=0; i<2; i++) iRec85[i] = 0;
		for (int i=0; i<2; i++) fRec84[i] = 0;
		for (int i=0; i<2; i++) fVec62[i] = 0;
		for (int i=0; i<2; i++) fVec63[i] = 0;
		for (int i=0; i<2; i++) fRec87[i] = 0;
		for (int i=0; i<2; i++) fVec64[i] = 0;
		for (int i=0; i<4096; i++) fVec65[i] = 0;
		for (int i=0; i<2; i++) fRec86[i] = 0;
		for (int i=0; i<3; i++) fRec71[i] = 0;
		for (int i=0; i<3; i++) fRec70[i] = 0;
		for (int i=0; i<2; i++) iRec91[i] = 0;
		for (int i=0; i<2; i++) fRec90[i] = 0;
		for (int i=0; i<2; i++) fVec66[i] = 0;
		for (int i=0; i<2; i++) fVec67[i] = 0;
		for (int i=0; i<2; i++) fRec93[i] = 0;
		for (int i=0; i<2; i++) fVec68[i] = 0;
		for (int i=0; i<4096; i++) fVec69[i] = 0;
		for (int i=0; i<2; i++) fRec92[i] = 0;
		for (int i=0; i<2; i++) fVec70[i] = 0;
		for (int i=0; i<2; i++) fRec94[i] = 0;
		for (int i=0; i<2; i++) fVec71[i] = 0;
		for (int i=0; i<4096; i++) fVec72[i] = 0;
		for (int i=0; i<2; i++) iRec96[i] = 0;
		for (int i=0; i<2; i++) fRec95[i] = 0;
		for (int i=0; i<2; i++) fVec73[i] = 0;
		for (int i=0; i<2; i++) fRec97[i] = 0;
		for (int i=0; i<2; i++) fVec74[i] = 0;
		for (int i=0; i<2; i++) fRec98[i] = 0;
		for (int i=0; i<2; i++) fVec75[i] = 0;
		for (int i=0; i<4096; i++) fVec76[i] = 0;
		for (int i=0; i<2; i++) iRec100[i] = 0;
		for (int i=0; i<2; i++) fRec99[i] = 0;
		for (int i=0; i<2; i++) fVec77[i] = 0;
		for (int i=0; i<2; i++) fRec101[i] = 0;
		for (int i=0; i<2; i++) iRec103[i] = 0;
		for (int i=0; i<2; i++) fRec102[i] = 0;
		for (int i=0; i<2; i++) fVec78[i] = 0;
		for (int i=0; i<2; i++) fVec79[i] = 0;
		for (int i=0; i<2; i++) fRec105[i] = 0;
		for (int i=0; i<2; i++) fVec80[i] = 0;
		for (int i=0; i<4096; i++) fVec81[i] = 0;
		for (int i=0; i<2; i++) fRec104[i] = 0;
		for (int i=0; i<3; i++) fRec89[i] = 0;
		for (int i=0; i<3; i++) fRec88[i] = 0;
		for (int i=0; i<2; i++) iRec109[i] = 0;
		for (int i=0; i<2; i++) fRec108[i] = 0;
		for (int i=0; i<2; i++) fVec82[i] = 0;
		for (int i=0; i<2; i++) fVec83[i] = 0;
		for (int i=0; i<2; i++) fRec111[i] = 0;
		for (int i=0; i<2; i++) fVec84[i] = 0;
		for (int i=0; i<4096; i++) fVec85[i] = 0;
		for (int i=0; i<2; i++) fRec110[i] = 0;
		for (int i=0; i<2; i++) fVec86[i] = 0;
		for (int i=0; i<2; i++) fRec112[i] = 0;
		for (int i=0; i<2; i++) fVec87[i] = 0;
		for (int i=0; i<4096; i++) fVec88[i] = 0;
		for (int i=0; i<2; i++) iRec114[i] = 0;
		for (int i=0; i<2; i++) fRec113[i] = 0;
		for (int i=0; i<2; i++) fVec89[i] = 0;
		for (int i=0; i<2; i++) fRec115[i] = 0;
		for (int i=0; i<2; i++) fVec90[i] = 0;
		for (int i=0; i<2; i++) fRec116[i] = 0;
		for (int i=0; i<2; i++) fVec91[i] = 0;
		for (int i=0; i<4096; i++) fVec92[i] = 0;
		for (int i=0; i<2; i++) iRec118[i] = 0;
		for (int i=0; i<2; i++) fRec117[i] = 0;
		for (int i=0; i<2; i++) fVec93[i] = 0;
		for (int i=0; i<2; i++) fRec119[i] = 0;
		for (int i=0; i<2; i++) iRec121[i] = 0;
		for (int i=0; i<2; i++) fRec120[i] = 0;
		for (int i=0; i<2; i++) fVec94[i] = 0;
		for (int i=0; i<2; i++) fVec95[i] = 0;
		for (int i=0; i<2; i++) fRec123[i] = 0;
		for (int i=0; i<2; i++) fVec96[i] = 0;
		for (int i=0; i<4096; i++) fVec97[i] = 0;
		for (int i=0; i<2; i++) fRec122[i] = 0;
		for (int i=0; i<3; i++) fRec107[i] = 0;
		for (int i=0; i<3; i++) fRec106[i] = 0;
	}
	virtual void init(int samplingFreq) {
		classInit(samplingFreq);
		instanceInit(samplingFreq);
	}
	virtual void instanceInit(int samplingFreq) {
		instanceConstants(samplingFreq);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual faust_nuke* clone() {
		return new faust_nuke();
	}
	virtual int getSampleRate() {
		return fSamplingFreq;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("nuke");
		ui_interface->addHorizontalSlider("Filter", &fslider10, 0.5f, 0.0f, 1.0f, 0.01f);
		ui_interface->addHorizontalSlider("Relation", &fslider14, 2.0f, 0.0f, 3.0009999999999999f, 0.001f);
		ui_interface->addHorizontalSlider("Sub", &fslider13, 0.0f, 0.0f, 1.0f, 0.001f);
		ui_interface->addHorizontalSlider("Wave", &fslider11, 1.0f, 0.080000000000000002f, 4.0f, 0.01f);
		ui_interface->openVerticalBox("envelope");
		ui_interface->addHorizontalSlider("Attack", &fslider2, 0.001f, 0.001f, 4.0f, 0.001f);
		ui_interface->addHorizontalSlider("Decay", &fslider1, 0.0f, 0.0f, 4.0f, 0.001f);
		ui_interface->addHorizontalSlider("Release", &fslider0, 0.0f, 0.0f, 4.0f, 0.01f);
		ui_interface->addHorizontalSlider("Sustain", &fslider3, 1.0f, 0.0f, 1.0f, 0.01f);
		ui_interface->closeBox();
		ui_interface->openVerticalBox("voices");
		ui_interface->openVerticalBox("0");
		ui_interface->openHorizontalBox("midi");
		ui_interface->addHorizontalSlider("freq", &fslider19, 440.0f, 20.0f, 1000.0f, 1.0f);
		ui_interface->addButton("trigger", &fbutton5);
		ui_interface->addHorizontalSlider("velocity", &fslider9, 1.0f, 0.0f, 1.0f, 0.007874015748031496f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->openVerticalBox("1");
		ui_interface->openHorizontalBox("midi");
		ui_interface->addHorizontalSlider("freq", &fslider18, 440.0f, 20.0f, 1000.0f, 1.0f);
		ui_interface->addButton("trigger", &fbutton4);
		ui_interface->addHorizontalSlider("velocity", &fslider8, 1.0f, 0.0f, 1.0f, 0.007874015748031496f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->openVerticalBox("2");
		ui_interface->openHorizontalBox("midi");
		ui_interface->addHorizontalSlider("freq", &fslider17, 440.0f, 20.0f, 1000.0f, 1.0f);
		ui_interface->addButton("trigger", &fbutton3);
		ui_interface->addHorizontalSlider("velocity", &fslider7, 1.0f, 0.0f, 1.0f, 0.007874015748031496f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->openVerticalBox("3");
		ui_interface->openHorizontalBox("midi");
		ui_interface->addHorizontalSlider("freq", &fslider16, 440.0f, 20.0f, 1000.0f, 1.0f);
		ui_interface->addButton("trigger", &fbutton2);
		ui_interface->addHorizontalSlider("velocity", &fslider6, 1.0f, 0.0f, 1.0f, 0.007874015748031496f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->openVerticalBox("4");
		ui_interface->openHorizontalBox("midi");
		ui_interface->addHorizontalSlider("freq", &fslider15, 440.0f, 20.0f, 1000.0f, 1.0f);
		ui_interface->addButton("trigger", &fbutton1);
		ui_interface->addHorizontalSlider("velocity", &fslider5, 1.0f, 0.0f, 1.0f, 0.007874015748031496f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->openVerticalBox("5");
		ui_interface->openHorizontalBox("midi");
		ui_interface->addHorizontalSlider("freq", &fslider12, 440.0f, 20.0f, 1000.0f, 1.0f);
		ui_interface->addButton("trigger", &fbutton0);
		ui_interface->addHorizontalSlider("velocity", &fslider4, 1.0f, 0.0f, 1.0f, 0.007874015748031496f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		//zone1
		//zone2
		float 	fSlow0 = float(fslider0);
		float 	fSlow1 = float(fslider1);
		float 	fSlow2 = float(fslider2);
		float 	fSlow3 = (6.9100000000000001f * fSlow2);
		int 	iSlow4 = int((fConst0 * fSlow2));
		int 	iSlow5 = (float(fbutton0) > 0.0f);
		int 	iSlow6 = int(iSlow5);
		float 	fSlow7 = float(fslider3);
		float 	fSlow8 = (float(iSlow5) * fSlow7);
		float 	fSlow9 = float(fslider4);
		int 	iSlow10 = (float(fbutton1) > 0.0f);
		int 	iSlow11 = int(iSlow10);
		float 	fSlow12 = (float(iSlow10) * fSlow7);
		float 	fSlow13 = float(fslider5);
		int 	iSlow14 = (float(fbutton2) > 0.0f);
		int 	iSlow15 = int(iSlow14);
		float 	fSlow16 = (float(iSlow14) * fSlow7);
		float 	fSlow17 = float(fslider6);
		int 	iSlow18 = (float(fbutton3) > 0.0f);
		int 	iSlow19 = int(iSlow18);
		float 	fSlow20 = (float(iSlow18) * fSlow7);
		float 	fSlow21 = float(fslider7);
		int 	iSlow22 = (float(fbutton4) > 0.0f);
		int 	iSlow23 = int(iSlow22);
		float 	fSlow24 = (float(iSlow22) * fSlow7);
		float 	fSlow25 = float(fslider8);
		int 	iSlow26 = (float(fbutton5) > 0.0f);
		int 	iSlow27 = int(iSlow26);
		float 	fSlow28 = (float(iSlow26) * fSlow7);
		float 	fSlow29 = float(fslider9);
		float 	fSlow30 = (0.0010000000000000009f * float(fslider10));
		float 	fSlow31 = (0.0010000000000000009f * float(fslider11));
		float 	fSlow32 = float(fslider12);
		float 	fSlow33 = (fConst3 * fSlow32);
		float 	fSlow34 = (fConst0 / fSlow32);
		int 	iSlow35 = int(fSlow34);
		float 	fSlow36 = max(fSlow32, 23.448949682462139f);
		float 	fSlow37 = max(20.0f, fabsf(fSlow36));
		float 	fSlow38 = (fConst4 / fSlow37);
		float 	fSlow39 = max((float)0, min((float)2047, (fConst5 / fSlow36)));
		int 	iSlow40 = int(fSlow39);
		int 	iSlow41 = int((iSlow40 + 1));
		float 	fSlow42 = floorf(fSlow39);
		float 	fSlow43 = (fSlow39 - fSlow42);
		float 	fSlow44 = (fSlow42 + (1.0f - fSlow39));
		float 	fSlow45 = (fConst6 * fSlow32);
		float 	fSlow46 = (fConst0 / fSlow36);
		float 	fSlow47 = (0.0010000000000000009f * float(fslider13));
		float 	fSlow48 = (0.0010000000000000009f * float(fslider14));
		float 	fSlow49 = (1.0f / fSlow32);
		int 	iSlow50 = int((fConst7 / fSlow32));
		float 	fSlow51 = max((0.5f * fSlow32), 23.448949682462139f);
		float 	fSlow52 = max(20.0f, fabsf(fSlow51));
		float 	fSlow53 = (fConst4 / fSlow52);
		float 	fSlow54 = max((float)0, min((float)2047, (fConst5 / fSlow51)));
		int 	iSlow55 = int(fSlow54);
		int 	iSlow56 = int((iSlow55 + 1));
		float 	fSlow57 = floorf(fSlow54);
		float 	fSlow58 = (fSlow54 - fSlow57);
		float 	fSlow59 = (fSlow57 + (1.0f - fSlow54));
		float 	fSlow60 = (fConst8 * fSlow32);
		float 	fSlow61 = (fConst0 / fSlow51);
		float 	fSlow62 = float(fslider15);
		float 	fSlow63 = (fConst3 * fSlow62);
		float 	fSlow64 = (fConst0 / fSlow62);
		int 	iSlow65 = int(fSlow64);
		float 	fSlow66 = max(fSlow62, 23.448949682462139f);
		float 	fSlow67 = max(20.0f, fabsf(fSlow66));
		float 	fSlow68 = (fConst4 / fSlow67);
		float 	fSlow69 = max((float)0, min((float)2047, (fConst5 / fSlow66)));
		int 	iSlow70 = int(fSlow69);
		int 	iSlow71 = int((iSlow70 + 1));
		float 	fSlow72 = floorf(fSlow69);
		float 	fSlow73 = (fSlow69 - fSlow72);
		float 	fSlow74 = (fSlow72 + (1.0f - fSlow69));
		float 	fSlow75 = (fConst6 * fSlow62);
		float 	fSlow76 = (fConst0 / fSlow66);
		float 	fSlow77 = (1.0f / fSlow62);
		int 	iSlow78 = int((fConst7 / fSlow62));
		float 	fSlow79 = max((0.5f * fSlow62), 23.448949682462139f);
		float 	fSlow80 = max(20.0f, fabsf(fSlow79));
		float 	fSlow81 = (fConst4 / fSlow80);
		float 	fSlow82 = max((float)0, min((float)2047, (fConst5 / fSlow79)));
		int 	iSlow83 = int(fSlow82);
		int 	iSlow84 = int((iSlow83 + 1));
		float 	fSlow85 = floorf(fSlow82);
		float 	fSlow86 = (fSlow82 - fSlow85);
		float 	fSlow87 = (fSlow85 + (1.0f - fSlow82));
		float 	fSlow88 = (fConst8 * fSlow62);
		float 	fSlow89 = (fConst0 / fSlow79);
		float 	fSlow90 = float(fslider16);
		float 	fSlow91 = (fConst3 * fSlow90);
		float 	fSlow92 = (fConst0 / fSlow90);
		int 	iSlow93 = int(fSlow92);
		float 	fSlow94 = max(fSlow90, 23.448949682462139f);
		float 	fSlow95 = max(20.0f, fabsf(fSlow94));
		float 	fSlow96 = (fConst4 / fSlow95);
		float 	fSlow97 = max((float)0, min((float)2047, (fConst5 / fSlow94)));
		int 	iSlow98 = int(fSlow97);
		int 	iSlow99 = int((iSlow98 + 1));
		float 	fSlow100 = floorf(fSlow97);
		float 	fSlow101 = (fSlow97 - fSlow100);
		float 	fSlow102 = (fSlow100 + (1.0f - fSlow97));
		float 	fSlow103 = (fConst6 * fSlow90);
		float 	fSlow104 = (fConst0 / fSlow94);
		float 	fSlow105 = (1.0f / fSlow90);
		int 	iSlow106 = int((fConst7 / fSlow90));
		float 	fSlow107 = max((0.5f * fSlow90), 23.448949682462139f);
		float 	fSlow108 = max(20.0f, fabsf(fSlow107));
		float 	fSlow109 = (fConst4 / fSlow108);
		float 	fSlow110 = max((float)0, min((float)2047, (fConst5 / fSlow107)));
		int 	iSlow111 = int(fSlow110);
		int 	iSlow112 = int((iSlow111 + 1));
		float 	fSlow113 = floorf(fSlow110);
		float 	fSlow114 = (fSlow110 - fSlow113);
		float 	fSlow115 = (fSlow113 + (1.0f - fSlow110));
		float 	fSlow116 = (fConst8 * fSlow90);
		float 	fSlow117 = (fConst0 / fSlow107);
		float 	fSlow118 = float(fslider17);
		float 	fSlow119 = (fConst3 * fSlow118);
		float 	fSlow120 = (fConst0 / fSlow118);
		int 	iSlow121 = int(fSlow120);
		float 	fSlow122 = max(fSlow118, 23.448949682462139f);
		float 	fSlow123 = max(20.0f, fabsf(fSlow122));
		float 	fSlow124 = (fConst4 / fSlow123);
		float 	fSlow125 = max((float)0, min((float)2047, (fConst5 / fSlow122)));
		int 	iSlow126 = int(fSlow125);
		int 	iSlow127 = int((iSlow126 + 1));
		float 	fSlow128 = floorf(fSlow125);
		float 	fSlow129 = (fSlow125 - fSlow128);
		float 	fSlow130 = (fSlow128 + (1.0f - fSlow125));
		float 	fSlow131 = (fConst6 * fSlow118);
		float 	fSlow132 = (fConst0 / fSlow122);
		float 	fSlow133 = (1.0f / fSlow118);
		int 	iSlow134 = int((fConst7 / fSlow118));
		float 	fSlow135 = max((0.5f * fSlow118), 23.448949682462139f);
		float 	fSlow136 = max(20.0f, fabsf(fSlow135));
		float 	fSlow137 = (fConst4 / fSlow136);
		float 	fSlow138 = max((float)0, min((float)2047, (fConst5 / fSlow135)));
		int 	iSlow139 = int(fSlow138);
		int 	iSlow140 = int((iSlow139 + 1));
		float 	fSlow141 = floorf(fSlow138);
		float 	fSlow142 = (fSlow138 - fSlow141);
		float 	fSlow143 = (fSlow141 + (1.0f - fSlow138));
		float 	fSlow144 = (fConst8 * fSlow118);
		float 	fSlow145 = (fConst0 / fSlow135);
		float 	fSlow146 = float(fslider18);
		float 	fSlow147 = (fConst3 * fSlow146);
		float 	fSlow148 = (fConst0 / fSlow146);
		int 	iSlow149 = int(fSlow148);
		float 	fSlow150 = max(fSlow146, 23.448949682462139f);
		float 	fSlow151 = max(20.0f, fabsf(fSlow150));
		float 	fSlow152 = (fConst4 / fSlow151);
		float 	fSlow153 = max((float)0, min((float)2047, (fConst5 / fSlow150)));
		int 	iSlow154 = int(fSlow153);
		int 	iSlow155 = int((iSlow154 + 1));
		float 	fSlow156 = floorf(fSlow153);
		float 	fSlow157 = (fSlow153 - fSlow156);
		float 	fSlow158 = (fSlow156 + (1.0f - fSlow153));
		float 	fSlow159 = (fConst6 * fSlow146);
		float 	fSlow160 = (fConst0 / fSlow150);
		float 	fSlow161 = (1.0f / fSlow146);
		int 	iSlow162 = int((fConst7 / fSlow146));
		float 	fSlow163 = max((0.5f * fSlow146), 23.448949682462139f);
		float 	fSlow164 = max(20.0f, fabsf(fSlow163));
		float 	fSlow165 = (fConst4 / fSlow164);
		float 	fSlow166 = max((float)0, min((float)2047, (fConst5 / fSlow163)));
		int 	iSlow167 = int(fSlow166);
		int 	iSlow168 = int((iSlow167 + 1));
		float 	fSlow169 = floorf(fSlow166);
		float 	fSlow170 = (fSlow166 - fSlow169);
		float 	fSlow171 = (fSlow169 + (1.0f - fSlow166));
		float 	fSlow172 = (fConst8 * fSlow146);
		float 	fSlow173 = (fConst0 / fSlow163);
		float 	fSlow174 = float(fslider19);
		float 	fSlow175 = (fConst3 * fSlow174);
		float 	fSlow176 = (fConst0 / fSlow174);
		int 	iSlow177 = int(fSlow176);
		float 	fSlow178 = max(fSlow174, 23.448949682462139f);
		float 	fSlow179 = max(20.0f, fabsf(fSlow178));
		float 	fSlow180 = (fConst4 / fSlow179);
		float 	fSlow181 = max((float)0, min((float)2047, (fConst5 / fSlow178)));
		int 	iSlow182 = int(fSlow181);
		int 	iSlow183 = int((iSlow182 + 1));
		float 	fSlow184 = floorf(fSlow181);
		float 	fSlow185 = (fSlow181 - fSlow184);
		float 	fSlow186 = (fSlow184 + (1.0f - fSlow181));
		float 	fSlow187 = (fConst6 * fSlow174);
		float 	fSlow188 = (fConst0 / fSlow178);
		float 	fSlow189 = (1.0f / fSlow174);
		int 	iSlow190 = int((fConst7 / fSlow174));
		float 	fSlow191 = max((0.5f * fSlow174), 23.448949682462139f);
		float 	fSlow192 = max(20.0f, fabsf(fSlow191));
		float 	fSlow193 = (fConst4 / fSlow192);
		float 	fSlow194 = max((float)0, min((float)2047, (fConst5 / fSlow191)));
		int 	iSlow195 = int(fSlow194);
		int 	iSlow196 = int((iSlow195 + 1));
		float 	fSlow197 = floorf(fSlow194);
		float 	fSlow198 = (fSlow194 - fSlow197);
		float 	fSlow199 = (fSlow197 + (1.0f - fSlow194));
		float 	fSlow200 = (fConst8 * fSlow174);
		float 	fSlow201 = (fConst0 / fSlow191);
		//zone2b
		//zone3
		FAUSTFLOAT* output0 = output[0];
		//LoopGraphScalar
		for (int i=0; i<count; i++) {
			iVec0[0] = 1;
			iRec1[0] = (iSlow5 * (iRec1[1] + 1));
			iTempPerm0 = int((iRec1[0] < iSlow4));
			fTempPerm1 = expf((0 - (fConst1 / ((iSlow6)?((iTempPerm0)?fSlow3:fSlow1):fSlow0))));
			fRec0[0] = ((fRec0[1] * fTempPerm1) + (((iSlow6)?((iTempPerm0)?1.5873015873015872f:fSlow8):0.0f) * (1.0f - fTempPerm1)));
			fTempPerm2 = min(1.0f, fRec0[0]);
			iRec4[0] = (iSlow10 * (iRec4[1] + 1));
			iTempPerm3 = int((iRec4[0] < iSlow4));
			fTempPerm4 = expf((0 - (fConst1 / ((iSlow11)?((iTempPerm3)?fSlow3:fSlow1):fSlow0))));
			fRec3[0] = ((fRec3[1] * fTempPerm4) + (((iSlow11)?((iTempPerm3)?1.5873015873015872f:fSlow12):0.0f) * (1.0f - fTempPerm4)));
			fTempPerm5 = min(1.0f, fRec3[0]);
			iRec6[0] = (iSlow14 * (iRec6[1] + 1));
			iTempPerm6 = int((iRec6[0] < iSlow4));
			fTempPerm7 = expf((0 - (fConst1 / ((iSlow15)?((iTempPerm6)?fSlow3:fSlow1):fSlow0))));
			fRec5[0] = ((fRec5[1] * fTempPerm7) + (((iSlow15)?((iTempPerm6)?1.5873015873015872f:fSlow16):0.0f) * (1.0f - fTempPerm7)));
			fTempPerm8 = min(1.0f, fRec5[0]);
			iRec8[0] = (iSlow18 * (iRec8[1] + 1));
			iTempPerm9 = int((iRec8[0] < iSlow4));
			fTempPerm10 = expf((0 - (fConst1 / ((iSlow19)?((iTempPerm9)?fSlow3:fSlow1):fSlow0))));
			fRec7[0] = ((fRec7[1] * fTempPerm10) + (((iSlow19)?((iTempPerm9)?1.5873015873015872f:fSlow20):0.0f) * (1.0f - fTempPerm10)));
			fTempPerm11 = min(1.0f, fRec7[0]);
			iRec10[0] = (iSlow22 * (iRec10[1] + 1));
			iTempPerm12 = int((iRec10[0] < iSlow4));
			fTempPerm13 = expf((0 - (fConst1 / ((iSlow23)?((iTempPerm12)?fSlow3:fSlow1):fSlow0))));
			fRec9[0] = ((fRec9[1] * fTempPerm13) + (((iSlow23)?((iTempPerm12)?1.5873015873015872f:fSlow24):0.0f) * (1.0f - fTempPerm13)));
			fTempPerm14 = min(1.0f, fRec9[0]);
			iRec12[0] = (iSlow26 * (iRec12[1] + 1));
			iTempPerm15 = int((iRec12[0] < iSlow4));
			fTempPerm16 = expf((0 - (fConst1 / ((iSlow27)?((iTempPerm15)?fSlow3:fSlow1):fSlow0))));
			fRec11[0] = ((fRec11[1] * fTempPerm16) + (((iSlow27)?((iTempPerm15)?1.5873015873015872f:fSlow28):0.0f) * (1.0f - fTempPerm16)));
			fTempPerm17 = min(1.0f, fRec11[0]);
			if ((float(((fSlow29 * fTempPerm17) > 0.001f)) != 0.0f) || (float(((fSlow25 * fTempPerm14) > 0.001f)) != 0.0f) || (float(((fSlow21 * fTempPerm11) > 0.001f)) != 0.0f) || (float(((fSlow17 * fTempPerm8) > 0.001f)) != 0.0f) || (float(((fSlow13 * fTempPerm5) > 0.001f)) != 0.0f) || (float(((fSlow9 * fTempPerm2) > 0.001f)) != 0.0f)) {
				fRec2[0] = (fSlow30 + (0.999f * fRec2[1]));
				fTempPerm18 = tanf((fConst2 * ((10000.0f * faustpower<2>(fRec2[0])) + 100.0f)));
				fTempPerm19 = (1.0f / fTempPerm18);
				fTempPerm20 = (((fTempPerm19 + 0.80000000000000004f) / fTempPerm18) + 1.0f);
				fTempPerm21 = (1.0f - (1.0f / faustpower<2>(fTempPerm18)));
				fTempPerm22 = (((fTempPerm19 + -0.80000000000000004f) / fTempPerm18) + 1.0f);
				fRec15[0] = (fSlow31 + (0.999f * fRec15[1]));
				fTempPerm23 = (0.10000000000000001f * (max((float)3, fRec15[0]) + -3.0f));
				fTempPerm24 = (fTempPerm23 + 1);
				fVec1[0] = 0.25f;
			}
			if ((float(((fSlow9 * fTempPerm2) > 0.001f)) != 0.0f)) {
				iRec17[0] = ((iRec17[1] + iVec0[1]) % iSlow35);
				fTempPerm25 = ((fRec16[1] * (1 - float(((iRec17[0] == 0) > 0)))) + (fSlow33 * fTempPerm24));
				fRec16[0] = (fTempPerm25 - floorf(fTempPerm25));
				fTempPerm26 = faustpower<2>(((2.0f * fRec16[0]) + -1.0f));
				fVec2[0] = fTempPerm26;
			}
			if ((float(((fSlow29 * fTempPerm17) > 0.001f)) != 0.0f) || (float(((fSlow25 * fTempPerm14) > 0.001f)) != 0.0f) || (float(((fSlow21 * fTempPerm11) > 0.001f)) != 0.0f) || (float(((fSlow17 * fTempPerm8) > 0.001f)) != 0.0f) || (float(((fSlow13 * fTempPerm5) > 0.001f)) != 0.0f) || (float(((fSlow9 * fTempPerm2) > 0.001f)) != 0.0f)) {
				fTempPerm27 = min((float)1, max((float)0, (fRec15[0] + -2.0f)));
				fTempPerm28 = min((float)1, max((float)0, (2.0f - fRec15[0])));
				fTempPerm29 = (1.0f - (fTempPerm28 + fTempPerm27));
			}
			if ((float(((fSlow9 * fTempPerm2) > 0.001f)) != 0.0f)) {
				fVec3[0] = fSlow37;
				fTempPerm30 = (fRec19[1] + (fConst3 * fVec3[1]));
				fRec19[0] = (fTempPerm30 - floorf(fTempPerm30));
				fTempPerm31 = faustpower<2>(((2.0f * fRec19[0]) + -1.0f));
				fVec4[0] = fTempPerm31;
			}
			if ((float(((fSlow29 * fTempPerm17) > 0.001f)) != 0.0f) || (float(((fSlow25 * fTempPerm14) > 0.001f)) != 0.0f) || (float(((fSlow21 * fTempPerm11) > 0.001f)) != 0.0f) || (float(((fSlow17 * fTempPerm8) > 0.001f)) != 0.0f) || (float(((fSlow13 * fTempPerm5) > 0.001f)) != 0.0f) || (float(((fSlow9 * fTempPerm2) > 0.001f)) != 0.0f)) {
				fTempPerm32 = float(iVec0[1]);
			}
			if ((float(((fSlow9 * fTempPerm2) > 0.001f)) != 0.0f)) {
				fTempPerm33 = (fSlow38 * (fTempPerm32 * (fVec4[0] - fVec4[1])));
				fVec5[IOTA&4095] = fTempPerm33;
				fRec18[0] = ((fVec5[IOTA&4095] + (0.999f * fRec18[1])) - ((fSlow44 * fVec5[(IOTA-iSlow40)&4095]) + (fSlow43 * fVec5[(IOTA-iSlow41)&4095])));
			}
			if ((float(((fSlow29 * fTempPerm17) > 0.001f)) != 0.0f) || (float(((fSlow25 * fTempPerm14) > 0.001f)) != 0.0f) || (float(((fSlow21 * fTempPerm11) > 0.001f)) != 0.0f) || (float(((fSlow17 * fTempPerm8) > 0.001f)) != 0.0f) || (float(((fSlow13 * fTempPerm5) > 0.001f)) != 0.0f) || (float(((fSlow9 * fTempPerm2) > 0.001f)) != 0.0f)) {
				fTempPerm34 = min(0.5f, (0.5f * fRec15[0]));
			}
			if ((float(((fSlow9 * fTempPerm2) > 0.001f)) != 0.0f)) {
				fTempPerm35 = max((float)0, min((float)2047, (fSlow46 * fTempPerm34)));
				iTempPerm36 = int(fTempPerm35);
				fTempPerm37 = floorf(fTempPerm35);
			}
			if ((float(((fSlow29 * fTempPerm17) > 0.001f)) != 0.0f) || (float(((fSlow25 * fTempPerm14) > 0.001f)) != 0.0f) || (float(((fSlow21 * fTempPerm11) > 0.001f)) != 0.0f) || (float(((fSlow17 * fTempPerm8) > 0.001f)) != 0.0f) || (float(((fSlow13 * fTempPerm5) > 0.001f)) != 0.0f) || (float(((fSlow9 * fTempPerm2) > 0.001f)) != 0.0f)) {
				fRec20[0] = (fSlow47 + (0.999f * fRec20[1]));
				fTempPerm38 = (1.0f - fRec20[0]);
				fRec21[0] = (fSlow48 + (0.999f * fRec21[1]));
				iTempPerm39 = (fRec21[0] >= 3.0f);
				fTempPerm40 = ((int((iTempPerm39 + (fRec21[0] == 0.0f))))?1.0f:max(max((float)1, ((0.02f * (fRec21[0] + -2.1000000000000001f)) + 1.0f)), ((0.02f * (1.0f - fRec21[0])) + 1.0f)));
				fTempPerm41 = ((int(iTempPerm39))?1.4983f:1.0f);
				fTempPerm42 = (fTempPerm41 / fTempPerm40);
			}
			if ((float(((fSlow9 * fTempPerm2) > 0.001f)) != 0.0f)) {
				fTempPerm43 = max((fSlow32 * fTempPerm42), 23.448949682462139f);
				fTempPerm44 = max(20.0f, fabsf(fTempPerm43));
				fVec6[0] = fTempPerm44;
				fTempPerm45 = (fRec22[1] + (fConst3 * fVec6[1]));
				fRec22[0] = (fTempPerm45 - floorf(fTempPerm45));
				fTempPerm46 = faustpower<2>(((2.0f * fRec22[0]) + -1.0f));
				fVec7[0] = fTempPerm46;
				fTempPerm47 = ((fTempPerm32 * (fVec7[0] - fVec7[1])) / fVec6[0]);
				fVec8[IOTA&4095] = fTempPerm47;
				fTempPerm48 = max((float)0, min((float)2047, (fConst0 * (fTempPerm34 / fTempPerm43))));
				iTempPerm49 = int(fTempPerm48);
				fTempPerm50 = floorf(fTempPerm48);
			}
			if ((float(((fSlow29 * fTempPerm17) > 0.001f)) != 0.0f) || (float(((fSlow25 * fTempPerm14) > 0.001f)) != 0.0f) || (float(((fSlow21 * fTempPerm11) > 0.001f)) != 0.0f) || (float(((fSlow17 * fTempPerm8) > 0.001f)) != 0.0f) || (float(((fSlow13 * fTempPerm5) > 0.001f)) != 0.0f) || (float(((fSlow9 * fTempPerm2) > 0.001f)) != 0.0f)) {
				fTempPerm51 = (fTempPerm23 + fTempPerm42);
				fTempPerm52 = (fTempPerm40 / fTempPerm41);
			}
			if ((float(((fSlow9 * fTempPerm2) > 0.001f)) != 0.0f)) {
				iRec24[0] = ((iRec24[1] + iVec0[1]) % int((fSlow34 * fTempPerm52)));
				fTempPerm53 = ((fRec23[1] * (1 - float(((iRec24[0] == 0) > 0)))) + (fSlow33 * fTempPerm51));
				fRec23[0] = (fTempPerm53 - floorf(fTempPerm53));
				fTempPerm54 = faustpower<2>(((2.0f * fRec23[0]) + -1.0f));
				fVec9[0] = fTempPerm54;
				fTempPerm55 = ((fSlow49 * (((fTempPerm27 * (fVec9[0] - fVec9[1])) * fVec1[1]) / fTempPerm51)) + (0.25f * (fTempPerm28 * ((fVec8[IOTA&4095] - (fVec8[(IOTA-iTempPerm49)&4095] * (fTempPerm50 + (1.0f - fTempPerm48)))) - ((fTempPerm48 - fTempPerm50) * fVec8[(IOTA-int((iTempPerm49 + 1)))&4095])))));
				fTempPerm56 = max((float)0, min((float)2047, (fConst5 / fTempPerm43)));
				iTempPerm57 = int(fTempPerm56);
				fTempPerm58 = floorf(fTempPerm56);
				fRec25[0] = ((0.999f * fRec25[1]) + (fConst4 * ((fVec8[IOTA&4095] - (fVec8[(IOTA-iTempPerm57)&4095] * (fTempPerm58 + (1.0f - fTempPerm56)))) - ((fTempPerm56 - fTempPerm58) * fVec8[(IOTA-int((iTempPerm57 + 1)))&4095]))));
				fTempPerm59 = (fRec25[0] * fTempPerm41);
			}
			if ((float(((fSlow29 * fTempPerm17) > 0.001f)) != 0.0f) || (float(((fSlow25 * fTempPerm14) > 0.001f)) != 0.0f) || (float(((fSlow21 * fTempPerm11) > 0.001f)) != 0.0f) || (float(((fSlow17 * fTempPerm8) > 0.001f)) != 0.0f) || (float(((fSlow13 * fTempPerm5) > 0.001f)) != 0.0f) || (float(((fSlow9 * fTempPerm2) > 0.001f)) != 0.0f)) {
				fTempPerm60 = min((float)1, max((float)0, (2.0f - fRec21[0])));
				fTempPerm61 = (1.0f - fTempPerm60);
			}
			if ((float(((fSlow9 * fTempPerm2) > 0.001f)) != 0.0f)) {
				fTempPerm62 = max((fSlow32 * fTempPerm40), 23.448949682462139f);
				fTempPerm63 = max(20.0f, fabsf(fTempPerm62));
				fVec10[0] = fTempPerm63;
				fTempPerm64 = (fRec26[1] + (fConst3 * fVec10[1]));
				fRec26[0] = (fTempPerm64 - floorf(fTempPerm64));
				fTempPerm65 = faustpower<2>(((2.0f * fRec26[0]) + -1.0f));
				fVec11[0] = fTempPerm65;
				fTempPerm66 = ((fTempPerm32 * (fVec11[0] - fVec11[1])) / fVec10[0]);
				fVec12[IOTA&4095] = fTempPerm66;
				fTempPerm67 = max((float)0, min((float)2047, (fConst0 * (fTempPerm34 / fTempPerm62))));
				iTempPerm68 = int(fTempPerm67);
				fTempPerm69 = floorf(fTempPerm67);
			}
			if ((float(((fSlow29 * fTempPerm17) > 0.001f)) != 0.0f) || (float(((fSlow25 * fTempPerm14) > 0.001f)) != 0.0f) || (float(((fSlow21 * fTempPerm11) > 0.001f)) != 0.0f) || (float(((fSlow17 * fTempPerm8) > 0.001f)) != 0.0f) || (float(((fSlow13 * fTempPerm5) > 0.001f)) != 0.0f) || (float(((fSlow9 * fTempPerm2) > 0.001f)) != 0.0f)) {
				fTempPerm70 = (fTempPerm40 + fTempPerm23);
			}
			if ((float(((fSlow9 * fTempPerm2) > 0.001f)) != 0.0f)) {
				iRec28[0] = ((iRec28[1] + iVec0[1]) % int((fSlow34 / fTempPerm40)));
				fTempPerm71 = ((fRec27[1] * (1 - float(((iRec28[0] == 0) > 0)))) + (fSlow33 * fTempPerm70));
				fRec27[0] = (fTempPerm71 - floorf(fTempPerm71));
				fTempPerm72 = faustpower<2>(((2.0f * fRec27[0]) + -1.0f));
				fVec13[0] = fTempPerm72;
				fTempPerm73 = ((fSlow49 * (((fTempPerm27 * (fVec13[0] - fVec13[1])) * fVec1[1]) / fTempPerm70)) + (0.25f * (fTempPerm28 * ((fVec12[IOTA&4095] - (fVec12[(IOTA-iTempPerm68)&4095] * (fTempPerm69 + (1.0f - fTempPerm67)))) - ((fTempPerm67 - fTempPerm69) * fVec12[(IOTA-int((iTempPerm68 + 1)))&4095])))));
				fTempPerm74 = max((float)0, min((float)2047, (fConst5 / fTempPerm62)));
				iTempPerm75 = int(fTempPerm74);
				fTempPerm76 = floorf(fTempPerm74);
				fRec29[0] = ((0.999f * fRec29[1]) + (fConst4 * ((fVec12[IOTA&4095] - (fVec12[(IOTA-iTempPerm75)&4095] * (fTempPerm76 + (1.0f - fTempPerm74)))) - ((fTempPerm74 - fTempPerm76) * fVec12[(IOTA-int((iTempPerm75 + 1)))&4095]))));
				fTempPerm77 = (fRec29[0] * fTempPerm40);
			}
			if ((float(((fSlow29 * fTempPerm17) > 0.001f)) != 0.0f) || (float(((fSlow25 * fTempPerm14) > 0.001f)) != 0.0f) || (float(((fSlow21 * fTempPerm11) > 0.001f)) != 0.0f) || (float(((fSlow17 * fTempPerm8) > 0.001f)) != 0.0f) || (float(((fSlow13 * fTempPerm5) > 0.001f)) != 0.0f) || (float(((fSlow9 * fTempPerm2) > 0.001f)) != 0.0f)) {
				fTempPerm78 = float((fRec21[0] < 2.0f));
				fTempPerm79 = float((fRec21[0] >= 2.0f));
				fTempPerm80 = (fTempPerm23 + 0.5f);
			}
			if ((float(((fSlow9 * fTempPerm2) > 0.001f)) != 0.0f)) {
				iRec31[0] = ((iRec31[1] + iVec0[1]) % iSlow50);
				fTempPerm81 = ((fRec30[1] * (1 - float(((iRec31[0] == 0) > 0)))) + (fSlow33 * fTempPerm80));
				fRec30[0] = (fTempPerm81 - floorf(fTempPerm81));
				fTempPerm82 = faustpower<2>(((2.0f * fRec30[0]) + -1.0f));
				fVec14[0] = fTempPerm82;
				fVec15[0] = fSlow52;
				fTempPerm83 = (fRec33[1] + (fConst3 * fVec15[1]));
				fRec33[0] = (fTempPerm83 - floorf(fTempPerm83));
				fTempPerm84 = faustpower<2>(((2.0f * fRec33[0]) + -1.0f));
				fVec16[0] = fTempPerm84;
				fTempPerm85 = (fSlow53 * (fTempPerm32 * (fVec16[0] - fVec16[1])));
				fVec17[IOTA&4095] = fTempPerm85;
				fRec32[0] = ((fVec17[IOTA&4095] + (0.999f * fRec32[1])) - ((fSlow59 * fVec17[(IOTA-iSlow55)&4095]) + (fSlow58 * fVec17[(IOTA-iSlow56)&4095])));
				fTempPerm86 = max((float)0, min((float)2047, (fSlow61 * fTempPerm34)));
				iTempPerm87 = int(fTempPerm86);
				fTempPerm88 = floorf(fTempPerm86);
				fRec14[0] = (((fRec20[0] * (((fTempPerm28 * (fVec17[IOTA&4095] - ((fVec17[(IOTA-iTempPerm87)&4095] * (fTempPerm88 + (1.0f - fTempPerm86))) + ((fTempPerm86 - fTempPerm88) * fVec17[(IOTA-int((iTempPerm87 + 1)))&4095])))) + (fSlow60 * (fRec32[0] * fTempPerm29))) + (fSlow34 * (((fTempPerm27 * (fVec14[0] - fVec14[1])) * fVec1[1]) / fTempPerm80)))) + (((fTempPerm79 * ((fConst0 * (fTempPerm73 + fTempPerm55)) + (fSlow45 * (fTempPerm29 * (fTempPerm77 + (fTempPerm59 / fTempPerm40)))))) + ((fTempPerm78 * ((fSlow45 * (fTempPerm77 * fTempPerm29)) + (fConst0 * fTempPerm73))) * (fTempPerm61 + (fTempPerm60 * ((fSlow45 * ((fTempPerm59 * fTempPerm29) / fTempPerm40)) + (fConst0 * fTempPerm55)))))) + (fTempPerm38 * (((fTempPerm28 * (fVec5[IOTA&4095] - ((fVec5[(IOTA-iTempPerm36)&4095] * (fTempPerm37 + (1.0f - fTempPerm35))) + ((fTempPerm35 - fTempPerm37) * fVec5[(IOTA-int((iTempPerm36 + 1)))&4095])))) + (fSlow45 * (fRec18[0] * fTempPerm29))) + (fSlow34 * (((fTempPerm27 * (fVec2[0] - fVec2[1])) * fVec1[1]) / fTempPerm24)))))) - (((fTempPerm22 * fRec14[2]) + (2.0f * (fTempPerm21 * fRec14[1]))) / fTempPerm20));
				fRec13[0] = ((((fRec14[1] + (0.5f * fRec14[0])) + (0.5f * fRec14[2])) - ((fTempPerm22 * fRec13[2]) + (2.0f * (fTempPerm21 * fRec13[1])))) / fTempPerm20);
				fTempPerm89 = (fSlow9 * ((fTempPerm2 * ((fRec13[1] + (0.5f * fRec13[0])) + (0.5f * fRec13[2]))) / fTempPerm20));
			}
			if ((float(((fSlow13 * fTempPerm5) > 0.001f)) != 0.0f)) {
				iRec37[0] = ((iRec37[1] + iVec0[1]) % iSlow65);
				fTempPerm90 = ((fRec36[1] * (1 - float(((iRec37[0] == 0) > 0)))) + (fSlow63 * fTempPerm24));
				fRec36[0] = (fTempPerm90 - floorf(fTempPerm90));
				fTempPerm91 = faustpower<2>(((2.0f * fRec36[0]) + -1.0f));
				fVec18[0] = fTempPerm91;
				fVec19[0] = fSlow67;
				fTempPerm92 = (fRec39[1] + (fConst3 * fVec19[1]));
				fRec39[0] = (fTempPerm92 - floorf(fTempPerm92));
				fTempPerm93 = faustpower<2>(((2.0f * fRec39[0]) + -1.0f));
				fVec20[0] = fTempPerm93;
				fTempPerm94 = (fSlow68 * (fTempPerm32 * (fVec20[0] - fVec20[1])));
				fVec21[IOTA&4095] = fTempPerm94;
				fRec38[0] = ((fVec21[IOTA&4095] + (0.999f * fRec38[1])) - ((fSlow74 * fVec21[(IOTA-iSlow70)&4095]) + (fSlow73 * fVec21[(IOTA-iSlow71)&4095])));
				fTempPerm95 = max((float)0, min((float)2047, (fSlow76 * fTempPerm34)));
				iTempPerm96 = int(fTempPerm95);
				fTempPerm97 = floorf(fTempPerm95);
				fTempPerm98 = max((fSlow62 * fTempPerm42), 23.448949682462139f);
				fTempPerm99 = max(20.0f, fabsf(fTempPerm98));
				fVec22[0] = fTempPerm99;
				fTempPerm100 = (fRec40[1] + (fConst3 * fVec22[1]));
				fRec40[0] = (fTempPerm100 - floorf(fTempPerm100));
				fTempPerm101 = faustpower<2>(((2.0f * fRec40[0]) + -1.0f));
				fVec23[0] = fTempPerm101;
				fTempPerm102 = ((fTempPerm32 * (fVec23[0] - fVec23[1])) / fVec22[0]);
				fVec24[IOTA&4095] = fTempPerm102;
				fTempPerm103 = max((float)0, min((float)2047, (fConst0 * (fTempPerm34 / fTempPerm98))));
				iTempPerm104 = int(fTempPerm103);
				fTempPerm105 = floorf(fTempPerm103);
				iRec42[0] = ((iRec42[1] + iVec0[1]) % int((fSlow64 * fTempPerm52)));
				fTempPerm106 = ((fRec41[1] * (1 - float(((iRec42[0] == 0) > 0)))) + (fSlow63 * fTempPerm51));
				fRec41[0] = (fTempPerm106 - floorf(fTempPerm106));
				fTempPerm107 = faustpower<2>(((2.0f * fRec41[0]) + -1.0f));
				fVec25[0] = fTempPerm107;
				fTempPerm108 = ((fSlow77 * (((fTempPerm27 * (fVec25[0] - fVec25[1])) * fVec1[1]) / fTempPerm51)) + (0.25f * (fTempPerm28 * ((fVec24[IOTA&4095] - (fVec24[(IOTA-iTempPerm104)&4095] * (fTempPerm105 + (1.0f - fTempPerm103)))) - ((fTempPerm103 - fTempPerm105) * fVec24[(IOTA-int((iTempPerm104 + 1)))&4095])))));
				fTempPerm109 = max((float)0, min((float)2047, (fConst5 / fTempPerm98)));
				iTempPerm110 = int(fTempPerm109);
				fTempPerm111 = floorf(fTempPerm109);
				fRec43[0] = ((0.999f * fRec43[1]) + (fConst4 * ((fVec24[IOTA&4095] - (fVec24[(IOTA-iTempPerm110)&4095] * (fTempPerm111 + (1.0f - fTempPerm109)))) - ((fTempPerm109 - fTempPerm111) * fVec24[(IOTA-int((iTempPerm110 + 1)))&4095]))));
				fTempPerm112 = (fRec43[0] * fTempPerm41);
				fTempPerm113 = max((fSlow62 * fTempPerm40), 23.448949682462139f);
				fTempPerm114 = max(20.0f, fabsf(fTempPerm113));
				fVec26[0] = fTempPerm114;
				fTempPerm115 = (fRec44[1] + (fConst3 * fVec26[1]));
				fRec44[0] = (fTempPerm115 - floorf(fTempPerm115));
				fTempPerm116 = faustpower<2>(((2.0f * fRec44[0]) + -1.0f));
				fVec27[0] = fTempPerm116;
				fTempPerm117 = ((fTempPerm32 * (fVec27[0] - fVec27[1])) / fVec26[0]);
				fVec28[IOTA&4095] = fTempPerm117;
				fTempPerm118 = max((float)0, min((float)2047, (fConst0 * (fTempPerm34 / fTempPerm113))));
				iTempPerm119 = int(fTempPerm118);
				fTempPerm120 = floorf(fTempPerm118);
				iRec46[0] = ((iRec46[1] + iVec0[1]) % int((fSlow64 / fTempPerm40)));
				fTempPerm121 = ((fRec45[1] * (1 - float(((iRec46[0] == 0) > 0)))) + (fSlow63 * fTempPerm70));
				fRec45[0] = (fTempPerm121 - floorf(fTempPerm121));
				fTempPerm122 = faustpower<2>(((2.0f * fRec45[0]) + -1.0f));
				fVec29[0] = fTempPerm122;
				fTempPerm123 = ((fSlow77 * (((fTempPerm27 * (fVec29[0] - fVec29[1])) * fVec1[1]) / fTempPerm70)) + (0.25f * (fTempPerm28 * ((fVec28[IOTA&4095] - (fVec28[(IOTA-iTempPerm119)&4095] * (fTempPerm120 + (1.0f - fTempPerm118)))) - ((fTempPerm118 - fTempPerm120) * fVec28[(IOTA-int((iTempPerm119 + 1)))&4095])))));
				fTempPerm124 = max((float)0, min((float)2047, (fConst5 / fTempPerm113)));
				iTempPerm125 = int(fTempPerm124);
				fTempPerm126 = floorf(fTempPerm124);
				fRec47[0] = ((0.999f * fRec47[1]) + (fConst4 * ((fVec28[IOTA&4095] - (fVec28[(IOTA-iTempPerm125)&4095] * (fTempPerm126 + (1.0f - fTempPerm124)))) - ((fTempPerm124 - fTempPerm126) * fVec28[(IOTA-int((iTempPerm125 + 1)))&4095]))));
				fTempPerm127 = (fRec47[0] * fTempPerm40);
				iRec49[0] = ((iRec49[1] + iVec0[1]) % iSlow78);
				fTempPerm128 = ((fRec48[1] * (1 - float(((iRec49[0] == 0) > 0)))) + (fSlow63 * fTempPerm80));
				fRec48[0] = (fTempPerm128 - floorf(fTempPerm128));
				fTempPerm129 = faustpower<2>(((2.0f * fRec48[0]) + -1.0f));
				fVec30[0] = fTempPerm129;
				fVec31[0] = fSlow80;
				fTempPerm130 = (fRec51[1] + (fConst3 * fVec31[1]));
				fRec51[0] = (fTempPerm130 - floorf(fTempPerm130));
				fTempPerm131 = faustpower<2>(((2.0f * fRec51[0]) + -1.0f));
				fVec32[0] = fTempPerm131;
				fTempPerm132 = (fSlow81 * (fTempPerm32 * (fVec32[0] - fVec32[1])));
				fVec33[IOTA&4095] = fTempPerm132;
				fRec50[0] = ((fVec33[IOTA&4095] + (0.999f * fRec50[1])) - ((fSlow87 * fVec33[(IOTA-iSlow83)&4095]) + (fSlow86 * fVec33[(IOTA-iSlow84)&4095])));
				fTempPerm133 = max((float)0, min((float)2047, (fSlow89 * fTempPerm34)));
				iTempPerm134 = int(fTempPerm133);
				fTempPerm135 = floorf(fTempPerm133);
				fRec35[0] = (((fRec20[0] * (((fTempPerm28 * (fVec33[IOTA&4095] - ((fVec33[(IOTA-iTempPerm134)&4095] * (fTempPerm135 + (1.0f - fTempPerm133))) + ((fTempPerm133 - fTempPerm135) * fVec33[(IOTA-int((iTempPerm134 + 1)))&4095])))) + (fSlow88 * (fRec50[0] * fTempPerm29))) + (fSlow64 * (((fTempPerm27 * (fVec30[0] - fVec30[1])) * fVec1[1]) / fTempPerm80)))) + (((fTempPerm79 * ((fConst0 * (fTempPerm123 + fTempPerm108)) + (fSlow75 * (fTempPerm29 * (fTempPerm127 + (fTempPerm112 / fTempPerm40)))))) + ((fTempPerm78 * ((fSlow75 * (fTempPerm127 * fTempPerm29)) + (fConst0 * fTempPerm123))) * (fTempPerm61 + (fTempPerm60 * ((fSlow75 * ((fTempPerm112 * fTempPerm29) / fTempPerm40)) + (fConst0 * fTempPerm108)))))) + (fTempPerm38 * (((fTempPerm28 * (fVec21[IOTA&4095] - ((fVec21[(IOTA-iTempPerm96)&4095] * (fTempPerm97 + (1.0f - fTempPerm95))) + ((fTempPerm95 - fTempPerm97) * fVec21[(IOTA-int((iTempPerm96 + 1)))&4095])))) + (fSlow75 * (fRec38[0] * fTempPerm29))) + (fSlow64 * (((fTempPerm27 * (fVec18[0] - fVec18[1])) * fVec1[1]) / fTempPerm24)))))) - (((fTempPerm22 * fRec35[2]) + (2.0f * (fTempPerm21 * fRec35[1]))) / fTempPerm20));
				fRec34[0] = ((((fRec35[1] + (0.5f * fRec35[0])) + (0.5f * fRec35[2])) - ((fTempPerm22 * fRec34[2]) + (2.0f * (fTempPerm21 * fRec34[1])))) / fTempPerm20);
				fTempPerm136 = (fSlow13 * ((fTempPerm5 * ((fRec34[1] + (0.5f * fRec34[0])) + (0.5f * fRec34[2]))) / fTempPerm20));
			}
			if ((float(((fSlow17 * fTempPerm8) > 0.001f)) != 0.0f)) {
				iRec55[0] = ((iRec55[1] + iVec0[1]) % iSlow93);
				fTempPerm137 = ((fRec54[1] * (1 - float(((iRec55[0] == 0) > 0)))) + (fSlow91 * fTempPerm24));
				fRec54[0] = (fTempPerm137 - floorf(fTempPerm137));
				fTempPerm138 = faustpower<2>(((2.0f * fRec54[0]) + -1.0f));
				fVec34[0] = fTempPerm138;
				fVec35[0] = fSlow95;
				fTempPerm139 = (fRec57[1] + (fConst3 * fVec35[1]));
				fRec57[0] = (fTempPerm139 - floorf(fTempPerm139));
				fTempPerm140 = faustpower<2>(((2.0f * fRec57[0]) + -1.0f));
				fVec36[0] = fTempPerm140;
				fTempPerm141 = (fSlow96 * (fTempPerm32 * (fVec36[0] - fVec36[1])));
				fVec37[IOTA&4095] = fTempPerm141;
				fRec56[0] = ((fVec37[IOTA&4095] + (0.999f * fRec56[1])) - ((fSlow102 * fVec37[(IOTA-iSlow98)&4095]) + (fSlow101 * fVec37[(IOTA-iSlow99)&4095])));
				fTempPerm142 = max((float)0, min((float)2047, (fSlow104 * fTempPerm34)));
				iTempPerm143 = int(fTempPerm142);
				fTempPerm144 = floorf(fTempPerm142);
				fTempPerm145 = max((fSlow90 * fTempPerm42), 23.448949682462139f);
				fTempPerm146 = max(20.0f, fabsf(fTempPerm145));
				fVec38[0] = fTempPerm146;
				fTempPerm147 = (fRec58[1] + (fConst3 * fVec38[1]));
				fRec58[0] = (fTempPerm147 - floorf(fTempPerm147));
				fTempPerm148 = faustpower<2>(((2.0f * fRec58[0]) + -1.0f));
				fVec39[0] = fTempPerm148;
				fTempPerm149 = ((fTempPerm32 * (fVec39[0] - fVec39[1])) / fVec38[0]);
				fVec40[IOTA&4095] = fTempPerm149;
				fTempPerm150 = max((float)0, min((float)2047, (fConst0 * (fTempPerm34 / fTempPerm145))));
				iTempPerm151 = int(fTempPerm150);
				fTempPerm152 = floorf(fTempPerm150);
				iRec60[0] = ((iRec60[1] + iVec0[1]) % int((fSlow92 * fTempPerm52)));
				fTempPerm153 = ((fRec59[1] * (1 - float(((iRec60[0] == 0) > 0)))) + (fSlow91 * fTempPerm51));
				fRec59[0] = (fTempPerm153 - floorf(fTempPerm153));
				fTempPerm154 = faustpower<2>(((2.0f * fRec59[0]) + -1.0f));
				fVec41[0] = fTempPerm154;
				fTempPerm155 = ((fSlow105 * (((fTempPerm27 * (fVec41[0] - fVec41[1])) * fVec1[1]) / fTempPerm51)) + (0.25f * (fTempPerm28 * ((fVec40[IOTA&4095] - (fVec40[(IOTA-iTempPerm151)&4095] * (fTempPerm152 + (1.0f - fTempPerm150)))) - ((fTempPerm150 - fTempPerm152) * fVec40[(IOTA-int((iTempPerm151 + 1)))&4095])))));
				fTempPerm156 = max((float)0, min((float)2047, (fConst5 / fTempPerm145)));
				iTempPerm157 = int(fTempPerm156);
				fTempPerm158 = floorf(fTempPerm156);
				fRec61[0] = ((0.999f * fRec61[1]) + (fConst4 * ((fVec40[IOTA&4095] - (fVec40[(IOTA-iTempPerm157)&4095] * (fTempPerm158 + (1.0f - fTempPerm156)))) - ((fTempPerm156 - fTempPerm158) * fVec40[(IOTA-int((iTempPerm157 + 1)))&4095]))));
				fTempPerm159 = (fRec61[0] * fTempPerm41);
				fTempPerm160 = max((fSlow90 * fTempPerm40), 23.448949682462139f);
				fTempPerm161 = max(20.0f, fabsf(fTempPerm160));
				fVec42[0] = fTempPerm161;
				fTempPerm162 = (fRec62[1] + (fConst3 * fVec42[1]));
				fRec62[0] = (fTempPerm162 - floorf(fTempPerm162));
				fTempPerm163 = faustpower<2>(((2.0f * fRec62[0]) + -1.0f));
				fVec43[0] = fTempPerm163;
				fTempPerm164 = ((fTempPerm32 * (fVec43[0] - fVec43[1])) / fVec42[0]);
				fVec44[IOTA&4095] = fTempPerm164;
				fTempPerm165 = max((float)0, min((float)2047, (fConst0 * (fTempPerm34 / fTempPerm160))));
				iTempPerm166 = int(fTempPerm165);
				fTempPerm167 = floorf(fTempPerm165);
				iRec64[0] = ((iRec64[1] + iVec0[1]) % int((fSlow92 / fTempPerm40)));
				fTempPerm168 = ((fRec63[1] * (1 - float(((iRec64[0] == 0) > 0)))) + (fSlow91 * fTempPerm70));
				fRec63[0] = (fTempPerm168 - floorf(fTempPerm168));
				fTempPerm169 = faustpower<2>(((2.0f * fRec63[0]) + -1.0f));
				fVec45[0] = fTempPerm169;
				fTempPerm170 = ((fSlow105 * (((fTempPerm27 * (fVec45[0] - fVec45[1])) * fVec1[1]) / fTempPerm70)) + (0.25f * (fTempPerm28 * ((fVec44[IOTA&4095] - (fVec44[(IOTA-iTempPerm166)&4095] * (fTempPerm167 + (1.0f - fTempPerm165)))) - ((fTempPerm165 - fTempPerm167) * fVec44[(IOTA-int((iTempPerm166 + 1)))&4095])))));
				fTempPerm171 = max((float)0, min((float)2047, (fConst5 / fTempPerm160)));
				iTempPerm172 = int(fTempPerm171);
				fTempPerm173 = floorf(fTempPerm171);
				fRec65[0] = ((0.999f * fRec65[1]) + (fConst4 * ((fVec44[IOTA&4095] - (fVec44[(IOTA-iTempPerm172)&4095] * (fTempPerm173 + (1.0f - fTempPerm171)))) - ((fTempPerm171 - fTempPerm173) * fVec44[(IOTA-int((iTempPerm172 + 1)))&4095]))));
				fTempPerm174 = (fRec65[0] * fTempPerm40);
				iRec67[0] = ((iRec67[1] + iVec0[1]) % iSlow106);
				fTempPerm175 = ((fRec66[1] * (1 - float(((iRec67[0] == 0) > 0)))) + (fSlow91 * fTempPerm80));
				fRec66[0] = (fTempPerm175 - floorf(fTempPerm175));
				fTempPerm176 = faustpower<2>(((2.0f * fRec66[0]) + -1.0f));
				fVec46[0] = fTempPerm176;
				fVec47[0] = fSlow108;
				fTempPerm177 = (fRec69[1] + (fConst3 * fVec47[1]));
				fRec69[0] = (fTempPerm177 - floorf(fTempPerm177));
				fTempPerm178 = faustpower<2>(((2.0f * fRec69[0]) + -1.0f));
				fVec48[0] = fTempPerm178;
				fTempPerm179 = (fSlow109 * (fTempPerm32 * (fVec48[0] - fVec48[1])));
				fVec49[IOTA&4095] = fTempPerm179;
				fRec68[0] = ((fVec49[IOTA&4095] + (0.999f * fRec68[1])) - ((fSlow115 * fVec49[(IOTA-iSlow111)&4095]) + (fSlow114 * fVec49[(IOTA-iSlow112)&4095])));
				fTempPerm180 = max((float)0, min((float)2047, (fSlow117 * fTempPerm34)));
				iTempPerm181 = int(fTempPerm180);
				fTempPerm182 = floorf(fTempPerm180);
				fRec53[0] = (((fRec20[0] * (((fTempPerm28 * (fVec49[IOTA&4095] - ((fVec49[(IOTA-iTempPerm181)&4095] * (fTempPerm182 + (1.0f - fTempPerm180))) + ((fTempPerm180 - fTempPerm182) * fVec49[(IOTA-int((iTempPerm181 + 1)))&4095])))) + (fSlow116 * (fRec68[0] * fTempPerm29))) + (fSlow92 * (((fTempPerm27 * (fVec46[0] - fVec46[1])) * fVec1[1]) / fTempPerm80)))) + (((fTempPerm79 * ((fConst0 * (fTempPerm170 + fTempPerm155)) + (fSlow103 * (fTempPerm29 * (fTempPerm174 + (fTempPerm159 / fTempPerm40)))))) + ((fTempPerm78 * ((fSlow103 * (fTempPerm174 * fTempPerm29)) + (fConst0 * fTempPerm170))) * (fTempPerm61 + (fTempPerm60 * ((fSlow103 * ((fTempPerm159 * fTempPerm29) / fTempPerm40)) + (fConst0 * fTempPerm155)))))) + (fTempPerm38 * (((fTempPerm28 * (fVec37[IOTA&4095] - ((fVec37[(IOTA-iTempPerm143)&4095] * (fTempPerm144 + (1.0f - fTempPerm142))) + ((fTempPerm142 - fTempPerm144) * fVec37[(IOTA-int((iTempPerm143 + 1)))&4095])))) + (fSlow103 * (fRec56[0] * fTempPerm29))) + (fSlow92 * (((fTempPerm27 * (fVec34[0] - fVec34[1])) * fVec1[1]) / fTempPerm24)))))) - (((fTempPerm22 * fRec53[2]) + (2.0f * (fTempPerm21 * fRec53[1]))) / fTempPerm20));
				fRec52[0] = ((((fRec53[1] + (0.5f * fRec53[0])) + (0.5f * fRec53[2])) - ((fTempPerm22 * fRec52[2]) + (2.0f * (fTempPerm21 * fRec52[1])))) / fTempPerm20);
				fTempPerm183 = (fSlow17 * ((fTempPerm8 * ((fRec52[1] + (0.5f * fRec52[0])) + (0.5f * fRec52[2]))) / fTempPerm20));
			}
			if ((float(((fSlow21 * fTempPerm11) > 0.001f)) != 0.0f)) {
				iRec73[0] = ((iRec73[1] + iVec0[1]) % iSlow121);
				fTempPerm184 = ((fRec72[1] * (1 - float(((iRec73[0] == 0) > 0)))) + (fSlow119 * fTempPerm24));
				fRec72[0] = (fTempPerm184 - floorf(fTempPerm184));
				fTempPerm185 = faustpower<2>(((2.0f * fRec72[0]) + -1.0f));
				fVec50[0] = fTempPerm185;
				fVec51[0] = fSlow123;
				fTempPerm186 = (fRec75[1] + (fConst3 * fVec51[1]));
				fRec75[0] = (fTempPerm186 - floorf(fTempPerm186));
				fTempPerm187 = faustpower<2>(((2.0f * fRec75[0]) + -1.0f));
				fVec52[0] = fTempPerm187;
				fTempPerm188 = (fSlow124 * (fTempPerm32 * (fVec52[0] - fVec52[1])));
				fVec53[IOTA&4095] = fTempPerm188;
				fRec74[0] = ((fVec53[IOTA&4095] + (0.999f * fRec74[1])) - ((fSlow130 * fVec53[(IOTA-iSlow126)&4095]) + (fSlow129 * fVec53[(IOTA-iSlow127)&4095])));
				fTempPerm189 = max((float)0, min((float)2047, (fSlow132 * fTempPerm34)));
				iTempPerm190 = int(fTempPerm189);
				fTempPerm191 = floorf(fTempPerm189);
				fTempPerm192 = max((fSlow118 * fTempPerm42), 23.448949682462139f);
				fTempPerm193 = max(20.0f, fabsf(fTempPerm192));
				fVec54[0] = fTempPerm193;
				fTempPerm194 = (fRec76[1] + (fConst3 * fVec54[1]));
				fRec76[0] = (fTempPerm194 - floorf(fTempPerm194));
				fTempPerm195 = faustpower<2>(((2.0f * fRec76[0]) + -1.0f));
				fVec55[0] = fTempPerm195;
				fTempPerm196 = ((fTempPerm32 * (fVec55[0] - fVec55[1])) / fVec54[0]);
				fVec56[IOTA&4095] = fTempPerm196;
				fTempPerm197 = max((float)0, min((float)2047, (fConst0 * (fTempPerm34 / fTempPerm192))));
				iTempPerm198 = int(fTempPerm197);
				fTempPerm199 = floorf(fTempPerm197);
				iRec78[0] = ((iRec78[1] + iVec0[1]) % int((fSlow120 * fTempPerm52)));
				fTempPerm200 = ((fRec77[1] * (1 - float(((iRec78[0] == 0) > 0)))) + (fSlow119 * fTempPerm51));
				fRec77[0] = (fTempPerm200 - floorf(fTempPerm200));
				fTempPerm201 = faustpower<2>(((2.0f * fRec77[0]) + -1.0f));
				fVec57[0] = fTempPerm201;
				fTempPerm202 = ((fSlow133 * (((fTempPerm27 * (fVec57[0] - fVec57[1])) * fVec1[1]) / fTempPerm51)) + (0.25f * (fTempPerm28 * ((fVec56[IOTA&4095] - (fVec56[(IOTA-iTempPerm198)&4095] * (fTempPerm199 + (1.0f - fTempPerm197)))) - ((fTempPerm197 - fTempPerm199) * fVec56[(IOTA-int((iTempPerm198 + 1)))&4095])))));
				fTempPerm203 = max((float)0, min((float)2047, (fConst5 / fTempPerm192)));
				iTempPerm204 = int(fTempPerm203);
				fTempPerm205 = floorf(fTempPerm203);
				fRec79[0] = ((0.999f * fRec79[1]) + (fConst4 * ((fVec56[IOTA&4095] - (fVec56[(IOTA-iTempPerm204)&4095] * (fTempPerm205 + (1.0f - fTempPerm203)))) - ((fTempPerm203 - fTempPerm205) * fVec56[(IOTA-int((iTempPerm204 + 1)))&4095]))));
				fTempPerm206 = (fRec79[0] * fTempPerm41);
				fTempPerm207 = max((fSlow118 * fTempPerm40), 23.448949682462139f);
				fTempPerm208 = max(20.0f, fabsf(fTempPerm207));
				fVec58[0] = fTempPerm208;
				fTempPerm209 = (fRec80[1] + (fConst3 * fVec58[1]));
				fRec80[0] = (fTempPerm209 - floorf(fTempPerm209));
				fTempPerm210 = faustpower<2>(((2.0f * fRec80[0]) + -1.0f));
				fVec59[0] = fTempPerm210;
				fTempPerm211 = ((fTempPerm32 * (fVec59[0] - fVec59[1])) / fVec58[0]);
				fVec60[IOTA&4095] = fTempPerm211;
				fTempPerm212 = max((float)0, min((float)2047, (fConst0 * (fTempPerm34 / fTempPerm207))));
				iTempPerm213 = int(fTempPerm212);
				fTempPerm214 = floorf(fTempPerm212);
				iRec82[0] = ((iRec82[1] + iVec0[1]) % int((fSlow120 / fTempPerm40)));
				fTempPerm215 = ((fRec81[1] * (1 - float(((iRec82[0] == 0) > 0)))) + (fSlow119 * fTempPerm70));
				fRec81[0] = (fTempPerm215 - floorf(fTempPerm215));
				fTempPerm216 = faustpower<2>(((2.0f * fRec81[0]) + -1.0f));
				fVec61[0] = fTempPerm216;
				fTempPerm217 = ((fSlow133 * (((fTempPerm27 * (fVec61[0] - fVec61[1])) * fVec1[1]) / fTempPerm70)) + (0.25f * (fTempPerm28 * ((fVec60[IOTA&4095] - (fVec60[(IOTA-iTempPerm213)&4095] * (fTempPerm214 + (1.0f - fTempPerm212)))) - ((fTempPerm212 - fTempPerm214) * fVec60[(IOTA-int((iTempPerm213 + 1)))&4095])))));
				fTempPerm218 = max((float)0, min((float)2047, (fConst5 / fTempPerm207)));
				iTempPerm219 = int(fTempPerm218);
				fTempPerm220 = floorf(fTempPerm218);
				fRec83[0] = ((0.999f * fRec83[1]) + (fConst4 * ((fVec60[IOTA&4095] - (fVec60[(IOTA-iTempPerm219)&4095] * (fTempPerm220 + (1.0f - fTempPerm218)))) - ((fTempPerm218 - fTempPerm220) * fVec60[(IOTA-int((iTempPerm219 + 1)))&4095]))));
				fTempPerm221 = (fRec83[0] * fTempPerm40);
				iRec85[0] = ((iRec85[1] + iVec0[1]) % iSlow134);
				fTempPerm222 = ((fRec84[1] * (1 - float(((iRec85[0] == 0) > 0)))) + (fSlow119 * fTempPerm80));
				fRec84[0] = (fTempPerm222 - floorf(fTempPerm222));
				fTempPerm223 = faustpower<2>(((2.0f * fRec84[0]) + -1.0f));
				fVec62[0] = fTempPerm223;
				fVec63[0] = fSlow136;
				fTempPerm224 = (fRec87[1] + (fConst3 * fVec63[1]));
				fRec87[0] = (fTempPerm224 - floorf(fTempPerm224));
				fTempPerm225 = faustpower<2>(((2.0f * fRec87[0]) + -1.0f));
				fVec64[0] = fTempPerm225;
				fTempPerm226 = (fSlow137 * (fTempPerm32 * (fVec64[0] - fVec64[1])));
				fVec65[IOTA&4095] = fTempPerm226;
				fRec86[0] = ((fVec65[IOTA&4095] + (0.999f * fRec86[1])) - ((fSlow143 * fVec65[(IOTA-iSlow139)&4095]) + (fSlow142 * fVec65[(IOTA-iSlow140)&4095])));
				fTempPerm227 = max((float)0, min((float)2047, (fSlow145 * fTempPerm34)));
				iTempPerm228 = int(fTempPerm227);
				fTempPerm229 = floorf(fTempPerm227);
				fRec71[0] = (((fRec20[0] * (((fTempPerm28 * (fVec65[IOTA&4095] - ((fVec65[(IOTA-iTempPerm228)&4095] * (fTempPerm229 + (1.0f - fTempPerm227))) + ((fTempPerm227 - fTempPerm229) * fVec65[(IOTA-int((iTempPerm228 + 1)))&4095])))) + (fSlow144 * (fRec86[0] * fTempPerm29))) + (fSlow120 * (((fTempPerm27 * (fVec62[0] - fVec62[1])) * fVec1[1]) / fTempPerm80)))) + (((fTempPerm79 * ((fConst0 * (fTempPerm217 + fTempPerm202)) + (fSlow131 * (fTempPerm29 * (fTempPerm221 + (fTempPerm206 / fTempPerm40)))))) + ((fTempPerm78 * ((fSlow131 * (fTempPerm221 * fTempPerm29)) + (fConst0 * fTempPerm217))) * (fTempPerm61 + (fTempPerm60 * ((fSlow131 * ((fTempPerm206 * fTempPerm29) / fTempPerm40)) + (fConst0 * fTempPerm202)))))) + (fTempPerm38 * (((fTempPerm28 * (fVec53[IOTA&4095] - ((fVec53[(IOTA-iTempPerm190)&4095] * (fTempPerm191 + (1.0f - fTempPerm189))) + ((fTempPerm189 - fTempPerm191) * fVec53[(IOTA-int((iTempPerm190 + 1)))&4095])))) + (fSlow131 * (fRec74[0] * fTempPerm29))) + (fSlow120 * (((fTempPerm27 * (fVec50[0] - fVec50[1])) * fVec1[1]) / fTempPerm24)))))) - (((fTempPerm22 * fRec71[2]) + (2.0f * (fTempPerm21 * fRec71[1]))) / fTempPerm20));
				fRec70[0] = ((((fRec71[1] + (0.5f * fRec71[0])) + (0.5f * fRec71[2])) - ((fTempPerm22 * fRec70[2]) + (2.0f * (fTempPerm21 * fRec70[1])))) / fTempPerm20);
				fTempPerm230 = (fSlow21 * ((fTempPerm11 * ((fRec70[1] + (0.5f * fRec70[0])) + (0.5f * fRec70[2]))) / fTempPerm20));
			}
			if ((float(((fSlow25 * fTempPerm14) > 0.001f)) != 0.0f)) {
				iRec91[0] = ((iRec91[1] + iVec0[1]) % iSlow149);
				fTempPerm231 = ((fRec90[1] * (1 - float(((iRec91[0] == 0) > 0)))) + (fSlow147 * fTempPerm24));
				fRec90[0] = (fTempPerm231 - floorf(fTempPerm231));
				fTempPerm232 = faustpower<2>(((2.0f * fRec90[0]) + -1.0f));
				fVec66[0] = fTempPerm232;
				fVec67[0] = fSlow151;
				fTempPerm233 = (fRec93[1] + (fConst3 * fVec67[1]));
				fRec93[0] = (fTempPerm233 - floorf(fTempPerm233));
				fTempPerm234 = faustpower<2>(((2.0f * fRec93[0]) + -1.0f));
				fVec68[0] = fTempPerm234;
				fTempPerm235 = (fSlow152 * (fTempPerm32 * (fVec68[0] - fVec68[1])));
				fVec69[IOTA&4095] = fTempPerm235;
				fRec92[0] = ((fVec69[IOTA&4095] + (0.999f * fRec92[1])) - ((fSlow158 * fVec69[(IOTA-iSlow154)&4095]) + (fSlow157 * fVec69[(IOTA-iSlow155)&4095])));
				fTempPerm236 = max((float)0, min((float)2047, (fSlow160 * fTempPerm34)));
				iTempPerm237 = int(fTempPerm236);
				fTempPerm238 = floorf(fTempPerm236);
				fTempPerm239 = max((fSlow146 * fTempPerm42), 23.448949682462139f);
				fTempPerm240 = max(20.0f, fabsf(fTempPerm239));
				fVec70[0] = fTempPerm240;
				fTempPerm241 = (fRec94[1] + (fConst3 * fVec70[1]));
				fRec94[0] = (fTempPerm241 - floorf(fTempPerm241));
				fTempPerm242 = faustpower<2>(((2.0f * fRec94[0]) + -1.0f));
				fVec71[0] = fTempPerm242;
				fTempPerm243 = ((fTempPerm32 * (fVec71[0] - fVec71[1])) / fVec70[0]);
				fVec72[IOTA&4095] = fTempPerm243;
				fTempPerm244 = max((float)0, min((float)2047, (fConst0 * (fTempPerm34 / fTempPerm239))));
				iTempPerm245 = int(fTempPerm244);
				fTempPerm246 = floorf(fTempPerm244);
				iRec96[0] = ((iRec96[1] + iVec0[1]) % int((fSlow148 * fTempPerm52)));
				fTempPerm247 = ((fRec95[1] * (1 - float(((iRec96[0] == 0) > 0)))) + (fSlow147 * fTempPerm51));
				fRec95[0] = (fTempPerm247 - floorf(fTempPerm247));
				fTempPerm248 = faustpower<2>(((2.0f * fRec95[0]) + -1.0f));
				fVec73[0] = fTempPerm248;
				fTempPerm249 = ((fSlow161 * (((fTempPerm27 * (fVec73[0] - fVec73[1])) * fVec1[1]) / fTempPerm51)) + (0.25f * (fTempPerm28 * ((fVec72[IOTA&4095] - (fVec72[(IOTA-iTempPerm245)&4095] * (fTempPerm246 + (1.0f - fTempPerm244)))) - ((fTempPerm244 - fTempPerm246) * fVec72[(IOTA-int((iTempPerm245 + 1)))&4095])))));
				fTempPerm250 = max((float)0, min((float)2047, (fConst5 / fTempPerm239)));
				iTempPerm251 = int(fTempPerm250);
				fTempPerm252 = floorf(fTempPerm250);
				fRec97[0] = ((0.999f * fRec97[1]) + (fConst4 * ((fVec72[IOTA&4095] - (fVec72[(IOTA-iTempPerm251)&4095] * (fTempPerm252 + (1.0f - fTempPerm250)))) - ((fTempPerm250 - fTempPerm252) * fVec72[(IOTA-int((iTempPerm251 + 1)))&4095]))));
				fTempPerm253 = (fRec97[0] * fTempPerm41);
				fTempPerm254 = max((fSlow146 * fTempPerm40), 23.448949682462139f);
				fTempPerm255 = max(20.0f, fabsf(fTempPerm254));
				fVec74[0] = fTempPerm255;
				fTempPerm256 = (fRec98[1] + (fConst3 * fVec74[1]));
				fRec98[0] = (fTempPerm256 - floorf(fTempPerm256));
				fTempPerm257 = faustpower<2>(((2.0f * fRec98[0]) + -1.0f));
				fVec75[0] = fTempPerm257;
				fTempPerm258 = ((fTempPerm32 * (fVec75[0] - fVec75[1])) / fVec74[0]);
				fVec76[IOTA&4095] = fTempPerm258;
				fTempPerm259 = max((float)0, min((float)2047, (fConst0 * (fTempPerm34 / fTempPerm254))));
				iTempPerm260 = int(fTempPerm259);
				fTempPerm261 = floorf(fTempPerm259);
				iRec100[0] = ((iRec100[1] + iVec0[1]) % int((fSlow148 / fTempPerm40)));
				fTempPerm262 = ((fRec99[1] * (1 - float(((iRec100[0] == 0) > 0)))) + (fSlow147 * fTempPerm70));
				fRec99[0] = (fTempPerm262 - floorf(fTempPerm262));
				fTempPerm263 = faustpower<2>(((2.0f * fRec99[0]) + -1.0f));
				fVec77[0] = fTempPerm263;
				fTempPerm264 = ((fSlow161 * (((fTempPerm27 * (fVec77[0] - fVec77[1])) * fVec1[1]) / fTempPerm70)) + (0.25f * (fTempPerm28 * ((fVec76[IOTA&4095] - (fVec76[(IOTA-iTempPerm260)&4095] * (fTempPerm261 + (1.0f - fTempPerm259)))) - ((fTempPerm259 - fTempPerm261) * fVec76[(IOTA-int((iTempPerm260 + 1)))&4095])))));
				fTempPerm265 = max((float)0, min((float)2047, (fConst5 / fTempPerm254)));
				iTempPerm266 = int(fTempPerm265);
				fTempPerm267 = floorf(fTempPerm265);
				fRec101[0] = ((0.999f * fRec101[1]) + (fConst4 * ((fVec76[IOTA&4095] - (fVec76[(IOTA-iTempPerm266)&4095] * (fTempPerm267 + (1.0f - fTempPerm265)))) - ((fTempPerm265 - fTempPerm267) * fVec76[(IOTA-int((iTempPerm266 + 1)))&4095]))));
				fTempPerm268 = (fRec101[0] * fTempPerm40);
				iRec103[0] = ((iRec103[1] + iVec0[1]) % iSlow162);
				fTempPerm269 = ((fRec102[1] * (1 - float(((iRec103[0] == 0) > 0)))) + (fSlow147 * fTempPerm80));
				fRec102[0] = (fTempPerm269 - floorf(fTempPerm269));
				fTempPerm270 = faustpower<2>(((2.0f * fRec102[0]) + -1.0f));
				fVec78[0] = fTempPerm270;
				fVec79[0] = fSlow164;
				fTempPerm271 = (fRec105[1] + (fConst3 * fVec79[1]));
				fRec105[0] = (fTempPerm271 - floorf(fTempPerm271));
				fTempPerm272 = faustpower<2>(((2.0f * fRec105[0]) + -1.0f));
				fVec80[0] = fTempPerm272;
				fTempPerm273 = (fSlow165 * (fTempPerm32 * (fVec80[0] - fVec80[1])));
				fVec81[IOTA&4095] = fTempPerm273;
				fRec104[0] = ((fVec81[IOTA&4095] + (0.999f * fRec104[1])) - ((fSlow171 * fVec81[(IOTA-iSlow167)&4095]) + (fSlow170 * fVec81[(IOTA-iSlow168)&4095])));
				fTempPerm274 = max((float)0, min((float)2047, (fSlow173 * fTempPerm34)));
				iTempPerm275 = int(fTempPerm274);
				fTempPerm276 = floorf(fTempPerm274);
				fRec89[0] = (((fRec20[0] * (((fTempPerm28 * (fVec81[IOTA&4095] - ((fVec81[(IOTA-iTempPerm275)&4095] * (fTempPerm276 + (1.0f - fTempPerm274))) + ((fTempPerm274 - fTempPerm276) * fVec81[(IOTA-int((iTempPerm275 + 1)))&4095])))) + (fSlow172 * (fRec104[0] * fTempPerm29))) + (fSlow148 * (((fTempPerm27 * (fVec78[0] - fVec78[1])) * fVec1[1]) / fTempPerm80)))) + (((fTempPerm79 * ((fConst0 * (fTempPerm264 + fTempPerm249)) + (fSlow159 * (fTempPerm29 * (fTempPerm268 + (fTempPerm253 / fTempPerm40)))))) + ((fTempPerm78 * ((fSlow159 * (fTempPerm268 * fTempPerm29)) + (fConst0 * fTempPerm264))) * (fTempPerm61 + (fTempPerm60 * ((fSlow159 * ((fTempPerm253 * fTempPerm29) / fTempPerm40)) + (fConst0 * fTempPerm249)))))) + (fTempPerm38 * (((fTempPerm28 * (fVec69[IOTA&4095] - ((fVec69[(IOTA-iTempPerm237)&4095] * (fTempPerm238 + (1.0f - fTempPerm236))) + ((fTempPerm236 - fTempPerm238) * fVec69[(IOTA-int((iTempPerm237 + 1)))&4095])))) + (fSlow159 * (fRec92[0] * fTempPerm29))) + (fSlow148 * (((fTempPerm27 * (fVec66[0] - fVec66[1])) * fVec1[1]) / fTempPerm24)))))) - (((fTempPerm22 * fRec89[2]) + (2.0f * (fTempPerm21 * fRec89[1]))) / fTempPerm20));
				fRec88[0] = ((((fRec89[1] + (0.5f * fRec89[0])) + (0.5f * fRec89[2])) - ((fTempPerm22 * fRec88[2]) + (2.0f * (fTempPerm21 * fRec88[1])))) / fTempPerm20);
				fTempPerm277 = (fSlow25 * ((fTempPerm14 * ((fRec88[1] + (0.5f * fRec88[0])) + (0.5f * fRec88[2]))) / fTempPerm20));
			}
			if ((float(((fSlow29 * fTempPerm17) > 0.001f)) != 0.0f)) {
				iRec109[0] = ((iRec109[1] + iVec0[1]) % iSlow177);
				fTempPerm278 = ((fRec108[1] * (1 - float(((iRec109[0] == 0) > 0)))) + (fSlow175 * fTempPerm24));
				fRec108[0] = (fTempPerm278 - floorf(fTempPerm278));
				fTempPerm279 = faustpower<2>(((2.0f * fRec108[0]) + -1.0f));
				fVec82[0] = fTempPerm279;
				fVec83[0] = fSlow179;
				fTempPerm280 = (fRec111[1] + (fConst3 * fVec83[1]));
				fRec111[0] = (fTempPerm280 - floorf(fTempPerm280));
				fTempPerm281 = faustpower<2>(((2.0f * fRec111[0]) + -1.0f));
				fVec84[0] = fTempPerm281;
				fTempPerm282 = (fSlow180 * (fTempPerm32 * (fVec84[0] - fVec84[1])));
				fVec85[IOTA&4095] = fTempPerm282;
				fRec110[0] = ((fVec85[IOTA&4095] + (0.999f * fRec110[1])) - ((fSlow186 * fVec85[(IOTA-iSlow182)&4095]) + (fSlow185 * fVec85[(IOTA-iSlow183)&4095])));
				fTempPerm283 = max((float)0, min((float)2047, (fSlow188 * fTempPerm34)));
				iTempPerm284 = int(fTempPerm283);
				fTempPerm285 = floorf(fTempPerm283);
				fTempPerm286 = max((fSlow174 * fTempPerm42), 23.448949682462139f);
				fTempPerm287 = max(20.0f, fabsf(fTempPerm286));
				fVec86[0] = fTempPerm287;
				fTempPerm288 = (fRec112[1] + (fConst3 * fVec86[1]));
				fRec112[0] = (fTempPerm288 - floorf(fTempPerm288));
				fTempPerm289 = faustpower<2>(((2.0f * fRec112[0]) + -1.0f));
				fVec87[0] = fTempPerm289;
				fTempPerm290 = ((fTempPerm32 * (fVec87[0] - fVec87[1])) / fVec86[0]);
				fVec88[IOTA&4095] = fTempPerm290;
				fTempPerm291 = max((float)0, min((float)2047, (fConst0 * (fTempPerm34 / fTempPerm286))));
				iTempPerm292 = int(fTempPerm291);
				fTempPerm293 = floorf(fTempPerm291);
				iRec114[0] = ((iRec114[1] + iVec0[1]) % int((fSlow176 * fTempPerm52)));
				fTempPerm294 = ((fRec113[1] * (1 - float(((iRec114[0] == 0) > 0)))) + (fSlow175 * fTempPerm51));
				fRec113[0] = (fTempPerm294 - floorf(fTempPerm294));
				fTempPerm295 = faustpower<2>(((2.0f * fRec113[0]) + -1.0f));
				fVec89[0] = fTempPerm295;
				fTempPerm296 = ((fSlow189 * (((fTempPerm27 * (fVec89[0] - fVec89[1])) * fVec1[1]) / fTempPerm51)) + (0.25f * (fTempPerm28 * ((fVec88[IOTA&4095] - (fVec88[(IOTA-iTempPerm292)&4095] * (fTempPerm293 + (1.0f - fTempPerm291)))) - ((fTempPerm291 - fTempPerm293) * fVec88[(IOTA-int((iTempPerm292 + 1)))&4095])))));
				fTempPerm297 = max((float)0, min((float)2047, (fConst5 / fTempPerm286)));
				iTempPerm298 = int(fTempPerm297);
				fTempPerm299 = floorf(fTempPerm297);
				fRec115[0] = ((0.999f * fRec115[1]) + (fConst4 * ((fVec88[IOTA&4095] - (fVec88[(IOTA-iTempPerm298)&4095] * (fTempPerm299 + (1.0f - fTempPerm297)))) - ((fTempPerm297 - fTempPerm299) * fVec88[(IOTA-int((iTempPerm298 + 1)))&4095]))));
				fTempPerm300 = (fRec115[0] * fTempPerm41);
				fTempPerm301 = max((fSlow174 * fTempPerm40), 23.448949682462139f);
				fTempPerm302 = max(20.0f, fabsf(fTempPerm301));
				fVec90[0] = fTempPerm302;
				fTempPerm303 = (fRec116[1] + (fConst3 * fVec90[1]));
				fRec116[0] = (fTempPerm303 - floorf(fTempPerm303));
				fTempPerm304 = faustpower<2>(((2.0f * fRec116[0]) + -1.0f));
				fVec91[0] = fTempPerm304;
				fTempPerm305 = ((fTempPerm32 * (fVec91[0] - fVec91[1])) / fVec90[0]);
				fVec92[IOTA&4095] = fTempPerm305;
				fTempPerm306 = max((float)0, min((float)2047, (fConst0 * (fTempPerm34 / fTempPerm301))));
				iTempPerm307 = int(fTempPerm306);
				fTempPerm308 = floorf(fTempPerm306);
				iRec118[0] = ((iRec118[1] + iVec0[1]) % int((fSlow176 / fTempPerm40)));
				fTempPerm309 = ((fRec117[1] * (1 - float(((iRec118[0] == 0) > 0)))) + (fSlow175 * fTempPerm70));
				fRec117[0] = (fTempPerm309 - floorf(fTempPerm309));
				fTempPerm310 = faustpower<2>(((2.0f * fRec117[0]) + -1.0f));
				fVec93[0] = fTempPerm310;
				fTempPerm311 = ((fSlow189 * (((fTempPerm27 * (fVec93[0] - fVec93[1])) * fVec1[1]) / fTempPerm70)) + (0.25f * (fTempPerm28 * ((fVec92[IOTA&4095] - (fVec92[(IOTA-iTempPerm307)&4095] * (fTempPerm308 + (1.0f - fTempPerm306)))) - ((fTempPerm306 - fTempPerm308) * fVec92[(IOTA-int((iTempPerm307 + 1)))&4095])))));
				fTempPerm312 = max((float)0, min((float)2047, (fConst5 / fTempPerm301)));
				iTempPerm313 = int(fTempPerm312);
				fTempPerm314 = floorf(fTempPerm312);
				fRec119[0] = ((0.999f * fRec119[1]) + (fConst4 * ((fVec92[IOTA&4095] - (fVec92[(IOTA-iTempPerm313)&4095] * (fTempPerm314 + (1.0f - fTempPerm312)))) - ((fTempPerm312 - fTempPerm314) * fVec92[(IOTA-int((iTempPerm313 + 1)))&4095]))));
				fTempPerm315 = (fRec119[0] * fTempPerm40);
				iRec121[0] = ((iRec121[1] + iVec0[1]) % iSlow190);
				fTempPerm316 = ((fRec120[1] * (1 - float(((iRec121[0] == 0) > 0)))) + (fSlow175 * fTempPerm80));
				fRec120[0] = (fTempPerm316 - floorf(fTempPerm316));
				fTempPerm317 = faustpower<2>(((2.0f * fRec120[0]) + -1.0f));
				fVec94[0] = fTempPerm317;
				fVec95[0] = fSlow192;
				fTempPerm318 = (fRec123[1] + (fConst3 * fVec95[1]));
				fRec123[0] = (fTempPerm318 - floorf(fTempPerm318));
				fTempPerm319 = faustpower<2>(((2.0f * fRec123[0]) + -1.0f));
				fVec96[0] = fTempPerm319;
				fTempPerm320 = (fSlow193 * (fTempPerm32 * (fVec96[0] - fVec96[1])));
				fVec97[IOTA&4095] = fTempPerm320;
				fRec122[0] = ((fVec97[IOTA&4095] + (0.999f * fRec122[1])) - ((fSlow199 * fVec97[(IOTA-iSlow195)&4095]) + (fSlow198 * fVec97[(IOTA-iSlow196)&4095])));
				fTempPerm321 = max((float)0, min((float)2047, (fSlow201 * fTempPerm34)));
				iTempPerm322 = int(fTempPerm321);
				fTempPerm323 = floorf(fTempPerm321);
				fRec107[0] = (((fRec20[0] * (((fTempPerm28 * (fVec97[IOTA&4095] - ((fVec97[(IOTA-iTempPerm322)&4095] * (fTempPerm323 + (1.0f - fTempPerm321))) + ((fTempPerm321 - fTempPerm323) * fVec97[(IOTA-int((iTempPerm322 + 1)))&4095])))) + (fSlow200 * (fRec122[0] * fTempPerm29))) + (fSlow176 * (((fTempPerm27 * (fVec94[0] - fVec94[1])) * fVec1[1]) / fTempPerm80)))) + (((fTempPerm79 * ((fConst0 * (fTempPerm311 + fTempPerm296)) + (fSlow187 * (fTempPerm29 * (fTempPerm315 + (fTempPerm300 / fTempPerm40)))))) + ((fTempPerm78 * ((fSlow187 * (fTempPerm315 * fTempPerm29)) + (fConst0 * fTempPerm311))) * (fTempPerm61 + (fTempPerm60 * ((fSlow187 * ((fTempPerm300 * fTempPerm29) / fTempPerm40)) + (fConst0 * fTempPerm296)))))) + (fTempPerm38 * (((fTempPerm28 * (fVec85[IOTA&4095] - ((fVec85[(IOTA-iTempPerm284)&4095] * (fTempPerm285 + (1.0f - fTempPerm283))) + ((fTempPerm283 - fTempPerm285) * fVec85[(IOTA-int((iTempPerm284 + 1)))&4095])))) + (fSlow187 * (fRec110[0] * fTempPerm29))) + (fSlow176 * (((fTempPerm27 * (fVec82[0] - fVec82[1])) * fVec1[1]) / fTempPerm24)))))) - (((fRec107[2] * fTempPerm22) + (2.0f * (fRec107[1] * fTempPerm21))) / fTempPerm20));
				fRec106[0] = ((((fRec107[1] + (0.5f * fRec107[0])) + (0.5f * fRec107[2])) - ((fTempPerm22 * fRec106[2]) + (2.0f * (fTempPerm21 * fRec106[1])))) / fTempPerm20);
				fTempPerm324 = (fSlow29 * ((fTempPerm17 * ((fRec106[1] + (0.5f * fRec106[0])) + (0.5f * fRec106[2]))) / fTempPerm20));
			}
			output0[i] = (FAUSTFLOAT)(((((fTempPerm324 + fTempPerm277) + fTempPerm230) + fTempPerm183) + fTempPerm136) + fTempPerm89);
			// post processing
			if ((float(((fSlow29 * fTempPerm17) > 0.001f)) != 0.0f)) {
				fRec106[2] = fRec106[1]; fRec106[1] = fRec106[0];
				fRec107[2] = fRec107[1]; fRec107[1] = fRec107[0];
				fRec122[1] = fRec122[0];
				fVec96[1] = fVec96[0];
				fRec123[1] = fRec123[0];
				fVec95[1] = fVec95[0];
				fVec94[1] = fVec94[0];
				fRec120[1] = fRec120[0];
				iRec121[1] = iRec121[0];
				fRec119[1] = fRec119[0];
				fVec93[1] = fVec93[0];
				fRec117[1] = fRec117[0];
				iRec118[1] = iRec118[0];
				fVec91[1] = fVec91[0];
				fRec116[1] = fRec116[0];
				fVec90[1] = fVec90[0];
				fRec115[1] = fRec115[0];
				fVec89[1] = fVec89[0];
				fRec113[1] = fRec113[0];
				iRec114[1] = iRec114[0];
				fVec87[1] = fVec87[0];
				fRec112[1] = fRec112[0];
				fVec86[1] = fVec86[0];
				fRec110[1] = fRec110[0];
				fVec84[1] = fVec84[0];
				fRec111[1] = fRec111[0];
				fVec83[1] = fVec83[0];
				fVec82[1] = fVec82[0];
				fRec108[1] = fRec108[0];
				iRec109[1] = iRec109[0];
			}
			if ((float(((fSlow25 * fTempPerm14) > 0.001f)) != 0.0f)) {
				fRec88[2] = fRec88[1]; fRec88[1] = fRec88[0];
				fRec89[2] = fRec89[1]; fRec89[1] = fRec89[0];
				fRec104[1] = fRec104[0];
				fVec80[1] = fVec80[0];
				fRec105[1] = fRec105[0];
				fVec79[1] = fVec79[0];
				fVec78[1] = fVec78[0];
				fRec102[1] = fRec102[0];
				iRec103[1] = iRec103[0];
				fRec101[1] = fRec101[0];
				fVec77[1] = fVec77[0];
				fRec99[1] = fRec99[0];
				iRec100[1] = iRec100[0];
				fVec75[1] = fVec75[0];
				fRec98[1] = fRec98[0];
				fVec74[1] = fVec74[0];
				fRec97[1] = fRec97[0];
				fVec73[1] = fVec73[0];
				fRec95[1] = fRec95[0];
				iRec96[1] = iRec96[0];
				fVec71[1] = fVec71[0];
				fRec94[1] = fRec94[0];
				fVec70[1] = fVec70[0];
				fRec92[1] = fRec92[0];
				fVec68[1] = fVec68[0];
				fRec93[1] = fRec93[0];
				fVec67[1] = fVec67[0];
				fVec66[1] = fVec66[0];
				fRec90[1] = fRec90[0];
				iRec91[1] = iRec91[0];
			}
			if ((float(((fSlow21 * fTempPerm11) > 0.001f)) != 0.0f)) {
				fRec70[2] = fRec70[1]; fRec70[1] = fRec70[0];
				fRec71[2] = fRec71[1]; fRec71[1] = fRec71[0];
				fRec86[1] = fRec86[0];
				fVec64[1] = fVec64[0];
				fRec87[1] = fRec87[0];
				fVec63[1] = fVec63[0];
				fVec62[1] = fVec62[0];
				fRec84[1] = fRec84[0];
				iRec85[1] = iRec85[0];
				fRec83[1] = fRec83[0];
				fVec61[1] = fVec61[0];
				fRec81[1] = fRec81[0];
				iRec82[1] = iRec82[0];
				fVec59[1] = fVec59[0];
				fRec80[1] = fRec80[0];
				fVec58[1] = fVec58[0];
				fRec79[1] = fRec79[0];
				fVec57[1] = fVec57[0];
				fRec77[1] = fRec77[0];
				iRec78[1] = iRec78[0];
				fVec55[1] = fVec55[0];
				fRec76[1] = fRec76[0];
				fVec54[1] = fVec54[0];
				fRec74[1] = fRec74[0];
				fVec52[1] = fVec52[0];
				fRec75[1] = fRec75[0];
				fVec51[1] = fVec51[0];
				fVec50[1] = fVec50[0];
				fRec72[1] = fRec72[0];
				iRec73[1] = iRec73[0];
			}
			if ((float(((fSlow17 * fTempPerm8) > 0.001f)) != 0.0f)) {
				fRec52[2] = fRec52[1]; fRec52[1] = fRec52[0];
				fRec53[2] = fRec53[1]; fRec53[1] = fRec53[0];
				fRec68[1] = fRec68[0];
				fVec48[1] = fVec48[0];
				fRec69[1] = fRec69[0];
				fVec47[1] = fVec47[0];
				fVec46[1] = fVec46[0];
				fRec66[1] = fRec66[0];
				iRec67[1] = iRec67[0];
				fRec65[1] = fRec65[0];
				fVec45[1] = fVec45[0];
				fRec63[1] = fRec63[0];
				iRec64[1] = iRec64[0];
				fVec43[1] = fVec43[0];
				fRec62[1] = fRec62[0];
				fVec42[1] = fVec42[0];
				fRec61[1] = fRec61[0];
				fVec41[1] = fVec41[0];
				fRec59[1] = fRec59[0];
				iRec60[1] = iRec60[0];
				fVec39[1] = fVec39[0];
				fRec58[1] = fRec58[0];
				fVec38[1] = fVec38[0];
				fRec56[1] = fRec56[0];
				fVec36[1] = fVec36[0];
				fRec57[1] = fRec57[0];
				fVec35[1] = fVec35[0];
				fVec34[1] = fVec34[0];
				fRec54[1] = fRec54[0];
				iRec55[1] = iRec55[0];
			}
			if ((float(((fSlow13 * fTempPerm5) > 0.001f)) != 0.0f)) {
				fRec34[2] = fRec34[1]; fRec34[1] = fRec34[0];
				fRec35[2] = fRec35[1]; fRec35[1] = fRec35[0];
				fRec50[1] = fRec50[0];
				fVec32[1] = fVec32[0];
				fRec51[1] = fRec51[0];
				fVec31[1] = fVec31[0];
				fVec30[1] = fVec30[0];
				fRec48[1] = fRec48[0];
				iRec49[1] = iRec49[0];
				fRec47[1] = fRec47[0];
				fVec29[1] = fVec29[0];
				fRec45[1] = fRec45[0];
				iRec46[1] = iRec46[0];
				fVec27[1] = fVec27[0];
				fRec44[1] = fRec44[0];
				fVec26[1] = fVec26[0];
				fRec43[1] = fRec43[0];
				fVec25[1] = fVec25[0];
				fRec41[1] = fRec41[0];
				iRec42[1] = iRec42[0];
				fVec23[1] = fVec23[0];
				fRec40[1] = fRec40[0];
				fVec22[1] = fVec22[0];
				fRec38[1] = fRec38[0];
				fVec20[1] = fVec20[0];
				fRec39[1] = fRec39[0];
				fVec19[1] = fVec19[0];
				fVec18[1] = fVec18[0];
				fRec36[1] = fRec36[0];
				iRec37[1] = iRec37[0];
			}
			if ((float(((fSlow9 * fTempPerm2) > 0.001f)) != 0.0f)) {
				fRec13[2] = fRec13[1]; fRec13[1] = fRec13[0];
				fRec14[2] = fRec14[1]; fRec14[1] = fRec14[0];
				fRec32[1] = fRec32[0];
				fVec16[1] = fVec16[0];
				fRec33[1] = fRec33[0];
				fVec15[1] = fVec15[0];
				fVec14[1] = fVec14[0];
				fRec30[1] = fRec30[0];
				iRec31[1] = iRec31[0];
				fRec29[1] = fRec29[0];
				fVec13[1] = fVec13[0];
				fRec27[1] = fRec27[0];
				iRec28[1] = iRec28[0];
				fVec11[1] = fVec11[0];
				fRec26[1] = fRec26[0];
				fVec10[1] = fVec10[0];
				fRec25[1] = fRec25[0];
				fVec9[1] = fVec9[0];
				fRec23[1] = fRec23[0];
				iRec24[1] = iRec24[0];
				fVec7[1] = fVec7[0];
				fRec22[1] = fRec22[0];
				fVec6[1] = fVec6[0];
			}
			if ((float(((fSlow29 * fTempPerm17) > 0.001f)) != 0.0f) || (float(((fSlow25 * fTempPerm14) > 0.001f)) != 0.0f) || (float(((fSlow21 * fTempPerm11) > 0.001f)) != 0.0f) || (float(((fSlow17 * fTempPerm8) > 0.001f)) != 0.0f) || (float(((fSlow13 * fTempPerm5) > 0.001f)) != 0.0f) || (float(((fSlow9 * fTempPerm2) > 0.001f)) != 0.0f)) {
				fRec21[1] = fRec21[0];
				fRec20[1] = fRec20[0];
			}
			if ((float(((fSlow9 * fTempPerm2) > 0.001f)) != 0.0f)) {
				fRec18[1] = fRec18[0];
			}
			IOTA = IOTA+1;
			if ((float(((fSlow9 * fTempPerm2) > 0.001f)) != 0.0f)) {
				fVec4[1] = fVec4[0];
				fRec19[1] = fRec19[0];
				fVec3[1] = fVec3[0];
				fVec2[1] = fVec2[0];
				fRec16[1] = fRec16[0];
				iRec17[1] = iRec17[0];
			}
			if ((float(((fSlow29 * fTempPerm17) > 0.001f)) != 0.0f) || (float(((fSlow25 * fTempPerm14) > 0.001f)) != 0.0f) || (float(((fSlow21 * fTempPerm11) > 0.001f)) != 0.0f) || (float(((fSlow17 * fTempPerm8) > 0.001f)) != 0.0f) || (float(((fSlow13 * fTempPerm5) > 0.001f)) != 0.0f) || (float(((fSlow9 * fTempPerm2) > 0.001f)) != 0.0f)) {
				fVec1[1] = fVec1[0];
				fRec15[1] = fRec15[0];
				fRec2[1] = fRec2[0];
			}
			fRec11[1] = fRec11[0];
			iRec12[1] = iRec12[0];
			fRec9[1] = fRec9[0];
			iRec10[1] = iRec10[0];
			fRec7[1] = fRec7[0];
			iRec8[1] = iRec8[0];
			fRec5[1] = fRec5[0];
			iRec6[1] = iRec6[0];
			fRec3[1] = fRec3[0];
			iRec4[1] = iRec4[0];
			fRec0[1] = fRec0[0];
			iRec1[1] = iRec1[0];
			iVec0[1] = iVec0[0];
		}
	}
};


