//----------------------------------------------------------
// name: "nuke"
//
// Code generated with Faust 2.11.10 (https://faust.grame.fr)
//----------------------------------------------------------

/* link with  */
#include <math.h>
#ifndef FAUSTPOWER
#define FAUSTPOWER
#include <cmath>
template <int N> inline int faustpower(int x)              { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <> 	 inline int faustpower<0>(int x)            { return 1; }
template <> 	 inline int faustpower<1>(int x)            { return x; }
template <> 	 inline int faustpower<2>(int x)            { return x*x; }
template <int N> inline float faustpower(float x)            { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <> 	 inline float faustpower<0>(float x)          { return 1; }
template <> 	 inline float faustpower<1>(float x)          { return x; }
template <> 	 inline float faustpower<2>(float x)          { return x*x; }
#endif
#include <math.h>
#include <algorithm>

#include <faust/gui/UI.h>
#include <faust/gui/meta.h>
#include <faust/dsp/dsp.h>

using std::max;
using std::min;

/********************************
	VECTOR INTRINSICS
*********************************/


/********************************
	ABSTRACT USER INTERFACE
*********************************/

#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS faust_nuke
#endif

class faust_nuke : public dsp {
  private:
	int 	iVec0[2];
	FAUSTFLOAT 	fslider0;
	float 	fRec0[2];
	float 	fConst0;
	float 	fConst1;
	float 	fTempPerm0;
	float 	fTempPerm1;
	float 	fTempPerm2;
	float 	fTempPerm3;
	float 	fTempPerm4;
	FAUSTFLOAT 	fslider1;
	float 	fRec3[2];
	float 	fTempPerm5;
	float 	fTempPerm6;
	float 	fVec1[2];
	FAUSTFLOAT 	fslider2;
	float 	fConst2;
	int 	iRec5[2];
	float 	fTempPerm7;
	float 	fRec4[2];
	float 	fTempPerm8;
	float 	fVec2[2];
	float 	fTempPerm9;
	float 	fTempPerm10;
	float 	fTempPerm11;
	float 	fVec3[2];
	float 	fTempPerm12;
	float 	fRec7[2];
	float 	fTempPerm13;
	float 	fVec4[2];
	float 	fTempPerm14;
	float 	fConst3;
	float 	fTempPerm15;
	int 	IOTA;
	float 	fVec5[4096];
	float 	fConst4;
	float 	fRec6[2];
	float 	fConst5;
	float 	fTempPerm16;
	float 	fTempPerm17;
	int 	iTempPerm18;
	float 	fTempPerm19;
	FAUSTFLOAT 	fslider3;
	float 	fRec8[2];
	float 	fTempPerm20;
	FAUSTFLOAT 	fslider4;
	float 	fRec9[2];
	int 	iTempPerm21;
	float 	fTempPerm22;
	float 	fTempPerm23;
	float 	fTempPerm24;
	float 	fTempPerm25;
	float 	fTempPerm26;
	float 	fVec6[2];
	float 	fTempPerm27;
	float 	fRec10[2];
	float 	fTempPerm28;
	float 	fVec7[2];
	float 	fTempPerm29;
	float 	fVec8[4096];
	float 	fTempPerm30;
	int 	iTempPerm31;
	float 	fTempPerm32;
	float 	fTempPerm33;
	float 	fTempPerm34;
	int 	iRec12[2];
	float 	fTempPerm35;
	float 	fRec11[2];
	float 	fTempPerm36;
	float 	fVec9[2];
	float 	fTempPerm37;
	float 	fTempPerm38;
	int 	iTempPerm39;
	float 	fTempPerm40;
	float 	fRec13[2];
	float 	fTempPerm41;
	float 	fTempPerm42;
	float 	fTempPerm43;
	float 	fTempPerm44;
	float 	fTempPerm45;
	float 	fVec10[2];
	float 	fTempPerm46;
	float 	fRec14[2];
	float 	fTempPerm47;
	float 	fVec11[2];
	float 	fTempPerm48;
	float 	fVec12[4096];
	float 	fTempPerm49;
	int 	iTempPerm50;
	float 	fTempPerm51;
	float 	fTempPerm52;
	int 	iRec16[2];
	float 	fTempPerm53;
	float 	fRec15[2];
	float 	fTempPerm54;
	float 	fVec13[2];
	float 	fTempPerm55;
	float 	fTempPerm56;
	int 	iTempPerm57;
	float 	fTempPerm58;
	float 	fRec17[2];
	float 	fTempPerm59;
	float 	fTempPerm60;
	float 	fTempPerm61;
	float 	fTempPerm62;
	float 	fConst6;
	int 	iRec19[2];
	float 	fTempPerm63;
	float 	fRec18[2];
	float 	fTempPerm64;
	float 	fVec14[2];
	float 	fVec15[2];
	float 	fTempPerm65;
	float 	fRec21[2];
	float 	fTempPerm66;
	float 	fVec16[2];
	float 	fTempPerm67;
	float 	fVec17[4096];
	float 	fRec20[2];
	float 	fConst7;
	float 	fTempPerm68;
	int 	iTempPerm69;
	float 	fTempPerm70;
	float 	fRec2[3];
	float 	fRec1[3];
	FAUSTFLOAT 	fslider5;
	FAUSTFLOAT 	fslider6;
	FAUSTFLOAT 	fslider7;
	FAUSTFLOAT 	fbutton0;
	int 	iRec23[2];
	int 	iTempPerm71;
	float 	fConst8;
	float 	fTempPerm72;
	FAUSTFLOAT 	fslider8;
	float 	fRec22[2];
	FAUSTFLOAT 	fslider9;
	FAUSTFLOAT 	fslider10;
	int 	iRec27[2];
	float 	fTempPerm73;
	float 	fRec26[2];
	float 	fTempPerm74;
	float 	fVec18[2];
	float 	fVec19[2];
	float 	fTempPerm75;
	float 	fRec29[2];
	float 	fTempPerm76;
	float 	fVec20[2];
	float 	fTempPerm77;
	float 	fVec21[4096];
	float 	fRec28[2];
	float 	fTempPerm78;
	int 	iTempPerm79;
	float 	fTempPerm80;
	float 	fTempPerm81;
	float 	fTempPerm82;
	float 	fVec22[2];
	float 	fTempPerm83;
	float 	fRec30[2];
	float 	fTempPerm84;
	float 	fVec23[2];
	float 	fTempPerm85;
	float 	fVec24[4096];
	float 	fTempPerm86;
	int 	iTempPerm87;
	float 	fTempPerm88;
	int 	iRec32[2];
	float 	fTempPerm89;
	float 	fRec31[2];
	float 	fTempPerm90;
	float 	fVec25[2];
	float 	fTempPerm91;
	float 	fTempPerm92;
	int 	iTempPerm93;
	float 	fTempPerm94;
	float 	fRec33[2];
	float 	fTempPerm95;
	float 	fTempPerm96;
	float 	fTempPerm97;
	float 	fVec26[2];
	float 	fTempPerm98;
	float 	fRec34[2];
	float 	fTempPerm99;
	float 	fVec27[2];
	float 	fTempPerm100;
	float 	fVec28[4096];
	float 	fTempPerm101;
	int 	iTempPerm102;
	float 	fTempPerm103;
	int 	iRec36[2];
	float 	fTempPerm104;
	float 	fRec35[2];
	float 	fTempPerm105;
	float 	fVec29[2];
	float 	fTempPerm106;
	float 	fTempPerm107;
	int 	iTempPerm108;
	float 	fTempPerm109;
	float 	fRec37[2];
	float 	fTempPerm110;
	int 	iRec39[2];
	float 	fTempPerm111;
	float 	fRec38[2];
	float 	fTempPerm112;
	float 	fVec30[2];
	float 	fVec31[2];
	float 	fTempPerm113;
	float 	fRec41[2];
	float 	fTempPerm114;
	float 	fVec32[2];
	float 	fTempPerm115;
	float 	fVec33[4096];
	float 	fRec40[2];
	float 	fTempPerm116;
	int 	iTempPerm117;
	float 	fTempPerm118;
	float 	fRec25[3];
	float 	fRec24[3];
	FAUSTFLOAT 	fbutton1;
	int 	iRec43[2];
	int 	iTempPerm119;
	float 	fTempPerm120;
	float 	fRec42[2];
	FAUSTFLOAT 	fslider11;
	FAUSTFLOAT 	fslider12;
	int 	iRec47[2];
	float 	fTempPerm121;
	float 	fRec46[2];
	float 	fTempPerm122;
	float 	fVec34[2];
	float 	fVec35[2];
	float 	fTempPerm123;
	float 	fRec49[2];
	float 	fTempPerm124;
	float 	fVec36[2];
	float 	fTempPerm125;
	float 	fVec37[4096];
	float 	fRec48[2];
	float 	fTempPerm126;
	int 	iTempPerm127;
	float 	fTempPerm128;
	float 	fTempPerm129;
	float 	fTempPerm130;
	float 	fVec38[2];
	float 	fTempPerm131;
	float 	fRec50[2];
	float 	fTempPerm132;
	float 	fVec39[2];
	float 	fTempPerm133;
	float 	fVec40[4096];
	float 	fTempPerm134;
	int 	iTempPerm135;
	float 	fTempPerm136;
	int 	iRec52[2];
	float 	fTempPerm137;
	float 	fRec51[2];
	float 	fTempPerm138;
	float 	fVec41[2];
	float 	fTempPerm139;
	float 	fTempPerm140;
	int 	iTempPerm141;
	float 	fTempPerm142;
	float 	fRec53[2];
	float 	fTempPerm143;
	float 	fTempPerm144;
	float 	fTempPerm145;
	float 	fVec42[2];
	float 	fTempPerm146;
	float 	fRec54[2];
	float 	fTempPerm147;
	float 	fVec43[2];
	float 	fTempPerm148;
	float 	fVec44[4096];
	float 	fTempPerm149;
	int 	iTempPerm150;
	float 	fTempPerm151;
	int 	iRec56[2];
	float 	fTempPerm152;
	float 	fRec55[2];
	float 	fTempPerm153;
	float 	fVec45[2];
	float 	fTempPerm154;
	float 	fTempPerm155;
	int 	iTempPerm156;
	float 	fTempPerm157;
	float 	fRec57[2];
	float 	fTempPerm158;
	int 	iRec59[2];
	float 	fTempPerm159;
	float 	fRec58[2];
	float 	fTempPerm160;
	float 	fVec46[2];
	float 	fVec47[2];
	float 	fTempPerm161;
	float 	fRec61[2];
	float 	fTempPerm162;
	float 	fVec48[2];
	float 	fTempPerm163;
	float 	fVec49[4096];
	float 	fRec60[2];
	float 	fTempPerm164;
	int 	iTempPerm165;
	float 	fTempPerm166;
	float 	fRec45[3];
	float 	fRec44[3];
	FAUSTFLOAT 	fbutton2;
	int 	iRec63[2];
	int 	iTempPerm167;
	float 	fTempPerm168;
	float 	fRec62[2];
	FAUSTFLOAT 	fslider13;
	FAUSTFLOAT 	fslider14;
	int 	iRec67[2];
	float 	fTempPerm169;
	float 	fRec66[2];
	float 	fTempPerm170;
	float 	fVec50[2];
	float 	fVec51[2];
	float 	fTempPerm171;
	float 	fRec69[2];
	float 	fTempPerm172;
	float 	fVec52[2];
	float 	fTempPerm173;
	float 	fVec53[4096];
	float 	fRec68[2];
	float 	fTempPerm174;
	int 	iTempPerm175;
	float 	fTempPerm176;
	float 	fTempPerm177;
	float 	fTempPerm178;
	float 	fVec54[2];
	float 	fTempPerm179;
	float 	fRec70[2];
	float 	fTempPerm180;
	float 	fVec55[2];
	float 	fTempPerm181;
	float 	fVec56[4096];
	float 	fTempPerm182;
	int 	iTempPerm183;
	float 	fTempPerm184;
	int 	iRec72[2];
	float 	fTempPerm185;
	float 	fRec71[2];
	float 	fTempPerm186;
	float 	fVec57[2];
	float 	fTempPerm187;
	float 	fTempPerm188;
	int 	iTempPerm189;
	float 	fTempPerm190;
	float 	fRec73[2];
	float 	fTempPerm191;
	float 	fTempPerm192;
	float 	fTempPerm193;
	float 	fVec58[2];
	float 	fTempPerm194;
	float 	fRec74[2];
	float 	fTempPerm195;
	float 	fVec59[2];
	float 	fTempPerm196;
	float 	fVec60[4096];
	float 	fTempPerm197;
	int 	iTempPerm198;
	float 	fTempPerm199;
	int 	iRec76[2];
	float 	fTempPerm200;
	float 	fRec75[2];
	float 	fTempPerm201;
	float 	fVec61[2];
	float 	fTempPerm202;
	float 	fTempPerm203;
	int 	iTempPerm204;
	float 	fTempPerm205;
	float 	fRec77[2];
	float 	fTempPerm206;
	int 	iRec79[2];
	float 	fTempPerm207;
	float 	fRec78[2];
	float 	fTempPerm208;
	float 	fVec62[2];
	float 	fVec63[2];
	float 	fTempPerm209;
	float 	fRec81[2];
	float 	fTempPerm210;
	float 	fVec64[2];
	float 	fTempPerm211;
	float 	fVec65[4096];
	float 	fRec80[2];
	float 	fTempPerm212;
	int 	iTempPerm213;
	float 	fTempPerm214;
	float 	fRec65[3];
	float 	fRec64[3];
	FAUSTFLOAT 	fbutton3;
	int 	iRec83[2];
	int 	iTempPerm215;
	float 	fTempPerm216;
	float 	fRec82[2];
	FAUSTFLOAT 	fslider15;
	FAUSTFLOAT 	fslider16;
	int 	iRec87[2];
	float 	fTempPerm217;
	float 	fRec86[2];
	float 	fTempPerm218;
	float 	fVec66[2];
	float 	fVec67[2];
	float 	fTempPerm219;
	float 	fRec89[2];
	float 	fTempPerm220;
	float 	fVec68[2];
	float 	fTempPerm221;
	float 	fVec69[4096];
	float 	fRec88[2];
	float 	fTempPerm222;
	int 	iTempPerm223;
	float 	fTempPerm224;
	float 	fTempPerm225;
	float 	fTempPerm226;
	float 	fVec70[2];
	float 	fTempPerm227;
	float 	fRec90[2];
	float 	fTempPerm228;
	float 	fVec71[2];
	float 	fTempPerm229;
	float 	fVec72[4096];
	float 	fTempPerm230;
	int 	iTempPerm231;
	float 	fTempPerm232;
	int 	iRec92[2];
	float 	fTempPerm233;
	float 	fRec91[2];
	float 	fTempPerm234;
	float 	fVec73[2];
	float 	fTempPerm235;
	float 	fTempPerm236;
	int 	iTempPerm237;
	float 	fTempPerm238;
	float 	fRec93[2];
	float 	fTempPerm239;
	float 	fTempPerm240;
	float 	fTempPerm241;
	float 	fVec74[2];
	float 	fTempPerm242;
	float 	fRec94[2];
	float 	fTempPerm243;
	float 	fVec75[2];
	float 	fTempPerm244;
	float 	fVec76[4096];
	float 	fTempPerm245;
	int 	iTempPerm246;
	float 	fTempPerm247;
	int 	iRec96[2];
	float 	fTempPerm248;
	float 	fRec95[2];
	float 	fTempPerm249;
	float 	fVec77[2];
	float 	fTempPerm250;
	float 	fTempPerm251;
	int 	iTempPerm252;
	float 	fTempPerm253;
	float 	fRec97[2];
	float 	fTempPerm254;
	int 	iRec99[2];
	float 	fTempPerm255;
	float 	fRec98[2];
	float 	fTempPerm256;
	float 	fVec78[2];
	float 	fVec79[2];
	float 	fTempPerm257;
	float 	fRec101[2];
	float 	fTempPerm258;
	float 	fVec80[2];
	float 	fTempPerm259;
	float 	fVec81[4096];
	float 	fRec100[2];
	float 	fTempPerm260;
	int 	iTempPerm261;
	float 	fTempPerm262;
	float 	fRec85[3];
	float 	fRec84[3];
	FAUSTFLOAT 	fbutton4;
	int 	iRec103[2];
	int 	iTempPerm263;
	float 	fTempPerm264;
	float 	fRec102[2];
	FAUSTFLOAT 	fslider17;
	FAUSTFLOAT 	fslider18;
	int 	iRec107[2];
	float 	fTempPerm265;
	float 	fRec106[2];
	float 	fTempPerm266;
	float 	fVec82[2];
	float 	fVec83[2];
	float 	fTempPerm267;
	float 	fRec109[2];
	float 	fTempPerm268;
	float 	fVec84[2];
	float 	fTempPerm269;
	float 	fVec85[4096];
	float 	fRec108[2];
	float 	fTempPerm270;
	int 	iTempPerm271;
	float 	fTempPerm272;
	float 	fTempPerm273;
	float 	fTempPerm274;
	float 	fVec86[2];
	float 	fTempPerm275;
	float 	fRec110[2];
	float 	fTempPerm276;
	float 	fVec87[2];
	float 	fTempPerm277;
	float 	fVec88[4096];
	float 	fTempPerm278;
	int 	iTempPerm279;
	float 	fTempPerm280;
	int 	iRec112[2];
	float 	fTempPerm281;
	float 	fRec111[2];
	float 	fTempPerm282;
	float 	fVec89[2];
	float 	fTempPerm283;
	float 	fTempPerm284;
	int 	iTempPerm285;
	float 	fTempPerm286;
	float 	fRec113[2];
	float 	fTempPerm287;
	float 	fTempPerm288;
	float 	fTempPerm289;
	float 	fVec90[2];
	float 	fTempPerm290;
	float 	fRec114[2];
	float 	fTempPerm291;
	float 	fVec91[2];
	float 	fTempPerm292;
	float 	fVec92[4096];
	float 	fTempPerm293;
	int 	iTempPerm294;
	float 	fTempPerm295;
	int 	iRec116[2];
	float 	fTempPerm296;
	float 	fRec115[2];
	float 	fTempPerm297;
	float 	fVec93[2];
	float 	fTempPerm298;
	float 	fTempPerm299;
	int 	iTempPerm300;
	float 	fTempPerm301;
	float 	fRec117[2];
	float 	fTempPerm302;
	int 	iRec119[2];
	float 	fTempPerm303;
	float 	fRec118[2];
	float 	fTempPerm304;
	float 	fVec94[2];
	float 	fVec95[2];
	float 	fTempPerm305;
	float 	fRec121[2];
	float 	fTempPerm306;
	float 	fVec96[2];
	float 	fTempPerm307;
	float 	fVec97[4096];
	float 	fRec120[2];
	float 	fTempPerm308;
	int 	iTempPerm309;
	float 	fTempPerm310;
	float 	fRec105[3];
	float 	fRec104[3];
	FAUSTFLOAT 	fbutton5;
	int 	iRec123[2];
	int 	iTempPerm311;
	float 	fTempPerm312;
	float 	fRec122[2];
	FAUSTFLOAT 	fslider19;
	int fSamplingFreq;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("basics.lib/name", "Faust Basic Element Library");
		m->declare("basics.lib/version", "0.0");
		m->declare("filename", "nuke");
		m->declare("filters.lib/name", "Faust Filters Library");
		m->declare("filters.lib/version", "0.0");
		m->declare("maths.lib/author", "GRAME");
		m->declare("maths.lib/copyright", "GRAME");
		m->declare("maths.lib/license", "LGPL with exception");
		m->declare("maths.lib/name", "Faust Math Library");
		m->declare("maths.lib/version", "2.1");
		m->declare("name", "nuke");
		m->declare("oscillators.lib/name", "Faust Oscillator Library");
		m->declare("oscillators.lib/version", "0.0");
		m->declare("signals.lib/name", "Faust Signal Routing Library");
		m->declare("signals.lib/version", "0.0");
	}

	virtual int getNumInputs() { return 0; }
	virtual int getNumOutputs() { return 1; }
	static void classInit(int samplingFreq) {
	}
	virtual void instanceConstants(int samplingFreq) {
		fSamplingFreq = samplingFreq;
		fConst0 = min(192000.0f, max(1.0f, (float)fSamplingFreq));
		fConst1 = (3.1415926535897931f / fConst0);
		fTempPerm0 = 0;
		fTempPerm1 = 0;
		fTempPerm2 = 0;
		fTempPerm3 = 0;
		fTempPerm4 = 0;
		fTempPerm5 = 0;
		fTempPerm6 = 0;
		fConst2 = (1.0f / fConst0);
		fTempPerm7 = 0;
		fTempPerm8 = 0;
		fTempPerm9 = 0;
		fTempPerm10 = 0;
		fTempPerm11 = 0;
		fTempPerm12 = 0;
		fTempPerm13 = 0;
		fTempPerm14 = 0;
		fConst3 = (0.25f * fConst0);
		fTempPerm15 = 0;
		fConst4 = (0.5f * fConst0);
		fConst5 = (6.0f / fConst0);
		fTempPerm16 = 0;
		fTempPerm17 = 0;
		iTempPerm18 = 0;
		fTempPerm19 = 0;
		fTempPerm20 = 0;
		iTempPerm21 = 0;
		fTempPerm22 = 0;
		fTempPerm23 = 0;
		fTempPerm24 = 0;
		fTempPerm25 = 0;
		fTempPerm26 = 0;
		fTempPerm27 = 0;
		fTempPerm28 = 0;
		fTempPerm29 = 0;
		fTempPerm30 = 0;
		iTempPerm31 = 0;
		fTempPerm32 = 0;
		fTempPerm33 = 0;
		fTempPerm34 = 0;
		fTempPerm35 = 0;
		fTempPerm36 = 0;
		fTempPerm37 = 0;
		fTempPerm38 = 0;
		iTempPerm39 = 0;
		fTempPerm40 = 0;
		fTempPerm41 = 0;
		fTempPerm42 = 0;
		fTempPerm43 = 0;
		fTempPerm44 = 0;
		fTempPerm45 = 0;
		fTempPerm46 = 0;
		fTempPerm47 = 0;
		fTempPerm48 = 0;
		fTempPerm49 = 0;
		iTempPerm50 = 0;
		fTempPerm51 = 0;
		fTempPerm52 = 0;
		fTempPerm53 = 0;
		fTempPerm54 = 0;
		fTempPerm55 = 0;
		fTempPerm56 = 0;
		iTempPerm57 = 0;
		fTempPerm58 = 0;
		fTempPerm59 = 0;
		fTempPerm60 = 0;
		fTempPerm61 = 0;
		fTempPerm62 = 0;
		fConst6 = (2.0f * fConst0);
		fTempPerm63 = 0;
		fTempPerm64 = 0;
		fTempPerm65 = 0;
		fTempPerm66 = 0;
		fTempPerm67 = 0;
		fConst7 = (3.0f / fConst0);
		fTempPerm68 = 0;
		iTempPerm69 = 0;
		fTempPerm70 = 0;
		iTempPerm71 = 0;
		fConst8 = (6.9100000000000001f / fConst0);
		fTempPerm72 = 0;
		fTempPerm73 = 0;
		fTempPerm74 = 0;
		fTempPerm75 = 0;
		fTempPerm76 = 0;
		fTempPerm77 = 0;
		fTempPerm78 = 0;
		iTempPerm79 = 0;
		fTempPerm80 = 0;
		fTempPerm81 = 0;
		fTempPerm82 = 0;
		fTempPerm83 = 0;
		fTempPerm84 = 0;
		fTempPerm85 = 0;
		fTempPerm86 = 0;
		iTempPerm87 = 0;
		fTempPerm88 = 0;
		fTempPerm89 = 0;
		fTempPerm90 = 0;
		fTempPerm91 = 0;
		fTempPerm92 = 0;
		iTempPerm93 = 0;
		fTempPerm94 = 0;
		fTempPerm95 = 0;
		fTempPerm96 = 0;
		fTempPerm97 = 0;
		fTempPerm98 = 0;
		fTempPerm99 = 0;
		fTempPerm100 = 0;
		fTempPerm101 = 0;
		iTempPerm102 = 0;
		fTempPerm103 = 0;
		fTempPerm104 = 0;
		fTempPerm105 = 0;
		fTempPerm106 = 0;
		fTempPerm107 = 0;
		iTempPerm108 = 0;
		fTempPerm109 = 0;
		fTempPerm110 = 0;
		fTempPerm111 = 0;
		fTempPerm112 = 0;
		fTempPerm113 = 0;
		fTempPerm114 = 0;
		fTempPerm115 = 0;
		fTempPerm116 = 0;
		iTempPerm117 = 0;
		fTempPerm118 = 0;
		iTempPerm119 = 0;
		fTempPerm120 = 0;
		fTempPerm121 = 0;
		fTempPerm122 = 0;
		fTempPerm123 = 0;
		fTempPerm124 = 0;
		fTempPerm125 = 0;
		fTempPerm126 = 0;
		iTempPerm127 = 0;
		fTempPerm128 = 0;
		fTempPerm129 = 0;
		fTempPerm130 = 0;
		fTempPerm131 = 0;
		fTempPerm132 = 0;
		fTempPerm133 = 0;
		fTempPerm134 = 0;
		iTempPerm135 = 0;
		fTempPerm136 = 0;
		fTempPerm137 = 0;
		fTempPerm138 = 0;
		fTempPerm139 = 0;
		fTempPerm140 = 0;
		iTempPerm141 = 0;
		fTempPerm142 = 0;
		fTempPerm143 = 0;
		fTempPerm144 = 0;
		fTempPerm145 = 0;
		fTempPerm146 = 0;
		fTempPerm147 = 0;
		fTempPerm148 = 0;
		fTempPerm149 = 0;
		iTempPerm150 = 0;
		fTempPerm151 = 0;
		fTempPerm152 = 0;
		fTempPerm153 = 0;
		fTempPerm154 = 0;
		fTempPerm155 = 0;
		iTempPerm156 = 0;
		fTempPerm157 = 0;
		fTempPerm158 = 0;
		fTempPerm159 = 0;
		fTempPerm160 = 0;
		fTempPerm161 = 0;
		fTempPerm162 = 0;
		fTempPerm163 = 0;
		fTempPerm164 = 0;
		iTempPerm165 = 0;
		fTempPerm166 = 0;
		iTempPerm167 = 0;
		fTempPerm168 = 0;
		fTempPerm169 = 0;
		fTempPerm170 = 0;
		fTempPerm171 = 0;
		fTempPerm172 = 0;
		fTempPerm173 = 0;
		fTempPerm174 = 0;
		iTempPerm175 = 0;
		fTempPerm176 = 0;
		fTempPerm177 = 0;
		fTempPerm178 = 0;
		fTempPerm179 = 0;
		fTempPerm180 = 0;
		fTempPerm181 = 0;
		fTempPerm182 = 0;
		iTempPerm183 = 0;
		fTempPerm184 = 0;
		fTempPerm185 = 0;
		fTempPerm186 = 0;
		fTempPerm187 = 0;
		fTempPerm188 = 0;
		iTempPerm189 = 0;
		fTempPerm190 = 0;
		fTempPerm191 = 0;
		fTempPerm192 = 0;
		fTempPerm193 = 0;
		fTempPerm194 = 0;
		fTempPerm195 = 0;
		fTempPerm196 = 0;
		fTempPerm197 = 0;
		iTempPerm198 = 0;
		fTempPerm199 = 0;
		fTempPerm200 = 0;
		fTempPerm201 = 0;
		fTempPerm202 = 0;
		fTempPerm203 = 0;
		iTempPerm204 = 0;
		fTempPerm205 = 0;
		fTempPerm206 = 0;
		fTempPerm207 = 0;
		fTempPerm208 = 0;
		fTempPerm209 = 0;
		fTempPerm210 = 0;
		fTempPerm211 = 0;
		fTempPerm212 = 0;
		iTempPerm213 = 0;
		fTempPerm214 = 0;
		iTempPerm215 = 0;
		fTempPerm216 = 0;
		fTempPerm217 = 0;
		fTempPerm218 = 0;
		fTempPerm219 = 0;
		fTempPerm220 = 0;
		fTempPerm221 = 0;
		fTempPerm222 = 0;
		iTempPerm223 = 0;
		fTempPerm224 = 0;
		fTempPerm225 = 0;
		fTempPerm226 = 0;
		fTempPerm227 = 0;
		fTempPerm228 = 0;
		fTempPerm229 = 0;
		fTempPerm230 = 0;
		iTempPerm231 = 0;
		fTempPerm232 = 0;
		fTempPerm233 = 0;
		fTempPerm234 = 0;
		fTempPerm235 = 0;
		fTempPerm236 = 0;
		iTempPerm237 = 0;
		fTempPerm238 = 0;
		fTempPerm239 = 0;
		fTempPerm240 = 0;
		fTempPerm241 = 0;
		fTempPerm242 = 0;
		fTempPerm243 = 0;
		fTempPerm244 = 0;
		fTempPerm245 = 0;
		iTempPerm246 = 0;
		fTempPerm247 = 0;
		fTempPerm248 = 0;
		fTempPerm249 = 0;
		fTempPerm250 = 0;
		fTempPerm251 = 0;
		iTempPerm252 = 0;
		fTempPerm253 = 0;
		fTempPerm254 = 0;
		fTempPerm255 = 0;
		fTempPerm256 = 0;
		fTempPerm257 = 0;
		fTempPerm258 = 0;
		fTempPerm259 = 0;
		fTempPerm260 = 0;
		iTempPerm261 = 0;
		fTempPerm262 = 0;
		iTempPerm263 = 0;
		fTempPerm264 = 0;
		fTempPerm265 = 0;
		fTempPerm266 = 0;
		fTempPerm267 = 0;
		fTempPerm268 = 0;
		fTempPerm269 = 0;
		fTempPerm270 = 0;
		iTempPerm271 = 0;
		fTempPerm272 = 0;
		fTempPerm273 = 0;
		fTempPerm274 = 0;
		fTempPerm275 = 0;
		fTempPerm276 = 0;
		fTempPerm277 = 0;
		fTempPerm278 = 0;
		iTempPerm279 = 0;
		fTempPerm280 = 0;
		fTempPerm281 = 0;
		fTempPerm282 = 0;
		fTempPerm283 = 0;
		fTempPerm284 = 0;
		iTempPerm285 = 0;
		fTempPerm286 = 0;
		fTempPerm287 = 0;
		fTempPerm288 = 0;
		fTempPerm289 = 0;
		fTempPerm290 = 0;
		fTempPerm291 = 0;
		fTempPerm292 = 0;
		fTempPerm293 = 0;
		iTempPerm294 = 0;
		fTempPerm295 = 0;
		fTempPerm296 = 0;
		fTempPerm297 = 0;
		fTempPerm298 = 0;
		fTempPerm299 = 0;
		iTempPerm300 = 0;
		fTempPerm301 = 0;
		fTempPerm302 = 0;
		fTempPerm303 = 0;
		fTempPerm304 = 0;
		fTempPerm305 = 0;
		fTempPerm306 = 0;
		fTempPerm307 = 0;
		fTempPerm308 = 0;
		iTempPerm309 = 0;
		fTempPerm310 = 0;
		iTempPerm311 = 0;
		fTempPerm312 = 0;
	}
	virtual void instanceResetUserInterface() {
		fslider0 = 0.5f;
		fslider1 = 1.0f;
		fslider2 = 440.0f;
		fslider3 = 0.0f;
		fslider4 = 2.0f;
		fslider5 = 0.0f;
		fslider6 = 0.0f;
		fslider7 = 0.001f;
		fbutton0 = 0.0;
		fslider8 = 1.0f;
		fslider9 = 1.0f;
		fslider10 = 440.0f;
		fbutton1 = 0.0;
		fslider11 = 1.0f;
		fslider12 = 440.0f;
		fbutton2 = 0.0;
		fslider13 = 1.0f;
		fslider14 = 440.0f;
		fbutton3 = 0.0;
		fslider15 = 1.0f;
		fslider16 = 440.0f;
		fbutton4 = 0.0;
		fslider17 = 1.0f;
		fslider18 = 440.0f;
		fbutton5 = 0.0;
		fslider19 = 1.0f;
	}
	virtual void instanceClear() {
		for (int i=0; i<2; i++) iVec0[i] = 0;
		for (int i=0; i<2; i++) fRec0[i] = 0;
		for (int i=0; i<2; i++) fRec3[i] = 0;
		for (int i=0; i<2; i++) fVec1[i] = 0;
		for (int i=0; i<2; i++) iRec5[i] = 0;
		for (int i=0; i<2; i++) fRec4[i] = 0;
		for (int i=0; i<2; i++) fVec2[i] = 0;
		for (int i=0; i<2; i++) fVec3[i] = 0;
		for (int i=0; i<2; i++) fRec7[i] = 0;
		for (int i=0; i<2; i++) fVec4[i] = 0;
		IOTA = 0;
		for (int i=0; i<4096; i++) fVec5[i] = 0;
		for (int i=0; i<2; i++) fRec6[i] = 0;
		for (int i=0; i<2; i++) fRec8[i] = 0;
		for (int i=0; i<2; i++) fRec9[i] = 0;
		for (int i=0; i<2; i++) fVec6[i] = 0;
		for (int i=0; i<2; i++) fRec10[i] = 0;
		for (int i=0; i<2; i++) fVec7[i] = 0;
		for (int i=0; i<4096; i++) fVec8[i] = 0;
		for (int i=0; i<2; i++) iRec12[i] = 0;
		for (int i=0; i<2; i++) fRec11[i] = 0;
		for (int i=0; i<2; i++) fVec9[i] = 0;
		for (int i=0; i<2; i++) fRec13[i] = 0;
		for (int i=0; i<2; i++) fVec10[i] = 0;
		for (int i=0; i<2; i++) fRec14[i] = 0;
		for (int i=0; i<2; i++) fVec11[i] = 0;
		for (int i=0; i<4096; i++) fVec12[i] = 0;
		for (int i=0; i<2; i++) iRec16[i] = 0;
		for (int i=0; i<2; i++) fRec15[i] = 0;
		for (int i=0; i<2; i++) fVec13[i] = 0;
		for (int i=0; i<2; i++) fRec17[i] = 0;
		for (int i=0; i<2; i++) iRec19[i] = 0;
		for (int i=0; i<2; i++) fRec18[i] = 0;
		for (int i=0; i<2; i++) fVec14[i] = 0;
		for (int i=0; i<2; i++) fVec15[i] = 0;
		for (int i=0; i<2; i++) fRec21[i] = 0;
		for (int i=0; i<2; i++) fVec16[i] = 0;
		for (int i=0; i<4096; i++) fVec17[i] = 0;
		for (int i=0; i<2; i++) fRec20[i] = 0;
		for (int i=0; i<3; i++) fRec2[i] = 0;
		for (int i=0; i<3; i++) fRec1[i] = 0;
		for (int i=0; i<2; i++) iRec23[i] = 0;
		for (int i=0; i<2; i++) fRec22[i] = 0;
		for (int i=0; i<2; i++) iRec27[i] = 0;
		for (int i=0; i<2; i++) fRec26[i] = 0;
		for (int i=0; i<2; i++) fVec18[i] = 0;
		for (int i=0; i<2; i++) fVec19[i] = 0;
		for (int i=0; i<2; i++) fRec29[i] = 0;
		for (int i=0; i<2; i++) fVec20[i] = 0;
		for (int i=0; i<4096; i++) fVec21[i] = 0;
		for (int i=0; i<2; i++) fRec28[i] = 0;
		for (int i=0; i<2; i++) fVec22[i] = 0;
		for (int i=0; i<2; i++) fRec30[i] = 0;
		for (int i=0; i<2; i++) fVec23[i] = 0;
		for (int i=0; i<4096; i++) fVec24[i] = 0;
		for (int i=0; i<2; i++) iRec32[i] = 0;
		for (int i=0; i<2; i++) fRec31[i] = 0;
		for (int i=0; i<2; i++) fVec25[i] = 0;
		for (int i=0; i<2; i++) fRec33[i] = 0;
		for (int i=0; i<2; i++) fVec26[i] = 0;
		for (int i=0; i<2; i++) fRec34[i] = 0;
		for (int i=0; i<2; i++) fVec27[i] = 0;
		for (int i=0; i<4096; i++) fVec28[i] = 0;
		for (int i=0; i<2; i++) iRec36[i] = 0;
		for (int i=0; i<2; i++) fRec35[i] = 0;
		for (int i=0; i<2; i++) fVec29[i] = 0;
		for (int i=0; i<2; i++) fRec37[i] = 0;
		for (int i=0; i<2; i++) iRec39[i] = 0;
		for (int i=0; i<2; i++) fRec38[i] = 0;
		for (int i=0; i<2; i++) fVec30[i] = 0;
		for (int i=0; i<2; i++) fVec31[i] = 0;
		for (int i=0; i<2; i++) fRec41[i] = 0;
		for (int i=0; i<2; i++) fVec32[i] = 0;
		for (int i=0; i<4096; i++) fVec33[i] = 0;
		for (int i=0; i<2; i++) fRec40[i] = 0;
		for (int i=0; i<3; i++) fRec25[i] = 0;
		for (int i=0; i<3; i++) fRec24[i] = 0;
		for (int i=0; i<2; i++) iRec43[i] = 0;
		for (int i=0; i<2; i++) fRec42[i] = 0;
		for (int i=0; i<2; i++) iRec47[i] = 0;
		for (int i=0; i<2; i++) fRec46[i] = 0;
		for (int i=0; i<2; i++) fVec34[i] = 0;
		for (int i=0; i<2; i++) fVec35[i] = 0;
		for (int i=0; i<2; i++) fRec49[i] = 0;
		for (int i=0; i<2; i++) fVec36[i] = 0;
		for (int i=0; i<4096; i++) fVec37[i] = 0;
		for (int i=0; i<2; i++) fRec48[i] = 0;
		for (int i=0; i<2; i++) fVec38[i] = 0;
		for (int i=0; i<2; i++) fRec50[i] = 0;
		for (int i=0; i<2; i++) fVec39[i] = 0;
		for (int i=0; i<4096; i++) fVec40[i] = 0;
		for (int i=0; i<2; i++) iRec52[i] = 0;
		for (int i=0; i<2; i++) fRec51[i] = 0;
		for (int i=0; i<2; i++) fVec41[i] = 0;
		for (int i=0; i<2; i++) fRec53[i] = 0;
		for (int i=0; i<2; i++) fVec42[i] = 0;
		for (int i=0; i<2; i++) fRec54[i] = 0;
		for (int i=0; i<2; i++) fVec43[i] = 0;
		for (int i=0; i<4096; i++) fVec44[i] = 0;
		for (int i=0; i<2; i++) iRec56[i] = 0;
		for (int i=0; i<2; i++) fRec55[i] = 0;
		for (int i=0; i<2; i++) fVec45[i] = 0;
		for (int i=0; i<2; i++) fRec57[i] = 0;
		for (int i=0; i<2; i++) iRec59[i] = 0;
		for (int i=0; i<2; i++) fRec58[i] = 0;
		for (int i=0; i<2; i++) fVec46[i] = 0;
		for (int i=0; i<2; i++) fVec47[i] = 0;
		for (int i=0; i<2; i++) fRec61[i] = 0;
		for (int i=0; i<2; i++) fVec48[i] = 0;
		for (int i=0; i<4096; i++) fVec49[i] = 0;
		for (int i=0; i<2; i++) fRec60[i] = 0;
		for (int i=0; i<3; i++) fRec45[i] = 0;
		for (int i=0; i<3; i++) fRec44[i] = 0;
		for (int i=0; i<2; i++) iRec63[i] = 0;
		for (int i=0; i<2; i++) fRec62[i] = 0;
		for (int i=0; i<2; i++) iRec67[i] = 0;
		for (int i=0; i<2; i++) fRec66[i] = 0;
		for (int i=0; i<2; i++) fVec50[i] = 0;
		for (int i=0; i<2; i++) fVec51[i] = 0;
		for (int i=0; i<2; i++) fRec69[i] = 0;
		for (int i=0; i<2; i++) fVec52[i] = 0;
		for (int i=0; i<4096; i++) fVec53[i] = 0;
		for (int i=0; i<2; i++) fRec68[i] = 0;
		for (int i=0; i<2; i++) fVec54[i] = 0;
		for (int i=0; i<2; i++) fRec70[i] = 0;
		for (int i=0; i<2; i++) fVec55[i] = 0;
		for (int i=0; i<4096; i++) fVec56[i] = 0;
		for (int i=0; i<2; i++) iRec72[i] = 0;
		for (int i=0; i<2; i++) fRec71[i] = 0;
		for (int i=0; i<2; i++) fVec57[i] = 0;
		for (int i=0; i<2; i++) fRec73[i] = 0;
		for (int i=0; i<2; i++) fVec58[i] = 0;
		for (int i=0; i<2; i++) fRec74[i] = 0;
		for (int i=0; i<2; i++) fVec59[i] = 0;
		for (int i=0; i<4096; i++) fVec60[i] = 0;
		for (int i=0; i<2; i++) iRec76[i] = 0;
		for (int i=0; i<2; i++) fRec75[i] = 0;
		for (int i=0; i<2; i++) fVec61[i] = 0;
		for (int i=0; i<2; i++) fRec77[i] = 0;
		for (int i=0; i<2; i++) iRec79[i] = 0;
		for (int i=0; i<2; i++) fRec78[i] = 0;
		for (int i=0; i<2; i++) fVec62[i] = 0;
		for (int i=0; i<2; i++) fVec63[i] = 0;
		for (int i=0; i<2; i++) fRec81[i] = 0;
		for (int i=0; i<2; i++) fVec64[i] = 0;
		for (int i=0; i<4096; i++) fVec65[i] = 0;
		for (int i=0; i<2; i++) fRec80[i] = 0;
		for (int i=0; i<3; i++) fRec65[i] = 0;
		for (int i=0; i<3; i++) fRec64[i] = 0;
		for (int i=0; i<2; i++) iRec83[i] = 0;
		for (int i=0; i<2; i++) fRec82[i] = 0;
		for (int i=0; i<2; i++) iRec87[i] = 0;
		for (int i=0; i<2; i++) fRec86[i] = 0;
		for (int i=0; i<2; i++) fVec66[i] = 0;
		for (int i=0; i<2; i++) fVec67[i] = 0;
		for (int i=0; i<2; i++) fRec89[i] = 0;
		for (int i=0; i<2; i++) fVec68[i] = 0;
		for (int i=0; i<4096; i++) fVec69[i] = 0;
		for (int i=0; i<2; i++) fRec88[i] = 0;
		for (int i=0; i<2; i++) fVec70[i] = 0;
		for (int i=0; i<2; i++) fRec90[i] = 0;
		for (int i=0; i<2; i++) fVec71[i] = 0;
		for (int i=0; i<4096; i++) fVec72[i] = 0;
		for (int i=0; i<2; i++) iRec92[i] = 0;
		for (int i=0; i<2; i++) fRec91[i] = 0;
		for (int i=0; i<2; i++) fVec73[i] = 0;
		for (int i=0; i<2; i++) fRec93[i] = 0;
		for (int i=0; i<2; i++) fVec74[i] = 0;
		for (int i=0; i<2; i++) fRec94[i] = 0;
		for (int i=0; i<2; i++) fVec75[i] = 0;
		for (int i=0; i<4096; i++) fVec76[i] = 0;
		for (int i=0; i<2; i++) iRec96[i] = 0;
		for (int i=0; i<2; i++) fRec95[i] = 0;
		for (int i=0; i<2; i++) fVec77[i] = 0;
		for (int i=0; i<2; i++) fRec97[i] = 0;
		for (int i=0; i<2; i++) iRec99[i] = 0;
		for (int i=0; i<2; i++) fRec98[i] = 0;
		for (int i=0; i<2; i++) fVec78[i] = 0;
		for (int i=0; i<2; i++) fVec79[i] = 0;
		for (int i=0; i<2; i++) fRec101[i] = 0;
		for (int i=0; i<2; i++) fVec80[i] = 0;
		for (int i=0; i<4096; i++) fVec81[i] = 0;
		for (int i=0; i<2; i++) fRec100[i] = 0;
		for (int i=0; i<3; i++) fRec85[i] = 0;
		for (int i=0; i<3; i++) fRec84[i] = 0;
		for (int i=0; i<2; i++) iRec103[i] = 0;
		for (int i=0; i<2; i++) fRec102[i] = 0;
		for (int i=0; i<2; i++) iRec107[i] = 0;
		for (int i=0; i<2; i++) fRec106[i] = 0;
		for (int i=0; i<2; i++) fVec82[i] = 0;
		for (int i=0; i<2; i++) fVec83[i] = 0;
		for (int i=0; i<2; i++) fRec109[i] = 0;
		for (int i=0; i<2; i++) fVec84[i] = 0;
		for (int i=0; i<4096; i++) fVec85[i] = 0;
		for (int i=0; i<2; i++) fRec108[i] = 0;
		for (int i=0; i<2; i++) fVec86[i] = 0;
		for (int i=0; i<2; i++) fRec110[i] = 0;
		for (int i=0; i<2; i++) fVec87[i] = 0;
		for (int i=0; i<4096; i++) fVec88[i] = 0;
		for (int i=0; i<2; i++) iRec112[i] = 0;
		for (int i=0; i<2; i++) fRec111[i] = 0;
		for (int i=0; i<2; i++) fVec89[i] = 0;
		for (int i=0; i<2; i++) fRec113[i] = 0;
		for (int i=0; i<2; i++) fVec90[i] = 0;
		for (int i=0; i<2; i++) fRec114[i] = 0;
		for (int i=0; i<2; i++) fVec91[i] = 0;
		for (int i=0; i<4096; i++) fVec92[i] = 0;
		for (int i=0; i<2; i++) iRec116[i] = 0;
		for (int i=0; i<2; i++) fRec115[i] = 0;
		for (int i=0; i<2; i++) fVec93[i] = 0;
		for (int i=0; i<2; i++) fRec117[i] = 0;
		for (int i=0; i<2; i++) iRec119[i] = 0;
		for (int i=0; i<2; i++) fRec118[i] = 0;
		for (int i=0; i<2; i++) fVec94[i] = 0;
		for (int i=0; i<2; i++) fVec95[i] = 0;
		for (int i=0; i<2; i++) fRec121[i] = 0;
		for (int i=0; i<2; i++) fVec96[i] = 0;
		for (int i=0; i<4096; i++) fVec97[i] = 0;
		for (int i=0; i<2; i++) fRec120[i] = 0;
		for (int i=0; i<3; i++) fRec105[i] = 0;
		for (int i=0; i<3; i++) fRec104[i] = 0;
		for (int i=0; i<2; i++) iRec123[i] = 0;
		for (int i=0; i<2; i++) fRec122[i] = 0;
	}
	virtual void init(int samplingFreq) {
		classInit(samplingFreq);
		instanceInit(samplingFreq);
	}
	virtual void instanceInit(int samplingFreq) {
		instanceConstants(samplingFreq);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual faust_nuke* clone() {
		return new faust_nuke();
	}
	virtual int getSampleRate() {
		return fSamplingFreq;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("nuke");
		ui_interface->addHorizontalSlider("Filter", &fslider0, 0.5f, 0.0f, 1.0f, 0.01f);
		ui_interface->addHorizontalSlider("Relation", &fslider4, 2.0f, 0.0f, 3.0009999999999999f, 0.001f);
		ui_interface->addHorizontalSlider("Sub", &fslider3, 0.0f, 0.0f, 1.0f, 0.001f);
		ui_interface->addHorizontalSlider("Wave", &fslider1, 1.0f, 0.080000000000000002f, 4.0f, 0.01f);
		ui_interface->openVerticalBox("envelope");
		ui_interface->addHorizontalSlider("Attack", &fslider7, 0.001f, 0.001f, 4.0f, 0.001f);
		ui_interface->addHorizontalSlider("Decay", &fslider6, 0.0f, 0.0f, 4.0f, 0.001f);
		ui_interface->addHorizontalSlider("Release", &fslider5, 0.0f, 0.0f, 4.0f, 0.01f);
		ui_interface->addHorizontalSlider("Sustain", &fslider8, 1.0f, 0.0f, 1.0f, 0.01f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("voices");
		ui_interface->openVerticalBox("0");
		ui_interface->openHorizontalBox("midi");
		ui_interface->addHorizontalSlider("freq", &fslider18, 440.0f, 20.0f, 1000.0f, 1.0f);
		ui_interface->addButton("trigger", &fbutton5);
		ui_interface->addHorizontalSlider("velocity", &fslider19, 1.0f, 0.0f, 1.0f, 0.007874015748031496f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->openVerticalBox("1");
		ui_interface->openHorizontalBox("midi");
		ui_interface->addHorizontalSlider("freq", &fslider14, 440.0f, 20.0f, 1000.0f, 1.0f);
		ui_interface->addButton("trigger", &fbutton3);
		ui_interface->addHorizontalSlider("velocity", &fslider15, 1.0f, 0.0f, 1.0f, 0.007874015748031496f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->openVerticalBox("2");
		ui_interface->openHorizontalBox("midi");
		ui_interface->addHorizontalSlider("freq", &fslider10, 440.0f, 20.0f, 1000.0f, 1.0f);
		ui_interface->addButton("trigger", &fbutton1);
		ui_interface->addHorizontalSlider("velocity", &fslider11, 1.0f, 0.0f, 1.0f, 0.007874015748031496f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->openVerticalBox("3");
		ui_interface->openHorizontalBox("midi");
		ui_interface->addHorizontalSlider("freq", &fslider16, 440.0f, 20.0f, 1000.0f, 1.0f);
		ui_interface->addButton("trigger", &fbutton4);
		ui_interface->addHorizontalSlider("velocity", &fslider17, 1.0f, 0.0f, 1.0f, 0.007874015748031496f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->openVerticalBox("4");
		ui_interface->openHorizontalBox("midi");
		ui_interface->addHorizontalSlider("freq", &fslider12, 440.0f, 20.0f, 1000.0f, 1.0f);
		ui_interface->addButton("trigger", &fbutton2);
		ui_interface->addHorizontalSlider("velocity", &fslider13, 1.0f, 0.0f, 1.0f, 0.007874015748031496f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->openVerticalBox("5");
		ui_interface->openHorizontalBox("midi");
		ui_interface->addHorizontalSlider("freq", &fslider2, 440.0f, 20.0f, 1000.0f, 1.0f);
		ui_interface->addButton("trigger", &fbutton0);
		ui_interface->addHorizontalSlider("velocity", &fslider9, 1.0f, 0.0f, 1.0f, 0.007874015748031496f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		//zone1
		//zone2
		float 	fSlow0 = (0.0010000000000000009f * float(fslider0));
		float 	fSlow1 = (0.0010000000000000009f * float(fslider1));
		float 	fSlow2 = float(fslider2);
		float 	fSlow3 = (fConst2 * fSlow2);
		float 	fSlow4 = (fConst0 / fSlow2);
		int 	iSlow5 = int(fSlow4);
		float 	fSlow6 = max(fSlow2, 23.448949682462139f);
		float 	fSlow7 = max(20.0f, fabsf(fSlow6));
		float 	fSlow8 = (fConst3 / fSlow7);
		float 	fSlow9 = max((float)0, min((float)2047, (fConst4 / fSlow6)));
		int 	iSlow10 = int(fSlow9);
		int 	iSlow11 = int((iSlow10 + 1));
		float 	fSlow12 = floorf(fSlow9);
		float 	fSlow13 = (fSlow9 - fSlow12);
		float 	fSlow14 = (fSlow12 + (1.0f - fSlow9));
		float 	fSlow15 = (fConst5 * fSlow2);
		float 	fSlow16 = (fConst0 / fSlow6);
		float 	fSlow17 = (0.0010000000000000009f * float(fslider3));
		float 	fSlow18 = (0.0010000000000000009f * float(fslider4));
		float 	fSlow19 = (1.0f / fSlow2);
		int 	iSlow20 = int((fConst6 / fSlow2));
		float 	fSlow21 = max((0.5f * fSlow2), 23.448949682462139f);
		float 	fSlow22 = max(20.0f, fabsf(fSlow21));
		float 	fSlow23 = (fConst3 / fSlow22);
		float 	fSlow24 = max((float)0, min((float)2047, (fConst4 / fSlow21)));
		int 	iSlow25 = int(fSlow24);
		int 	iSlow26 = int((iSlow25 + 1));
		float 	fSlow27 = floorf(fSlow24);
		float 	fSlow28 = (fSlow24 - fSlow27);
		float 	fSlow29 = (fSlow27 + (1.0f - fSlow24));
		float 	fSlow30 = (fConst7 * fSlow2);
		float 	fSlow31 = (fConst0 / fSlow21);
		float 	fSlow32 = float(fslider5);
		float 	fSlow33 = float(fslider6);
		float 	fSlow34 = float(fslider7);
		float 	fSlow35 = (6.9100000000000001f * fSlow34);
		int 	iSlow36 = int((fConst0 * fSlow34));
		int 	iSlow37 = (float(fbutton0) > 0.0f);
		int 	iSlow38 = int(iSlow37);
		float 	fSlow39 = float(fslider8);
		float 	fSlow40 = (float(iSlow37) * fSlow39);
		float 	fSlow41 = float(fslider9);
		float 	fSlow42 = float(fslider10);
		float 	fSlow43 = (fConst2 * fSlow42);
		float 	fSlow44 = (fConst0 / fSlow42);
		int 	iSlow45 = int(fSlow44);
		float 	fSlow46 = max(fSlow42, 23.448949682462139f);
		float 	fSlow47 = max(20.0f, fabsf(fSlow46));
		float 	fSlow48 = (fConst3 / fSlow47);
		float 	fSlow49 = max((float)0, min((float)2047, (fConst4 / fSlow46)));
		int 	iSlow50 = int(fSlow49);
		int 	iSlow51 = int((iSlow50 + 1));
		float 	fSlow52 = floorf(fSlow49);
		float 	fSlow53 = (fSlow49 - fSlow52);
		float 	fSlow54 = (fSlow52 + (1.0f - fSlow49));
		float 	fSlow55 = (fConst5 * fSlow42);
		float 	fSlow56 = (fConst0 / fSlow46);
		float 	fSlow57 = (1.0f / fSlow42);
		int 	iSlow58 = int((fConst6 / fSlow42));
		float 	fSlow59 = max((0.5f * fSlow42), 23.448949682462139f);
		float 	fSlow60 = max(20.0f, fabsf(fSlow59));
		float 	fSlow61 = (fConst3 / fSlow60);
		float 	fSlow62 = max((float)0, min((float)2047, (fConst4 / fSlow59)));
		int 	iSlow63 = int(fSlow62);
		int 	iSlow64 = int((iSlow63 + 1));
		float 	fSlow65 = floorf(fSlow62);
		float 	fSlow66 = (fSlow62 - fSlow65);
		float 	fSlow67 = (fSlow65 + (1.0f - fSlow62));
		float 	fSlow68 = (fConst7 * fSlow42);
		float 	fSlow69 = (fConst0 / fSlow59);
		int 	iSlow70 = (float(fbutton1) > 0.0f);
		int 	iSlow71 = int(iSlow70);
		float 	fSlow72 = (float(iSlow70) * fSlow39);
		float 	fSlow73 = float(fslider11);
		float 	fSlow74 = float(fslider12);
		float 	fSlow75 = (fConst2 * fSlow74);
		float 	fSlow76 = (fConst0 / fSlow74);
		int 	iSlow77 = int(fSlow76);
		float 	fSlow78 = max(fSlow74, 23.448949682462139f);
		float 	fSlow79 = max(20.0f, fabsf(fSlow78));
		float 	fSlow80 = (fConst3 / fSlow79);
		float 	fSlow81 = max((float)0, min((float)2047, (fConst4 / fSlow78)));
		int 	iSlow82 = int(fSlow81);
		int 	iSlow83 = int((iSlow82 + 1));
		float 	fSlow84 = floorf(fSlow81);
		float 	fSlow85 = (fSlow81 - fSlow84);
		float 	fSlow86 = (fSlow84 + (1.0f - fSlow81));
		float 	fSlow87 = (fConst5 * fSlow74);
		float 	fSlow88 = (fConst0 / fSlow78);
		float 	fSlow89 = (1.0f / fSlow74);
		int 	iSlow90 = int((fConst6 / fSlow74));
		float 	fSlow91 = max((0.5f * fSlow74), 23.448949682462139f);
		float 	fSlow92 = max(20.0f, fabsf(fSlow91));
		float 	fSlow93 = (fConst3 / fSlow92);
		float 	fSlow94 = max((float)0, min((float)2047, (fConst4 / fSlow91)));
		int 	iSlow95 = int(fSlow94);
		int 	iSlow96 = int((iSlow95 + 1));
		float 	fSlow97 = floorf(fSlow94);
		float 	fSlow98 = (fSlow94 - fSlow97);
		float 	fSlow99 = (fSlow97 + (1.0f - fSlow94));
		float 	fSlow100 = (fConst7 * fSlow74);
		float 	fSlow101 = (fConst0 / fSlow91);
		int 	iSlow102 = (float(fbutton2) > 0.0f);
		int 	iSlow103 = int(iSlow102);
		float 	fSlow104 = (float(iSlow102) * fSlow39);
		float 	fSlow105 = float(fslider13);
		float 	fSlow106 = float(fslider14);
		float 	fSlow107 = (fConst2 * fSlow106);
		float 	fSlow108 = (fConst0 / fSlow106);
		int 	iSlow109 = int(fSlow108);
		float 	fSlow110 = max(fSlow106, 23.448949682462139f);
		float 	fSlow111 = max(20.0f, fabsf(fSlow110));
		float 	fSlow112 = (fConst3 / fSlow111);
		float 	fSlow113 = max((float)0, min((float)2047, (fConst4 / fSlow110)));
		int 	iSlow114 = int(fSlow113);
		int 	iSlow115 = int((iSlow114 + 1));
		float 	fSlow116 = floorf(fSlow113);
		float 	fSlow117 = (fSlow113 - fSlow116);
		float 	fSlow118 = (fSlow116 + (1.0f - fSlow113));
		float 	fSlow119 = (fConst5 * fSlow106);
		float 	fSlow120 = (fConst0 / fSlow110);
		float 	fSlow121 = (1.0f / fSlow106);
		int 	iSlow122 = int((fConst6 / fSlow106));
		float 	fSlow123 = max((0.5f * fSlow106), 23.448949682462139f);
		float 	fSlow124 = max(20.0f, fabsf(fSlow123));
		float 	fSlow125 = (fConst3 / fSlow124);
		float 	fSlow126 = max((float)0, min((float)2047, (fConst4 / fSlow123)));
		int 	iSlow127 = int(fSlow126);
		int 	iSlow128 = int((iSlow127 + 1));
		float 	fSlow129 = floorf(fSlow126);
		float 	fSlow130 = (fSlow126 - fSlow129);
		float 	fSlow131 = (fSlow129 + (1.0f - fSlow126));
		float 	fSlow132 = (fConst7 * fSlow106);
		float 	fSlow133 = (fConst0 / fSlow123);
		int 	iSlow134 = (float(fbutton3) > 0.0f);
		int 	iSlow135 = int(iSlow134);
		float 	fSlow136 = (float(iSlow134) * fSlow39);
		float 	fSlow137 = float(fslider15);
		float 	fSlow138 = float(fslider16);
		float 	fSlow139 = (fConst2 * fSlow138);
		float 	fSlow140 = (fConst0 / fSlow138);
		int 	iSlow141 = int(fSlow140);
		float 	fSlow142 = max(fSlow138, 23.448949682462139f);
		float 	fSlow143 = max(20.0f, fabsf(fSlow142));
		float 	fSlow144 = (fConst3 / fSlow143);
		float 	fSlow145 = max((float)0, min((float)2047, (fConst4 / fSlow142)));
		int 	iSlow146 = int(fSlow145);
		int 	iSlow147 = int((iSlow146 + 1));
		float 	fSlow148 = floorf(fSlow145);
		float 	fSlow149 = (fSlow145 - fSlow148);
		float 	fSlow150 = (fSlow148 + (1.0f - fSlow145));
		float 	fSlow151 = (fConst5 * fSlow138);
		float 	fSlow152 = (fConst0 / fSlow142);
		float 	fSlow153 = (1.0f / fSlow138);
		int 	iSlow154 = int((fConst6 / fSlow138));
		float 	fSlow155 = max((0.5f * fSlow138), 23.448949682462139f);
		float 	fSlow156 = max(20.0f, fabsf(fSlow155));
		float 	fSlow157 = (fConst3 / fSlow156);
		float 	fSlow158 = max((float)0, min((float)2047, (fConst4 / fSlow155)));
		int 	iSlow159 = int(fSlow158);
		int 	iSlow160 = int((iSlow159 + 1));
		float 	fSlow161 = floorf(fSlow158);
		float 	fSlow162 = (fSlow158 - fSlow161);
		float 	fSlow163 = (fSlow161 + (1.0f - fSlow158));
		float 	fSlow164 = (fConst7 * fSlow138);
		float 	fSlow165 = (fConst0 / fSlow155);
		int 	iSlow166 = (float(fbutton4) > 0.0f);
		int 	iSlow167 = int(iSlow166);
		float 	fSlow168 = (float(iSlow166) * fSlow39);
		float 	fSlow169 = float(fslider17);
		float 	fSlow170 = float(fslider18);
		float 	fSlow171 = (fConst2 * fSlow170);
		float 	fSlow172 = (fConst0 / fSlow170);
		int 	iSlow173 = int(fSlow172);
		float 	fSlow174 = max(fSlow170, 23.448949682462139f);
		float 	fSlow175 = max(20.0f, fabsf(fSlow174));
		float 	fSlow176 = (fConst3 / fSlow175);
		float 	fSlow177 = max((float)0, min((float)2047, (fConst4 / fSlow174)));
		int 	iSlow178 = int(fSlow177);
		int 	iSlow179 = int((iSlow178 + 1));
		float 	fSlow180 = floorf(fSlow177);
		float 	fSlow181 = (fSlow177 - fSlow180);
		float 	fSlow182 = (fSlow180 + (1.0f - fSlow177));
		float 	fSlow183 = (fConst5 * fSlow170);
		float 	fSlow184 = (fConst0 / fSlow174);
		float 	fSlow185 = (1.0f / fSlow170);
		int 	iSlow186 = int((fConst6 / fSlow170));
		float 	fSlow187 = max((0.5f * fSlow170), 23.448949682462139f);
		float 	fSlow188 = max(20.0f, fabsf(fSlow187));
		float 	fSlow189 = (fConst3 / fSlow188);
		float 	fSlow190 = max((float)0, min((float)2047, (fConst4 / fSlow187)));
		int 	iSlow191 = int(fSlow190);
		int 	iSlow192 = int((iSlow191 + 1));
		float 	fSlow193 = floorf(fSlow190);
		float 	fSlow194 = (fSlow190 - fSlow193);
		float 	fSlow195 = (fSlow193 + (1.0f - fSlow190));
		float 	fSlow196 = (fConst7 * fSlow170);
		float 	fSlow197 = (fConst0 / fSlow187);
		int 	iSlow198 = (float(fbutton5) > 0.0f);
		int 	iSlow199 = int(iSlow198);
		float 	fSlow200 = (float(iSlow198) * fSlow39);
		float 	fSlow201 = float(fslider19);
		//zone2b
		//zone3
		FAUSTFLOAT* output0 = output[0];
		//LoopGraphScalar
		for (int i=0; i<count; i++) {
			iVec0[0] = 1;
			fRec0[0] = (fSlow0 + (0.999f * fRec0[1]));
			fTempPerm0 = tanf((fConst1 * ((10000.0f * faustpower<2>(fRec0[0])) + 100.0f)));
			fTempPerm1 = (1.0f / fTempPerm0);
			fTempPerm2 = (((fTempPerm1 + 0.80000000000000004f) / fTempPerm0) + 1.0f);
			fTempPerm3 = (1.0f - (1.0f / faustpower<2>(fTempPerm0)));
			fTempPerm4 = (((fTempPerm1 + -0.80000000000000004f) / fTempPerm0) + 1.0f);
			fRec3[0] = (fSlow1 + (0.999f * fRec3[1]));
			fTempPerm5 = (0.10000000000000001f * (max((float)3, fRec3[0]) + -3.0f));
			fTempPerm6 = (fTempPerm5 + 1);
			fVec1[0] = 0.25f;
			iRec5[0] = ((iRec5[1] + iVec0[1]) % iSlow5);
			fTempPerm7 = ((fRec4[1] * (1 - float(((iRec5[0] == 0) > 0)))) + (fSlow3 * fTempPerm6));
			fRec4[0] = (fTempPerm7 - floorf(fTempPerm7));
			fTempPerm8 = faustpower<2>(((2.0f * fRec4[0]) + -1.0f));
			fVec2[0] = fTempPerm8;
			fTempPerm9 = min((float)1, max((float)0, (fRec3[0] + -2.0f)));
			fTempPerm10 = min((float)1, max((float)0, (2.0f - fRec3[0])));
			fTempPerm11 = (1.0f - (fTempPerm10 + fTempPerm9));
			fVec3[0] = fSlow7;
			fTempPerm12 = (fRec7[1] + (fConst2 * fVec3[1]));
			fRec7[0] = (fTempPerm12 - floorf(fTempPerm12));
			fTempPerm13 = faustpower<2>(((2.0f * fRec7[0]) + -1.0f));
			fVec4[0] = fTempPerm13;
			fTempPerm14 = float(iVec0[1]);
			fTempPerm15 = (fSlow8 * (fTempPerm14 * (fVec4[0] - fVec4[1])));
			fVec5[IOTA&4095] = fTempPerm15;
			fRec6[0] = ((fVec5[IOTA&4095] + (0.999f * fRec6[1])) - ((fSlow14 * fVec5[(IOTA-iSlow10)&4095]) + (fSlow13 * fVec5[(IOTA-iSlow11)&4095])));
			fTempPerm16 = min(0.5f, (0.5f * fRec3[0]));
			fTempPerm17 = max((float)0, min((float)2047, (fSlow16 * fTempPerm16)));
			iTempPerm18 = int(fTempPerm17);
			fTempPerm19 = floorf(fTempPerm17);
			fRec8[0] = (fSlow17 + (0.999f * fRec8[1]));
			fTempPerm20 = (1.0f - fRec8[0]);
			fRec9[0] = (fSlow18 + (0.999f * fRec9[1]));
			iTempPerm21 = (fRec9[0] >= 3.0f);
			fTempPerm22 = ((int((iTempPerm21 + (fRec9[0] == 0.0f))))?1.0f:max(max((float)1, ((0.02f * (fRec9[0] + -2.1000000000000001f)) + 1.0f)), ((0.02f * (1.0f - fRec9[0])) + 1.0f)));
			fTempPerm23 = ((int(iTempPerm21))?1.4983f:1.0f);
			fTempPerm24 = (fTempPerm23 / fTempPerm22);
			fTempPerm25 = max((fSlow2 * fTempPerm24), 23.448949682462139f);
			fTempPerm26 = max(20.0f, fabsf(fTempPerm25));
			fVec6[0] = fTempPerm26;
			fTempPerm27 = (fRec10[1] + (fConst2 * fVec6[1]));
			fRec10[0] = (fTempPerm27 - floorf(fTempPerm27));
			fTempPerm28 = faustpower<2>(((2.0f * fRec10[0]) + -1.0f));
			fVec7[0] = fTempPerm28;
			fTempPerm29 = ((fTempPerm14 * (fVec7[0] - fVec7[1])) / fVec6[0]);
			fVec8[IOTA&4095] = fTempPerm29;
			fTempPerm30 = max((float)0, min((float)2047, (fConst0 * (fTempPerm16 / fTempPerm25))));
			iTempPerm31 = int(fTempPerm30);
			fTempPerm32 = floorf(fTempPerm30);
			fTempPerm33 = (fTempPerm5 + fTempPerm24);
			fTempPerm34 = (fTempPerm22 / fTempPerm23);
			iRec12[0] = ((iRec12[1] + iVec0[1]) % int((fSlow4 * fTempPerm34)));
			fTempPerm35 = ((fRec11[1] * (1 - float(((iRec12[0] == 0) > 0)))) + (fSlow3 * fTempPerm33));
			fRec11[0] = (fTempPerm35 - floorf(fTempPerm35));
			fTempPerm36 = faustpower<2>(((2.0f * fRec11[0]) + -1.0f));
			fVec9[0] = fTempPerm36;
			fTempPerm37 = ((fSlow19 * (((fTempPerm9 * (fVec9[0] - fVec9[1])) * fVec1[1]) / fTempPerm33)) + (0.25f * (fTempPerm10 * ((fVec8[IOTA&4095] - (fVec8[(IOTA-iTempPerm31)&4095] * (fTempPerm32 + (1.0f - fTempPerm30)))) - ((fTempPerm30 - fTempPerm32) * fVec8[(IOTA-int((iTempPerm31 + 1)))&4095])))));
			fTempPerm38 = max((float)0, min((float)2047, (fConst4 / fTempPerm25)));
			iTempPerm39 = int(fTempPerm38);
			fTempPerm40 = floorf(fTempPerm38);
			fRec13[0] = ((0.999f * fRec13[1]) + (fConst3 * ((fVec8[IOTA&4095] - (fVec8[(IOTA-iTempPerm39)&4095] * (fTempPerm40 + (1.0f - fTempPerm38)))) - ((fTempPerm38 - fTempPerm40) * fVec8[(IOTA-int((iTempPerm39 + 1)))&4095]))));
			fTempPerm41 = (fRec13[0] * fTempPerm23);
			fTempPerm42 = min((float)1, max((float)0, (2.0f - fRec9[0])));
			fTempPerm43 = (1.0f - fTempPerm42);
			fTempPerm44 = max((fSlow2 * fTempPerm22), 23.448949682462139f);
			fTempPerm45 = max(20.0f, fabsf(fTempPerm44));
			fVec10[0] = fTempPerm45;
			fTempPerm46 = (fRec14[1] + (fConst2 * fVec10[1]));
			fRec14[0] = (fTempPerm46 - floorf(fTempPerm46));
			fTempPerm47 = faustpower<2>(((2.0f * fRec14[0]) + -1.0f));
			fVec11[0] = fTempPerm47;
			fTempPerm48 = ((fTempPerm14 * (fVec11[0] - fVec11[1])) / fVec10[0]);
			fVec12[IOTA&4095] = fTempPerm48;
			fTempPerm49 = max((float)0, min((float)2047, (fConst0 * (fTempPerm16 / fTempPerm44))));
			iTempPerm50 = int(fTempPerm49);
			fTempPerm51 = floorf(fTempPerm49);
			fTempPerm52 = (fTempPerm22 + fTempPerm5);
			iRec16[0] = ((iRec16[1] + iVec0[1]) % int((fSlow4 / fTempPerm22)));
			fTempPerm53 = ((fRec15[1] * (1 - float(((iRec16[0] == 0) > 0)))) + (fSlow3 * fTempPerm52));
			fRec15[0] = (fTempPerm53 - floorf(fTempPerm53));
			fTempPerm54 = faustpower<2>(((2.0f * fRec15[0]) + -1.0f));
			fVec13[0] = fTempPerm54;
			fTempPerm55 = ((fSlow19 * (((fTempPerm9 * (fVec13[0] - fVec13[1])) * fVec1[1]) / fTempPerm52)) + (0.25f * (fTempPerm10 * ((fVec12[IOTA&4095] - (fVec12[(IOTA-iTempPerm50)&4095] * (fTempPerm51 + (1.0f - fTempPerm49)))) - ((fTempPerm49 - fTempPerm51) * fVec12[(IOTA-int((iTempPerm50 + 1)))&4095])))));
			fTempPerm56 = max((float)0, min((float)2047, (fConst4 / fTempPerm44)));
			iTempPerm57 = int(fTempPerm56);
			fTempPerm58 = floorf(fTempPerm56);
			fRec17[0] = ((0.999f * fRec17[1]) + (fConst3 * ((fVec12[IOTA&4095] - (fVec12[(IOTA-iTempPerm57)&4095] * (fTempPerm58 + (1.0f - fTempPerm56)))) - ((fTempPerm56 - fTempPerm58) * fVec12[(IOTA-int((iTempPerm57 + 1)))&4095]))));
			fTempPerm59 = (fRec17[0] * fTempPerm22);
			fTempPerm60 = float((fRec9[0] < 2.0f));
			fTempPerm61 = float((fRec9[0] >= 2.0f));
			fTempPerm62 = (fTempPerm5 + 0.5f);
			iRec19[0] = ((iRec19[1] + iVec0[1]) % iSlow20);
			fTempPerm63 = ((fRec18[1] * (1 - float(((iRec19[0] == 0) > 0)))) + (fSlow3 * fTempPerm62));
			fRec18[0] = (fTempPerm63 - floorf(fTempPerm63));
			fTempPerm64 = faustpower<2>(((2.0f * fRec18[0]) + -1.0f));
			fVec14[0] = fTempPerm64;
			fVec15[0] = fSlow22;
			fTempPerm65 = (fRec21[1] + (fConst2 * fVec15[1]));
			fRec21[0] = (fTempPerm65 - floorf(fTempPerm65));
			fTempPerm66 = faustpower<2>(((2.0f * fRec21[0]) + -1.0f));
			fVec16[0] = fTempPerm66;
			fTempPerm67 = (fSlow23 * (fTempPerm14 * (fVec16[0] - fVec16[1])));
			fVec17[IOTA&4095] = fTempPerm67;
			fRec20[0] = ((fVec17[IOTA&4095] + (0.999f * fRec20[1])) - ((fSlow29 * fVec17[(IOTA-iSlow25)&4095]) + (fSlow28 * fVec17[(IOTA-iSlow26)&4095])));
			fTempPerm68 = max((float)0, min((float)2047, (fSlow31 * fTempPerm16)));
			iTempPerm69 = int(fTempPerm68);
			fTempPerm70 = floorf(fTempPerm68);
			fRec2[0] = (((fRec8[0] * (((fTempPerm10 * (fVec17[IOTA&4095] - ((fVec17[(IOTA-iTempPerm69)&4095] * (fTempPerm70 + (1.0f - fTempPerm68))) + ((fTempPerm68 - fTempPerm70) * fVec17[(IOTA-int((iTempPerm69 + 1)))&4095])))) + (fSlow30 * (fRec20[0] * fTempPerm11))) + (fSlow4 * (((fTempPerm9 * (fVec14[0] - fVec14[1])) * fVec1[1]) / fTempPerm62)))) + (((fTempPerm61 * ((fConst0 * (fTempPerm55 + fTempPerm37)) + (fSlow15 * (fTempPerm11 * (fTempPerm59 + (fTempPerm41 / fTempPerm22)))))) + ((fTempPerm60 * ((fSlow15 * (fTempPerm59 * fTempPerm11)) + (fConst0 * fTempPerm55))) * (fTempPerm43 + (fTempPerm42 * ((fSlow15 * ((fTempPerm41 * fTempPerm11) / fTempPerm22)) + (fConst0 * fTempPerm37)))))) + (fTempPerm20 * (((fTempPerm10 * (fVec5[IOTA&4095] - ((fVec5[(IOTA-iTempPerm18)&4095] * (fTempPerm19 + (1.0f - fTempPerm17))) + ((fTempPerm17 - fTempPerm19) * fVec5[(IOTA-int((iTempPerm18 + 1)))&4095])))) + (fSlow15 * (fRec6[0] * fTempPerm11))) + (fSlow4 * (((fTempPerm9 * (fVec2[0] - fVec2[1])) * fVec1[1]) / fTempPerm6)))))) - (((fTempPerm4 * fRec2[2]) + (2.0f * (fTempPerm3 * fRec2[1]))) / fTempPerm2));
			fRec1[0] = ((((fRec2[1] + (0.5f * fRec2[0])) + (0.5f * fRec2[2])) - ((fTempPerm4 * fRec1[2]) + (2.0f * (fTempPerm3 * fRec1[1])))) / fTempPerm2);
			iRec23[0] = (iSlow37 * (iRec23[1] + 1));
			iTempPerm71 = int((iRec23[0] < iSlow36));
			fTempPerm72 = expf((0 - (fConst8 / ((iSlow38)?((iTempPerm71)?fSlow35:fSlow33):fSlow32))));
			fRec22[0] = ((fRec22[1] * fTempPerm72) + (((iSlow38)?((iTempPerm71)?1.5873015873015872f:fSlow40):0.0f) * (1.0f - fTempPerm72)));
			iRec27[0] = ((iRec27[1] + iVec0[1]) % iSlow45);
			fTempPerm73 = ((fRec26[1] * (1 - float(((iRec27[0] == 0) > 0)))) + (fSlow43 * fTempPerm6));
			fRec26[0] = (fTempPerm73 - floorf(fTempPerm73));
			fTempPerm74 = faustpower<2>(((2.0f * fRec26[0]) + -1.0f));
			fVec18[0] = fTempPerm74;
			fVec19[0] = fSlow47;
			fTempPerm75 = (fRec29[1] + (fConst2 * fVec19[1]));
			fRec29[0] = (fTempPerm75 - floorf(fTempPerm75));
			fTempPerm76 = faustpower<2>(((2.0f * fRec29[0]) + -1.0f));
			fVec20[0] = fTempPerm76;
			fTempPerm77 = (fSlow48 * (fTempPerm14 * (fVec20[0] - fVec20[1])));
			fVec21[IOTA&4095] = fTempPerm77;
			fRec28[0] = ((fVec21[IOTA&4095] + (0.999f * fRec28[1])) - ((fSlow54 * fVec21[(IOTA-iSlow50)&4095]) + (fSlow53 * fVec21[(IOTA-iSlow51)&4095])));
			fTempPerm78 = max((float)0, min((float)2047, (fSlow56 * fTempPerm16)));
			iTempPerm79 = int(fTempPerm78);
			fTempPerm80 = floorf(fTempPerm78);
			fTempPerm81 = max((fSlow42 * fTempPerm24), 23.448949682462139f);
			fTempPerm82 = max(20.0f, fabsf(fTempPerm81));
			fVec22[0] = fTempPerm82;
			fTempPerm83 = (fRec30[1] + (fConst2 * fVec22[1]));
			fRec30[0] = (fTempPerm83 - floorf(fTempPerm83));
			fTempPerm84 = faustpower<2>(((2.0f * fRec30[0]) + -1.0f));
			fVec23[0] = fTempPerm84;
			fTempPerm85 = ((fTempPerm14 * (fVec23[0] - fVec23[1])) / fVec22[0]);
			fVec24[IOTA&4095] = fTempPerm85;
			fTempPerm86 = max((float)0, min((float)2047, (fConst0 * (fTempPerm16 / fTempPerm81))));
			iTempPerm87 = int(fTempPerm86);
			fTempPerm88 = floorf(fTempPerm86);
			iRec32[0] = ((iRec32[1] + iVec0[1]) % int((fSlow44 * fTempPerm34)));
			fTempPerm89 = ((fRec31[1] * (1 - float(((iRec32[0] == 0) > 0)))) + (fSlow43 * fTempPerm33));
			fRec31[0] = (fTempPerm89 - floorf(fTempPerm89));
			fTempPerm90 = faustpower<2>(((2.0f * fRec31[0]) + -1.0f));
			fVec25[0] = fTempPerm90;
			fTempPerm91 = ((fSlow57 * (((fTempPerm9 * (fVec25[0] - fVec25[1])) * fVec1[1]) / fTempPerm33)) + (0.25f * (fTempPerm10 * ((fVec24[IOTA&4095] - (fVec24[(IOTA-iTempPerm87)&4095] * (fTempPerm88 + (1.0f - fTempPerm86)))) - ((fTempPerm86 - fTempPerm88) * fVec24[(IOTA-int((iTempPerm87 + 1)))&4095])))));
			fTempPerm92 = max((float)0, min((float)2047, (fConst4 / fTempPerm81)));
			iTempPerm93 = int(fTempPerm92);
			fTempPerm94 = floorf(fTempPerm92);
			fRec33[0] = ((0.999f * fRec33[1]) + (fConst3 * ((fVec24[IOTA&4095] - (fVec24[(IOTA-iTempPerm93)&4095] * (fTempPerm94 + (1.0f - fTempPerm92)))) - ((fTempPerm92 - fTempPerm94) * fVec24[(IOTA-int((iTempPerm93 + 1)))&4095]))));
			fTempPerm95 = (fRec33[0] * fTempPerm23);
			fTempPerm96 = max((fSlow42 * fTempPerm22), 23.448949682462139f);
			fTempPerm97 = max(20.0f, fabsf(fTempPerm96));
			fVec26[0] = fTempPerm97;
			fTempPerm98 = (fRec34[1] + (fConst2 * fVec26[1]));
			fRec34[0] = (fTempPerm98 - floorf(fTempPerm98));
			fTempPerm99 = faustpower<2>(((2.0f * fRec34[0]) + -1.0f));
			fVec27[0] = fTempPerm99;
			fTempPerm100 = ((fTempPerm14 * (fVec27[0] - fVec27[1])) / fVec26[0]);
			fVec28[IOTA&4095] = fTempPerm100;
			fTempPerm101 = max((float)0, min((float)2047, (fConst0 * (fTempPerm16 / fTempPerm96))));
			iTempPerm102 = int(fTempPerm101);
			fTempPerm103 = floorf(fTempPerm101);
			iRec36[0] = ((iRec36[1] + iVec0[1]) % int((fSlow44 / fTempPerm22)));
			fTempPerm104 = ((fRec35[1] * (1 - float(((iRec36[0] == 0) > 0)))) + (fSlow43 * fTempPerm52));
			fRec35[0] = (fTempPerm104 - floorf(fTempPerm104));
			fTempPerm105 = faustpower<2>(((2.0f * fRec35[0]) + -1.0f));
			fVec29[0] = fTempPerm105;
			fTempPerm106 = ((fSlow57 * (((fTempPerm9 * (fVec29[0] - fVec29[1])) * fVec1[1]) / fTempPerm52)) + (0.25f * (fTempPerm10 * ((fVec28[IOTA&4095] - (fVec28[(IOTA-iTempPerm102)&4095] * (fTempPerm103 + (1.0f - fTempPerm101)))) - ((fTempPerm101 - fTempPerm103) * fVec28[(IOTA-int((iTempPerm102 + 1)))&4095])))));
			fTempPerm107 = max((float)0, min((float)2047, (fConst4 / fTempPerm96)));
			iTempPerm108 = int(fTempPerm107);
			fTempPerm109 = floorf(fTempPerm107);
			fRec37[0] = ((0.999f * fRec37[1]) + (fConst3 * ((fVec28[IOTA&4095] - (fVec28[(IOTA-iTempPerm108)&4095] * (fTempPerm109 + (1.0f - fTempPerm107)))) - ((fTempPerm107 - fTempPerm109) * fVec28[(IOTA-int((iTempPerm108 + 1)))&4095]))));
			fTempPerm110 = (fRec37[0] * fTempPerm22);
			iRec39[0] = ((iRec39[1] + iVec0[1]) % iSlow58);
			fTempPerm111 = ((fRec38[1] * (1 - float(((iRec39[0] == 0) > 0)))) + (fSlow43 * fTempPerm62));
			fRec38[0] = (fTempPerm111 - floorf(fTempPerm111));
			fTempPerm112 = faustpower<2>(((2.0f * fRec38[0]) + -1.0f));
			fVec30[0] = fTempPerm112;
			fVec31[0] = fSlow60;
			fTempPerm113 = (fRec41[1] + (fConst2 * fVec31[1]));
			fRec41[0] = (fTempPerm113 - floorf(fTempPerm113));
			fTempPerm114 = faustpower<2>(((2.0f * fRec41[0]) + -1.0f));
			fVec32[0] = fTempPerm114;
			fTempPerm115 = (fSlow61 * (fTempPerm14 * (fVec32[0] - fVec32[1])));
			fVec33[IOTA&4095] = fTempPerm115;
			fRec40[0] = ((fVec33[IOTA&4095] + (0.999f * fRec40[1])) - ((fSlow67 * fVec33[(IOTA-iSlow63)&4095]) + (fSlow66 * fVec33[(IOTA-iSlow64)&4095])));
			fTempPerm116 = max((float)0, min((float)2047, (fSlow69 * fTempPerm16)));
			iTempPerm117 = int(fTempPerm116);
			fTempPerm118 = floorf(fTempPerm116);
			fRec25[0] = (((fRec8[0] * (((fTempPerm10 * (fVec33[IOTA&4095] - ((fVec33[(IOTA-iTempPerm117)&4095] * (fTempPerm118 + (1.0f - fTempPerm116))) + ((fTempPerm116 - fTempPerm118) * fVec33[(IOTA-int((iTempPerm117 + 1)))&4095])))) + (fSlow68 * (fRec40[0] * fTempPerm11))) + (fSlow44 * (((fTempPerm9 * (fVec30[0] - fVec30[1])) * fVec1[1]) / fTempPerm62)))) + (((fTempPerm61 * ((fConst0 * (fTempPerm106 + fTempPerm91)) + (fSlow55 * (fTempPerm11 * (fTempPerm110 + (fTempPerm95 / fTempPerm22)))))) + ((fTempPerm60 * ((fSlow55 * (fTempPerm110 * fTempPerm11)) + (fConst0 * fTempPerm106))) * (fTempPerm43 + (fTempPerm42 * ((fSlow55 * ((fTempPerm95 * fTempPerm11) / fTempPerm22)) + (fConst0 * fTempPerm91)))))) + (fTempPerm20 * (((fTempPerm10 * (fVec21[IOTA&4095] - ((fVec21[(IOTA-iTempPerm79)&4095] * (fTempPerm80 + (1.0f - fTempPerm78))) + ((fTempPerm78 - fTempPerm80) * fVec21[(IOTA-int((iTempPerm79 + 1)))&4095])))) + (fSlow55 * (fRec28[0] * fTempPerm11))) + (fSlow44 * (((fTempPerm9 * (fVec18[0] - fVec18[1])) * fVec1[1]) / fTempPerm6)))))) - (((fTempPerm4 * fRec25[2]) + (2.0f * (fTempPerm3 * fRec25[1]))) / fTempPerm2));
			fRec24[0] = ((((fRec25[1] + (0.5f * fRec25[0])) + (0.5f * fRec25[2])) - ((fTempPerm4 * fRec24[2]) + (2.0f * (fTempPerm3 * fRec24[1])))) / fTempPerm2);
			iRec43[0] = (iSlow70 * (iRec43[1] + 1));
			iTempPerm119 = int((iRec43[0] < iSlow36));
			fTempPerm120 = expf((0 - (fConst8 / ((iSlow71)?((iTempPerm119)?fSlow35:fSlow33):fSlow32))));
			fRec42[0] = ((fRec42[1] * fTempPerm120) + (((iSlow71)?((iTempPerm119)?1.5873015873015872f:fSlow72):0.0f) * (1.0f - fTempPerm120)));
			iRec47[0] = ((iRec47[1] + iVec0[1]) % iSlow77);
			fTempPerm121 = ((fRec46[1] * (1 - float(((iRec47[0] == 0) > 0)))) + (fSlow75 * fTempPerm6));
			fRec46[0] = (fTempPerm121 - floorf(fTempPerm121));
			fTempPerm122 = faustpower<2>(((2.0f * fRec46[0]) + -1.0f));
			fVec34[0] = fTempPerm122;
			fVec35[0] = fSlow79;
			fTempPerm123 = (fRec49[1] + (fConst2 * fVec35[1]));
			fRec49[0] = (fTempPerm123 - floorf(fTempPerm123));
			fTempPerm124 = faustpower<2>(((2.0f * fRec49[0]) + -1.0f));
			fVec36[0] = fTempPerm124;
			fTempPerm125 = (fSlow80 * (fTempPerm14 * (fVec36[0] - fVec36[1])));
			fVec37[IOTA&4095] = fTempPerm125;
			fRec48[0] = ((fVec37[IOTA&4095] + (0.999f * fRec48[1])) - ((fSlow86 * fVec37[(IOTA-iSlow82)&4095]) + (fSlow85 * fVec37[(IOTA-iSlow83)&4095])));
			fTempPerm126 = max((float)0, min((float)2047, (fSlow88 * fTempPerm16)));
			iTempPerm127 = int(fTempPerm126);
			fTempPerm128 = floorf(fTempPerm126);
			fTempPerm129 = max((fSlow74 * fTempPerm24), 23.448949682462139f);
			fTempPerm130 = max(20.0f, fabsf(fTempPerm129));
			fVec38[0] = fTempPerm130;
			fTempPerm131 = (fRec50[1] + (fConst2 * fVec38[1]));
			fRec50[0] = (fTempPerm131 - floorf(fTempPerm131));
			fTempPerm132 = faustpower<2>(((2.0f * fRec50[0]) + -1.0f));
			fVec39[0] = fTempPerm132;
			fTempPerm133 = ((fTempPerm14 * (fVec39[0] - fVec39[1])) / fVec38[0]);
			fVec40[IOTA&4095] = fTempPerm133;
			fTempPerm134 = max((float)0, min((float)2047, (fConst0 * (fTempPerm16 / fTempPerm129))));
			iTempPerm135 = int(fTempPerm134);
			fTempPerm136 = floorf(fTempPerm134);
			iRec52[0] = ((iRec52[1] + iVec0[1]) % int((fSlow76 * fTempPerm34)));
			fTempPerm137 = ((fRec51[1] * (1 - float(((iRec52[0] == 0) > 0)))) + (fSlow75 * fTempPerm33));
			fRec51[0] = (fTempPerm137 - floorf(fTempPerm137));
			fTempPerm138 = faustpower<2>(((2.0f * fRec51[0]) + -1.0f));
			fVec41[0] = fTempPerm138;
			fTempPerm139 = ((fSlow89 * (((fTempPerm9 * (fVec41[0] - fVec41[1])) * fVec1[1]) / fTempPerm33)) + (0.25f * (fTempPerm10 * ((fVec40[IOTA&4095] - (fVec40[(IOTA-iTempPerm135)&4095] * (fTempPerm136 + (1.0f - fTempPerm134)))) - ((fTempPerm134 - fTempPerm136) * fVec40[(IOTA-int((iTempPerm135 + 1)))&4095])))));
			fTempPerm140 = max((float)0, min((float)2047, (fConst4 / fTempPerm129)));
			iTempPerm141 = int(fTempPerm140);
			fTempPerm142 = floorf(fTempPerm140);
			fRec53[0] = ((0.999f * fRec53[1]) + (fConst3 * ((fVec40[IOTA&4095] - (fVec40[(IOTA-iTempPerm141)&4095] * (fTempPerm142 + (1.0f - fTempPerm140)))) - ((fTempPerm140 - fTempPerm142) * fVec40[(IOTA-int((iTempPerm141 + 1)))&4095]))));
			fTempPerm143 = (fRec53[0] * fTempPerm23);
			fTempPerm144 = max((fSlow74 * fTempPerm22), 23.448949682462139f);
			fTempPerm145 = max(20.0f, fabsf(fTempPerm144));
			fVec42[0] = fTempPerm145;
			fTempPerm146 = (fRec54[1] + (fConst2 * fVec42[1]));
			fRec54[0] = (fTempPerm146 - floorf(fTempPerm146));
			fTempPerm147 = faustpower<2>(((2.0f * fRec54[0]) + -1.0f));
			fVec43[0] = fTempPerm147;
			fTempPerm148 = ((fTempPerm14 * (fVec43[0] - fVec43[1])) / fVec42[0]);
			fVec44[IOTA&4095] = fTempPerm148;
			fTempPerm149 = max((float)0, min((float)2047, (fConst0 * (fTempPerm16 / fTempPerm144))));
			iTempPerm150 = int(fTempPerm149);
			fTempPerm151 = floorf(fTempPerm149);
			iRec56[0] = ((iRec56[1] + iVec0[1]) % int((fSlow76 / fTempPerm22)));
			fTempPerm152 = ((fRec55[1] * (1 - float(((iRec56[0] == 0) > 0)))) + (fSlow75 * fTempPerm52));
			fRec55[0] = (fTempPerm152 - floorf(fTempPerm152));
			fTempPerm153 = faustpower<2>(((2.0f * fRec55[0]) + -1.0f));
			fVec45[0] = fTempPerm153;
			fTempPerm154 = ((fSlow89 * (((fTempPerm9 * (fVec45[0] - fVec45[1])) * fVec1[1]) / fTempPerm52)) + (0.25f * (fTempPerm10 * ((fVec44[IOTA&4095] - (fVec44[(IOTA-iTempPerm150)&4095] * (fTempPerm151 + (1.0f - fTempPerm149)))) - ((fTempPerm149 - fTempPerm151) * fVec44[(IOTA-int((iTempPerm150 + 1)))&4095])))));
			fTempPerm155 = max((float)0, min((float)2047, (fConst4 / fTempPerm144)));
			iTempPerm156 = int(fTempPerm155);
			fTempPerm157 = floorf(fTempPerm155);
			fRec57[0] = ((0.999f * fRec57[1]) + (fConst3 * ((fVec44[IOTA&4095] - (fVec44[(IOTA-iTempPerm156)&4095] * (fTempPerm157 + (1.0f - fTempPerm155)))) - ((fTempPerm155 - fTempPerm157) * fVec44[(IOTA-int((iTempPerm156 + 1)))&4095]))));
			fTempPerm158 = (fRec57[0] * fTempPerm22);
			iRec59[0] = ((iRec59[1] + iVec0[1]) % iSlow90);
			fTempPerm159 = ((fRec58[1] * (1 - float(((iRec59[0] == 0) > 0)))) + (fSlow75 * fTempPerm62));
			fRec58[0] = (fTempPerm159 - floorf(fTempPerm159));
			fTempPerm160 = faustpower<2>(((2.0f * fRec58[0]) + -1.0f));
			fVec46[0] = fTempPerm160;
			fVec47[0] = fSlow92;
			fTempPerm161 = (fRec61[1] + (fConst2 * fVec47[1]));
			fRec61[0] = (fTempPerm161 - floorf(fTempPerm161));
			fTempPerm162 = faustpower<2>(((2.0f * fRec61[0]) + -1.0f));
			fVec48[0] = fTempPerm162;
			fTempPerm163 = (fSlow93 * (fTempPerm14 * (fVec48[0] - fVec48[1])));
			fVec49[IOTA&4095] = fTempPerm163;
			fRec60[0] = ((fVec49[IOTA&4095] + (0.999f * fRec60[1])) - ((fSlow99 * fVec49[(IOTA-iSlow95)&4095]) + (fSlow98 * fVec49[(IOTA-iSlow96)&4095])));
			fTempPerm164 = max((float)0, min((float)2047, (fSlow101 * fTempPerm16)));
			iTempPerm165 = int(fTempPerm164);
			fTempPerm166 = floorf(fTempPerm164);
			fRec45[0] = (((fRec8[0] * (((fTempPerm10 * (fVec49[IOTA&4095] - ((fVec49[(IOTA-iTempPerm165)&4095] * (fTempPerm166 + (1.0f - fTempPerm164))) + ((fTempPerm164 - fTempPerm166) * fVec49[(IOTA-int((iTempPerm165 + 1)))&4095])))) + (fSlow100 * (fRec60[0] * fTempPerm11))) + (fSlow76 * (((fTempPerm9 * (fVec46[0] - fVec46[1])) * fVec1[1]) / fTempPerm62)))) + (((fTempPerm61 * ((fConst0 * (fTempPerm154 + fTempPerm139)) + (fSlow87 * (fTempPerm11 * (fTempPerm158 + (fTempPerm143 / fTempPerm22)))))) + ((fTempPerm60 * ((fSlow87 * (fTempPerm158 * fTempPerm11)) + (fConst0 * fTempPerm154))) * (fTempPerm43 + (fTempPerm42 * ((fSlow87 * ((fTempPerm143 * fTempPerm11) / fTempPerm22)) + (fConst0 * fTempPerm139)))))) + (fTempPerm20 * (((fTempPerm10 * (fVec37[IOTA&4095] - ((fVec37[(IOTA-iTempPerm127)&4095] * (fTempPerm128 + (1.0f - fTempPerm126))) + ((fTempPerm126 - fTempPerm128) * fVec37[(IOTA-int((iTempPerm127 + 1)))&4095])))) + (fSlow87 * (fRec48[0] * fTempPerm11))) + (fSlow76 * (((fTempPerm9 * (fVec34[0] - fVec34[1])) * fVec1[1]) / fTempPerm6)))))) - (((fTempPerm4 * fRec45[2]) + (2.0f * (fTempPerm3 * fRec45[1]))) / fTempPerm2));
			fRec44[0] = ((((fRec45[1] + (0.5f * fRec45[0])) + (0.5f * fRec45[2])) - ((fTempPerm4 * fRec44[2]) + (2.0f * (fTempPerm3 * fRec44[1])))) / fTempPerm2);
			iRec63[0] = (iSlow102 * (iRec63[1] + 1));
			iTempPerm167 = int((iRec63[0] < iSlow36));
			fTempPerm168 = expf((0 - (fConst8 / ((iSlow103)?((iTempPerm167)?fSlow35:fSlow33):fSlow32))));
			fRec62[0] = ((fRec62[1] * fTempPerm168) + (((iSlow103)?((iTempPerm167)?1.5873015873015872f:fSlow104):0.0f) * (1.0f - fTempPerm168)));
			iRec67[0] = ((iRec67[1] + iVec0[1]) % iSlow109);
			fTempPerm169 = ((fRec66[1] * (1 - float(((iRec67[0] == 0) > 0)))) + (fSlow107 * fTempPerm6));
			fRec66[0] = (fTempPerm169 - floorf(fTempPerm169));
			fTempPerm170 = faustpower<2>(((2.0f * fRec66[0]) + -1.0f));
			fVec50[0] = fTempPerm170;
			fVec51[0] = fSlow111;
			fTempPerm171 = (fRec69[1] + (fConst2 * fVec51[1]));
			fRec69[0] = (fTempPerm171 - floorf(fTempPerm171));
			fTempPerm172 = faustpower<2>(((2.0f * fRec69[0]) + -1.0f));
			fVec52[0] = fTempPerm172;
			fTempPerm173 = (fSlow112 * (fTempPerm14 * (fVec52[0] - fVec52[1])));
			fVec53[IOTA&4095] = fTempPerm173;
			fRec68[0] = ((fVec53[IOTA&4095] + (0.999f * fRec68[1])) - ((fSlow118 * fVec53[(IOTA-iSlow114)&4095]) + (fSlow117 * fVec53[(IOTA-iSlow115)&4095])));
			fTempPerm174 = max((float)0, min((float)2047, (fSlow120 * fTempPerm16)));
			iTempPerm175 = int(fTempPerm174);
			fTempPerm176 = floorf(fTempPerm174);
			fTempPerm177 = max((fSlow106 * fTempPerm24), 23.448949682462139f);
			fTempPerm178 = max(20.0f, fabsf(fTempPerm177));
			fVec54[0] = fTempPerm178;
			fTempPerm179 = (fRec70[1] + (fConst2 * fVec54[1]));
			fRec70[0] = (fTempPerm179 - floorf(fTempPerm179));
			fTempPerm180 = faustpower<2>(((2.0f * fRec70[0]) + -1.0f));
			fVec55[0] = fTempPerm180;
			fTempPerm181 = ((fTempPerm14 * (fVec55[0] - fVec55[1])) / fVec54[0]);
			fVec56[IOTA&4095] = fTempPerm181;
			fTempPerm182 = max((float)0, min((float)2047, (fConst0 * (fTempPerm16 / fTempPerm177))));
			iTempPerm183 = int(fTempPerm182);
			fTempPerm184 = floorf(fTempPerm182);
			iRec72[0] = ((iRec72[1] + iVec0[1]) % int((fSlow108 * fTempPerm34)));
			fTempPerm185 = ((fRec71[1] * (1 - float(((iRec72[0] == 0) > 0)))) + (fSlow107 * fTempPerm33));
			fRec71[0] = (fTempPerm185 - floorf(fTempPerm185));
			fTempPerm186 = faustpower<2>(((2.0f * fRec71[0]) + -1.0f));
			fVec57[0] = fTempPerm186;
			fTempPerm187 = ((fSlow121 * (((fTempPerm9 * (fVec57[0] - fVec57[1])) * fVec1[1]) / fTempPerm33)) + (0.25f * (fTempPerm10 * ((fVec56[IOTA&4095] - (fVec56[(IOTA-iTempPerm183)&4095] * (fTempPerm184 + (1.0f - fTempPerm182)))) - ((fTempPerm182 - fTempPerm184) * fVec56[(IOTA-int((iTempPerm183 + 1)))&4095])))));
			fTempPerm188 = max((float)0, min((float)2047, (fConst4 / fTempPerm177)));
			iTempPerm189 = int(fTempPerm188);
			fTempPerm190 = floorf(fTempPerm188);
			fRec73[0] = ((0.999f * fRec73[1]) + (fConst3 * ((fVec56[IOTA&4095] - (fVec56[(IOTA-iTempPerm189)&4095] * (fTempPerm190 + (1.0f - fTempPerm188)))) - ((fTempPerm188 - fTempPerm190) * fVec56[(IOTA-int((iTempPerm189 + 1)))&4095]))));
			fTempPerm191 = (fRec73[0] * fTempPerm23);
			fTempPerm192 = max((fSlow106 * fTempPerm22), 23.448949682462139f);
			fTempPerm193 = max(20.0f, fabsf(fTempPerm192));
			fVec58[0] = fTempPerm193;
			fTempPerm194 = (fRec74[1] + (fConst2 * fVec58[1]));
			fRec74[0] = (fTempPerm194 - floorf(fTempPerm194));
			fTempPerm195 = faustpower<2>(((2.0f * fRec74[0]) + -1.0f));
			fVec59[0] = fTempPerm195;
			fTempPerm196 = ((fTempPerm14 * (fVec59[0] - fVec59[1])) / fVec58[0]);
			fVec60[IOTA&4095] = fTempPerm196;
			fTempPerm197 = max((float)0, min((float)2047, (fConst0 * (fTempPerm16 / fTempPerm192))));
			iTempPerm198 = int(fTempPerm197);
			fTempPerm199 = floorf(fTempPerm197);
			iRec76[0] = ((iRec76[1] + iVec0[1]) % int((fSlow108 / fTempPerm22)));
			fTempPerm200 = ((fRec75[1] * (1 - float(((iRec76[0] == 0) > 0)))) + (fSlow107 * fTempPerm52));
			fRec75[0] = (fTempPerm200 - floorf(fTempPerm200));
			fTempPerm201 = faustpower<2>(((2.0f * fRec75[0]) + -1.0f));
			fVec61[0] = fTempPerm201;
			fTempPerm202 = ((fSlow121 * (((fTempPerm9 * (fVec61[0] - fVec61[1])) * fVec1[1]) / fTempPerm52)) + (0.25f * (fTempPerm10 * ((fVec60[IOTA&4095] - (fVec60[(IOTA-iTempPerm198)&4095] * (fTempPerm199 + (1.0f - fTempPerm197)))) - ((fTempPerm197 - fTempPerm199) * fVec60[(IOTA-int((iTempPerm198 + 1)))&4095])))));
			fTempPerm203 = max((float)0, min((float)2047, (fConst4 / fTempPerm192)));
			iTempPerm204 = int(fTempPerm203);
			fTempPerm205 = floorf(fTempPerm203);
			fRec77[0] = ((0.999f * fRec77[1]) + (fConst3 * ((fVec60[IOTA&4095] - (fVec60[(IOTA-iTempPerm204)&4095] * (fTempPerm205 + (1.0f - fTempPerm203)))) - ((fTempPerm203 - fTempPerm205) * fVec60[(IOTA-int((iTempPerm204 + 1)))&4095]))));
			fTempPerm206 = (fRec77[0] * fTempPerm22);
			iRec79[0] = ((iRec79[1] + iVec0[1]) % iSlow122);
			fTempPerm207 = ((fRec78[1] * (1 - float(((iRec79[0] == 0) > 0)))) + (fSlow107 * fTempPerm62));
			fRec78[0] = (fTempPerm207 - floorf(fTempPerm207));
			fTempPerm208 = faustpower<2>(((2.0f * fRec78[0]) + -1.0f));
			fVec62[0] = fTempPerm208;
			fVec63[0] = fSlow124;
			fTempPerm209 = (fRec81[1] + (fConst2 * fVec63[1]));
			fRec81[0] = (fTempPerm209 - floorf(fTempPerm209));
			fTempPerm210 = faustpower<2>(((2.0f * fRec81[0]) + -1.0f));
			fVec64[0] = fTempPerm210;
			fTempPerm211 = (fSlow125 * (fTempPerm14 * (fVec64[0] - fVec64[1])));
			fVec65[IOTA&4095] = fTempPerm211;
			fRec80[0] = ((fVec65[IOTA&4095] + (0.999f * fRec80[1])) - ((fSlow131 * fVec65[(IOTA-iSlow127)&4095]) + (fSlow130 * fVec65[(IOTA-iSlow128)&4095])));
			fTempPerm212 = max((float)0, min((float)2047, (fSlow133 * fTempPerm16)));
			iTempPerm213 = int(fTempPerm212);
			fTempPerm214 = floorf(fTempPerm212);
			fRec65[0] = (((fRec8[0] * (((fTempPerm10 * (fVec65[IOTA&4095] - ((fVec65[(IOTA-iTempPerm213)&4095] * (fTempPerm214 + (1.0f - fTempPerm212))) + ((fTempPerm212 - fTempPerm214) * fVec65[(IOTA-int((iTempPerm213 + 1)))&4095])))) + (fSlow132 * (fRec80[0] * fTempPerm11))) + (fSlow108 * (((fTempPerm9 * (fVec62[0] - fVec62[1])) * fVec1[1]) / fTempPerm62)))) + (((fTempPerm61 * ((fConst0 * (fTempPerm202 + fTempPerm187)) + (fSlow119 * (fTempPerm11 * (fTempPerm206 + (fTempPerm191 / fTempPerm22)))))) + ((fTempPerm60 * ((fSlow119 * (fTempPerm206 * fTempPerm11)) + (fConst0 * fTempPerm202))) * (fTempPerm43 + (fTempPerm42 * ((fSlow119 * ((fTempPerm191 * fTempPerm11) / fTempPerm22)) + (fConst0 * fTempPerm187)))))) + (fTempPerm20 * (((fTempPerm10 * (fVec53[IOTA&4095] - ((fVec53[(IOTA-iTempPerm175)&4095] * (fTempPerm176 + (1.0f - fTempPerm174))) + ((fTempPerm174 - fTempPerm176) * fVec53[(IOTA-int((iTempPerm175 + 1)))&4095])))) + (fSlow119 * (fRec68[0] * fTempPerm11))) + (fSlow108 * (((fTempPerm9 * (fVec50[0] - fVec50[1])) * fVec1[1]) / fTempPerm6)))))) - (((fTempPerm4 * fRec65[2]) + (2.0f * (fTempPerm3 * fRec65[1]))) / fTempPerm2));
			fRec64[0] = ((((fRec65[1] + (0.5f * fRec65[0])) + (0.5f * fRec65[2])) - ((fTempPerm4 * fRec64[2]) + (2.0f * (fTempPerm3 * fRec64[1])))) / fTempPerm2);
			iRec83[0] = (iSlow134 * (iRec83[1] + 1));
			iTempPerm215 = int((iRec83[0] < iSlow36));
			fTempPerm216 = expf((0 - (fConst8 / ((iSlow135)?((iTempPerm215)?fSlow35:fSlow33):fSlow32))));
			fRec82[0] = ((fRec82[1] * fTempPerm216) + (((iSlow135)?((iTempPerm215)?1.5873015873015872f:fSlow136):0.0f) * (1.0f - fTempPerm216)));
			iRec87[0] = ((iRec87[1] + iVec0[1]) % iSlow141);
			fTempPerm217 = ((fRec86[1] * (1 - float(((iRec87[0] == 0) > 0)))) + (fSlow139 * fTempPerm6));
			fRec86[0] = (fTempPerm217 - floorf(fTempPerm217));
			fTempPerm218 = faustpower<2>(((2.0f * fRec86[0]) + -1.0f));
			fVec66[0] = fTempPerm218;
			fVec67[0] = fSlow143;
			fTempPerm219 = (fRec89[1] + (fConst2 * fVec67[1]));
			fRec89[0] = (fTempPerm219 - floorf(fTempPerm219));
			fTempPerm220 = faustpower<2>(((2.0f * fRec89[0]) + -1.0f));
			fVec68[0] = fTempPerm220;
			fTempPerm221 = (fSlow144 * (fTempPerm14 * (fVec68[0] - fVec68[1])));
			fVec69[IOTA&4095] = fTempPerm221;
			fRec88[0] = ((fVec69[IOTA&4095] + (0.999f * fRec88[1])) - ((fSlow150 * fVec69[(IOTA-iSlow146)&4095]) + (fSlow149 * fVec69[(IOTA-iSlow147)&4095])));
			fTempPerm222 = max((float)0, min((float)2047, (fSlow152 * fTempPerm16)));
			iTempPerm223 = int(fTempPerm222);
			fTempPerm224 = floorf(fTempPerm222);
			fTempPerm225 = max((fSlow138 * fTempPerm24), 23.448949682462139f);
			fTempPerm226 = max(20.0f, fabsf(fTempPerm225));
			fVec70[0] = fTempPerm226;
			fTempPerm227 = (fRec90[1] + (fConst2 * fVec70[1]));
			fRec90[0] = (fTempPerm227 - floorf(fTempPerm227));
			fTempPerm228 = faustpower<2>(((2.0f * fRec90[0]) + -1.0f));
			fVec71[0] = fTempPerm228;
			fTempPerm229 = ((fTempPerm14 * (fVec71[0] - fVec71[1])) / fVec70[0]);
			fVec72[IOTA&4095] = fTempPerm229;
			fTempPerm230 = max((float)0, min((float)2047, (fConst0 * (fTempPerm16 / fTempPerm225))));
			iTempPerm231 = int(fTempPerm230);
			fTempPerm232 = floorf(fTempPerm230);
			iRec92[0] = ((iRec92[1] + iVec0[1]) % int((fSlow140 * fTempPerm34)));
			fTempPerm233 = ((fRec91[1] * (1 - float(((iRec92[0] == 0) > 0)))) + (fSlow139 * fTempPerm33));
			fRec91[0] = (fTempPerm233 - floorf(fTempPerm233));
			fTempPerm234 = faustpower<2>(((2.0f * fRec91[0]) + -1.0f));
			fVec73[0] = fTempPerm234;
			fTempPerm235 = ((fSlow153 * (((fTempPerm9 * (fVec73[0] - fVec73[1])) * fVec1[1]) / fTempPerm33)) + (0.25f * (fTempPerm10 * ((fVec72[IOTA&4095] - (fVec72[(IOTA-iTempPerm231)&4095] * (fTempPerm232 + (1.0f - fTempPerm230)))) - ((fTempPerm230 - fTempPerm232) * fVec72[(IOTA-int((iTempPerm231 + 1)))&4095])))));
			fTempPerm236 = max((float)0, min((float)2047, (fConst4 / fTempPerm225)));
			iTempPerm237 = int(fTempPerm236);
			fTempPerm238 = floorf(fTempPerm236);
			fRec93[0] = ((0.999f * fRec93[1]) + (fConst3 * ((fVec72[IOTA&4095] - (fVec72[(IOTA-iTempPerm237)&4095] * (fTempPerm238 + (1.0f - fTempPerm236)))) - ((fTempPerm236 - fTempPerm238) * fVec72[(IOTA-int((iTempPerm237 + 1)))&4095]))));
			fTempPerm239 = (fRec93[0] * fTempPerm23);
			fTempPerm240 = max((fSlow138 * fTempPerm22), 23.448949682462139f);
			fTempPerm241 = max(20.0f, fabsf(fTempPerm240));
			fVec74[0] = fTempPerm241;
			fTempPerm242 = (fRec94[1] + (fConst2 * fVec74[1]));
			fRec94[0] = (fTempPerm242 - floorf(fTempPerm242));
			fTempPerm243 = faustpower<2>(((2.0f * fRec94[0]) + -1.0f));
			fVec75[0] = fTempPerm243;
			fTempPerm244 = ((fTempPerm14 * (fVec75[0] - fVec75[1])) / fVec74[0]);
			fVec76[IOTA&4095] = fTempPerm244;
			fTempPerm245 = max((float)0, min((float)2047, (fConst0 * (fTempPerm16 / fTempPerm240))));
			iTempPerm246 = int(fTempPerm245);
			fTempPerm247 = floorf(fTempPerm245);
			iRec96[0] = ((iRec96[1] + iVec0[1]) % int((fSlow140 / fTempPerm22)));
			fTempPerm248 = ((fRec95[1] * (1 - float(((iRec96[0] == 0) > 0)))) + (fSlow139 * fTempPerm52));
			fRec95[0] = (fTempPerm248 - floorf(fTempPerm248));
			fTempPerm249 = faustpower<2>(((2.0f * fRec95[0]) + -1.0f));
			fVec77[0] = fTempPerm249;
			fTempPerm250 = ((fSlow153 * (((fTempPerm9 * (fVec77[0] - fVec77[1])) * fVec1[1]) / fTempPerm52)) + (0.25f * (fTempPerm10 * ((fVec76[IOTA&4095] - (fVec76[(IOTA-iTempPerm246)&4095] * (fTempPerm247 + (1.0f - fTempPerm245)))) - ((fTempPerm245 - fTempPerm247) * fVec76[(IOTA-int((iTempPerm246 + 1)))&4095])))));
			fTempPerm251 = max((float)0, min((float)2047, (fConst4 / fTempPerm240)));
			iTempPerm252 = int(fTempPerm251);
			fTempPerm253 = floorf(fTempPerm251);
			fRec97[0] = ((0.999f * fRec97[1]) + (fConst3 * ((fVec76[IOTA&4095] - (fVec76[(IOTA-iTempPerm252)&4095] * (fTempPerm253 + (1.0f - fTempPerm251)))) - ((fTempPerm251 - fTempPerm253) * fVec76[(IOTA-int((iTempPerm252 + 1)))&4095]))));
			fTempPerm254 = (fRec97[0] * fTempPerm22);
			iRec99[0] = ((iRec99[1] + iVec0[1]) % iSlow154);
			fTempPerm255 = ((fRec98[1] * (1 - float(((iRec99[0] == 0) > 0)))) + (fSlow139 * fTempPerm62));
			fRec98[0] = (fTempPerm255 - floorf(fTempPerm255));
			fTempPerm256 = faustpower<2>(((2.0f * fRec98[0]) + -1.0f));
			fVec78[0] = fTempPerm256;
			fVec79[0] = fSlow156;
			fTempPerm257 = (fRec101[1] + (fConst2 * fVec79[1]));
			fRec101[0] = (fTempPerm257 - floorf(fTempPerm257));
			fTempPerm258 = faustpower<2>(((2.0f * fRec101[0]) + -1.0f));
			fVec80[0] = fTempPerm258;
			fTempPerm259 = (fSlow157 * (fTempPerm14 * (fVec80[0] - fVec80[1])));
			fVec81[IOTA&4095] = fTempPerm259;
			fRec100[0] = ((fVec81[IOTA&4095] + (0.999f * fRec100[1])) - ((fSlow163 * fVec81[(IOTA-iSlow159)&4095]) + (fSlow162 * fVec81[(IOTA-iSlow160)&4095])));
			fTempPerm260 = max((float)0, min((float)2047, (fSlow165 * fTempPerm16)));
			iTempPerm261 = int(fTempPerm260);
			fTempPerm262 = floorf(fTempPerm260);
			fRec85[0] = (((fRec8[0] * (((fTempPerm10 * (fVec81[IOTA&4095] - ((fVec81[(IOTA-iTempPerm261)&4095] * (fTempPerm262 + (1.0f - fTempPerm260))) + ((fTempPerm260 - fTempPerm262) * fVec81[(IOTA-int((iTempPerm261 + 1)))&4095])))) + (fSlow164 * (fRec100[0] * fTempPerm11))) + (fSlow140 * (((fTempPerm9 * (fVec78[0] - fVec78[1])) * fVec1[1]) / fTempPerm62)))) + (((fTempPerm61 * ((fConst0 * (fTempPerm250 + fTempPerm235)) + (fSlow151 * (fTempPerm11 * (fTempPerm254 + (fTempPerm239 / fTempPerm22)))))) + ((fTempPerm60 * ((fSlow151 * (fTempPerm254 * fTempPerm11)) + (fConst0 * fTempPerm250))) * (fTempPerm43 + (fTempPerm42 * ((fSlow151 * ((fTempPerm239 * fTempPerm11) / fTempPerm22)) + (fConst0 * fTempPerm235)))))) + (fTempPerm20 * (((fTempPerm10 * (fVec69[IOTA&4095] - ((fVec69[(IOTA-iTempPerm223)&4095] * (fTempPerm224 + (1.0f - fTempPerm222))) + ((fTempPerm222 - fTempPerm224) * fVec69[(IOTA-int((iTempPerm223 + 1)))&4095])))) + (fSlow151 * (fRec88[0] * fTempPerm11))) + (fSlow140 * (((fTempPerm9 * (fVec66[0] - fVec66[1])) * fVec1[1]) / fTempPerm6)))))) - (((fTempPerm4 * fRec85[2]) + (2.0f * (fTempPerm3 * fRec85[1]))) / fTempPerm2));
			fRec84[0] = ((((fRec85[1] + (0.5f * fRec85[0])) + (0.5f * fRec85[2])) - ((fTempPerm4 * fRec84[2]) + (2.0f * (fTempPerm3 * fRec84[1])))) / fTempPerm2);
			iRec103[0] = (iSlow166 * (iRec103[1] + 1));
			iTempPerm263 = int((iRec103[0] < iSlow36));
			fTempPerm264 = expf((0 - (fConst8 / ((iSlow167)?((iTempPerm263)?fSlow35:fSlow33):fSlow32))));
			fRec102[0] = ((fRec102[1] * fTempPerm264) + (((iSlow167)?((iTempPerm263)?1.5873015873015872f:fSlow168):0.0f) * (1.0f - fTempPerm264)));
			iRec107[0] = ((iRec107[1] + iVec0[1]) % iSlow173);
			fTempPerm265 = ((fRec106[1] * (1 - float(((iRec107[0] == 0) > 0)))) + (fSlow171 * fTempPerm6));
			fRec106[0] = (fTempPerm265 - floorf(fTempPerm265));
			fTempPerm266 = faustpower<2>(((2.0f * fRec106[0]) + -1.0f));
			fVec82[0] = fTempPerm266;
			fVec83[0] = fSlow175;
			fTempPerm267 = (fRec109[1] + (fConst2 * fVec83[1]));
			fRec109[0] = (fTempPerm267 - floorf(fTempPerm267));
			fTempPerm268 = faustpower<2>(((2.0f * fRec109[0]) + -1.0f));
			fVec84[0] = fTempPerm268;
			fTempPerm269 = (fSlow176 * (fTempPerm14 * (fVec84[0] - fVec84[1])));
			fVec85[IOTA&4095] = fTempPerm269;
			fRec108[0] = ((fVec85[IOTA&4095] + (0.999f * fRec108[1])) - ((fSlow182 * fVec85[(IOTA-iSlow178)&4095]) + (fSlow181 * fVec85[(IOTA-iSlow179)&4095])));
			fTempPerm270 = max((float)0, min((float)2047, (fSlow184 * fTempPerm16)));
			iTempPerm271 = int(fTempPerm270);
			fTempPerm272 = floorf(fTempPerm270);
			fTempPerm273 = max((fSlow170 * fTempPerm24), 23.448949682462139f);
			fTempPerm274 = max(20.0f, fabsf(fTempPerm273));
			fVec86[0] = fTempPerm274;
			fTempPerm275 = (fRec110[1] + (fConst2 * fVec86[1]));
			fRec110[0] = (fTempPerm275 - floorf(fTempPerm275));
			fTempPerm276 = faustpower<2>(((2.0f * fRec110[0]) + -1.0f));
			fVec87[0] = fTempPerm276;
			fTempPerm277 = ((fTempPerm14 * (fVec87[0] - fVec87[1])) / fVec86[0]);
			fVec88[IOTA&4095] = fTempPerm277;
			fTempPerm278 = max((float)0, min((float)2047, (fConst0 * (fTempPerm16 / fTempPerm273))));
			iTempPerm279 = int(fTempPerm278);
			fTempPerm280 = floorf(fTempPerm278);
			iRec112[0] = ((iRec112[1] + iVec0[1]) % int((fSlow172 * fTempPerm34)));
			fTempPerm281 = ((fRec111[1] * (1 - float(((iRec112[0] == 0) > 0)))) + (fSlow171 * fTempPerm33));
			fRec111[0] = (fTempPerm281 - floorf(fTempPerm281));
			fTempPerm282 = faustpower<2>(((2.0f * fRec111[0]) + -1.0f));
			fVec89[0] = fTempPerm282;
			fTempPerm283 = ((fSlow185 * (((fTempPerm9 * (fVec89[0] - fVec89[1])) * fVec1[1]) / fTempPerm33)) + (0.25f * (fTempPerm10 * ((fVec88[IOTA&4095] - (fVec88[(IOTA-iTempPerm279)&4095] * (fTempPerm280 + (1.0f - fTempPerm278)))) - ((fTempPerm278 - fTempPerm280) * fVec88[(IOTA-int((iTempPerm279 + 1)))&4095])))));
			fTempPerm284 = max((float)0, min((float)2047, (fConst4 / fTempPerm273)));
			iTempPerm285 = int(fTempPerm284);
			fTempPerm286 = floorf(fTempPerm284);
			fRec113[0] = ((0.999f * fRec113[1]) + (fConst3 * ((fVec88[IOTA&4095] - (fVec88[(IOTA-iTempPerm285)&4095] * (fTempPerm286 + (1.0f - fTempPerm284)))) - ((fTempPerm284 - fTempPerm286) * fVec88[(IOTA-int((iTempPerm285 + 1)))&4095]))));
			fTempPerm287 = (fRec113[0] * fTempPerm23);
			fTempPerm288 = max((fSlow170 * fTempPerm22), 23.448949682462139f);
			fTempPerm289 = max(20.0f, fabsf(fTempPerm288));
			fVec90[0] = fTempPerm289;
			fTempPerm290 = (fRec114[1] + (fConst2 * fVec90[1]));
			fRec114[0] = (fTempPerm290 - floorf(fTempPerm290));
			fTempPerm291 = faustpower<2>(((2.0f * fRec114[0]) + -1.0f));
			fVec91[0] = fTempPerm291;
			fTempPerm292 = ((fTempPerm14 * (fVec91[0] - fVec91[1])) / fVec90[0]);
			fVec92[IOTA&4095] = fTempPerm292;
			fTempPerm293 = max((float)0, min((float)2047, (fConst0 * (fTempPerm16 / fTempPerm288))));
			iTempPerm294 = int(fTempPerm293);
			fTempPerm295 = floorf(fTempPerm293);
			iRec116[0] = ((iRec116[1] + iVec0[1]) % int((fSlow172 / fTempPerm22)));
			fTempPerm296 = ((fRec115[1] * (1 - float(((iRec116[0] == 0) > 0)))) + (fSlow171 * fTempPerm52));
			fRec115[0] = (fTempPerm296 - floorf(fTempPerm296));
			fTempPerm297 = faustpower<2>(((2.0f * fRec115[0]) + -1.0f));
			fVec93[0] = fTempPerm297;
			fTempPerm298 = ((fSlow185 * (((fTempPerm9 * (fVec93[0] - fVec93[1])) * fVec1[1]) / fTempPerm52)) + (0.25f * (fTempPerm10 * ((fVec92[IOTA&4095] - (fVec92[(IOTA-iTempPerm294)&4095] * (fTempPerm295 + (1.0f - fTempPerm293)))) - ((fTempPerm293 - fTempPerm295) * fVec92[(IOTA-int((iTempPerm294 + 1)))&4095])))));
			fTempPerm299 = max((float)0, min((float)2047, (fConst4 / fTempPerm288)));
			iTempPerm300 = int(fTempPerm299);
			fTempPerm301 = floorf(fTempPerm299);
			fRec117[0] = ((0.999f * fRec117[1]) + (fConst3 * ((fVec92[IOTA&4095] - (fVec92[(IOTA-iTempPerm300)&4095] * (fTempPerm301 + (1.0f - fTempPerm299)))) - ((fTempPerm299 - fTempPerm301) * fVec92[(IOTA-int((iTempPerm300 + 1)))&4095]))));
			fTempPerm302 = (fRec117[0] * fTempPerm22);
			iRec119[0] = ((iRec119[1] + iVec0[1]) % iSlow186);
			fTempPerm303 = ((fRec118[1] * (1 - float(((iRec119[0] == 0) > 0)))) + (fSlow171 * fTempPerm62));
			fRec118[0] = (fTempPerm303 - floorf(fTempPerm303));
			fTempPerm304 = faustpower<2>(((2.0f * fRec118[0]) + -1.0f));
			fVec94[0] = fTempPerm304;
			fVec95[0] = fSlow188;
			fTempPerm305 = (fRec121[1] + (fConst2 * fVec95[1]));
			fRec121[0] = (fTempPerm305 - floorf(fTempPerm305));
			fTempPerm306 = faustpower<2>(((2.0f * fRec121[0]) + -1.0f));
			fVec96[0] = fTempPerm306;
			fTempPerm307 = (fSlow189 * (fTempPerm14 * (fVec96[0] - fVec96[1])));
			fVec97[IOTA&4095] = fTempPerm307;
			fRec120[0] = ((fVec97[IOTA&4095] + (0.999f * fRec120[1])) - ((fSlow195 * fVec97[(IOTA-iSlow191)&4095]) + (fSlow194 * fVec97[(IOTA-iSlow192)&4095])));
			fTempPerm308 = max((float)0, min((float)2047, (fSlow197 * fTempPerm16)));
			iTempPerm309 = int(fTempPerm308);
			fTempPerm310 = floorf(fTempPerm308);
			fRec105[0] = (((fRec8[0] * (((fTempPerm10 * (fVec97[IOTA&4095] - ((fVec97[(IOTA-iTempPerm309)&4095] * (fTempPerm310 + (1.0f - fTempPerm308))) + ((fTempPerm308 - fTempPerm310) * fVec97[(IOTA-int((iTempPerm309 + 1)))&4095])))) + (fSlow196 * (fRec120[0] * fTempPerm11))) + (fSlow172 * (((fTempPerm9 * (fVec94[0] - fVec94[1])) * fVec1[1]) / fTempPerm62)))) + (((fTempPerm61 * ((fConst0 * (fTempPerm298 + fTempPerm283)) + (fSlow183 * (fTempPerm11 * (fTempPerm302 + (fTempPerm287 / fTempPerm22)))))) + ((fTempPerm60 * ((fSlow183 * (fTempPerm302 * fTempPerm11)) + (fConst0 * fTempPerm298))) * (fTempPerm43 + (fTempPerm42 * ((fSlow183 * ((fTempPerm287 * fTempPerm11) / fTempPerm22)) + (fConst0 * fTempPerm283)))))) + (fTempPerm20 * (((fTempPerm10 * (fVec85[IOTA&4095] - ((fVec85[(IOTA-iTempPerm271)&4095] * (fTempPerm272 + (1.0f - fTempPerm270))) + ((fTempPerm270 - fTempPerm272) * fVec85[(IOTA-int((iTempPerm271 + 1)))&4095])))) + (fSlow183 * (fRec108[0] * fTempPerm11))) + (fSlow172 * (((fTempPerm9 * (fVec82[0] - fVec82[1])) * fVec1[1]) / fTempPerm6)))))) - (((fRec105[2] * fTempPerm4) + (2.0f * (fRec105[1] * fTempPerm3))) / fTempPerm2));
			fRec104[0] = ((((fRec105[1] + (0.5f * fRec105[0])) + (0.5f * fRec105[2])) - ((fTempPerm4 * fRec104[2]) + (2.0f * (fTempPerm3 * fRec104[1])))) / fTempPerm2);
			iRec123[0] = (iSlow198 * (iRec123[1] + 1));
			iTempPerm311 = int((iRec123[0] < iSlow36));
			fTempPerm312 = expf((0 - (fConst8 / ((iSlow199)?((iTempPerm311)?fSlow35:fSlow33):fSlow32))));
			fRec122[0] = ((fRec122[1] * fTempPerm312) + (((iSlow199)?((iTempPerm311)?1.5873015873015872f:fSlow200):0.0f) * (1.0f - fTempPerm312)));
			output0[i] = (FAUSTFLOAT)(((((((fSlow201 * (min(1.0f, fRec122[0]) * ((fRec104[1] + (0.5f * fRec104[0])) + (0.5f * fRec104[2])))) + (fSlow169 * (min(1.0f, fRec102[0]) * ((fRec84[1] + (0.5f * fRec84[0])) + (0.5f * fRec84[2]))))) + (fSlow137 * (min(1.0f, fRec82[0]) * ((fRec64[1] + (0.5f * fRec64[0])) + (0.5f * fRec64[2]))))) + (fSlow105 * (min(1.0f, fRec62[0]) * ((fRec44[1] + (0.5f * fRec44[0])) + (0.5f * fRec44[2]))))) + (fSlow73 * (min(1.0f, fRec42[0]) * ((fRec24[1] + (0.5f * fRec24[0])) + (0.5f * fRec24[2]))))) + (fSlow41 * (min(1.0f, fRec22[0]) * ((fRec1[1] + (0.5f * fRec1[0])) + (0.5f * fRec1[2]))))) / fTempPerm2);
			// post processing
			fRec122[1] = fRec122[0];
			iRec123[1] = iRec123[0];
			fRec104[2] = fRec104[1]; fRec104[1] = fRec104[0];
			fRec105[2] = fRec105[1]; fRec105[1] = fRec105[0];
			fRec120[1] = fRec120[0];
			fVec96[1] = fVec96[0];
			fRec121[1] = fRec121[0];
			fVec95[1] = fVec95[0];
			fVec94[1] = fVec94[0];
			fRec118[1] = fRec118[0];
			iRec119[1] = iRec119[0];
			fRec117[1] = fRec117[0];
			fVec93[1] = fVec93[0];
			fRec115[1] = fRec115[0];
			iRec116[1] = iRec116[0];
			fVec91[1] = fVec91[0];
			fRec114[1] = fRec114[0];
			fVec90[1] = fVec90[0];
			fRec113[1] = fRec113[0];
			fVec89[1] = fVec89[0];
			fRec111[1] = fRec111[0];
			iRec112[1] = iRec112[0];
			fVec87[1] = fVec87[0];
			fRec110[1] = fRec110[0];
			fVec86[1] = fVec86[0];
			fRec108[1] = fRec108[0];
			fVec84[1] = fVec84[0];
			fRec109[1] = fRec109[0];
			fVec83[1] = fVec83[0];
			fVec82[1] = fVec82[0];
			fRec106[1] = fRec106[0];
			iRec107[1] = iRec107[0];
			fRec102[1] = fRec102[0];
			iRec103[1] = iRec103[0];
			fRec84[2] = fRec84[1]; fRec84[1] = fRec84[0];
			fRec85[2] = fRec85[1]; fRec85[1] = fRec85[0];
			fRec100[1] = fRec100[0];
			fVec80[1] = fVec80[0];
			fRec101[1] = fRec101[0];
			fVec79[1] = fVec79[0];
			fVec78[1] = fVec78[0];
			fRec98[1] = fRec98[0];
			iRec99[1] = iRec99[0];
			fRec97[1] = fRec97[0];
			fVec77[1] = fVec77[0];
			fRec95[1] = fRec95[0];
			iRec96[1] = iRec96[0];
			fVec75[1] = fVec75[0];
			fRec94[1] = fRec94[0];
			fVec74[1] = fVec74[0];
			fRec93[1] = fRec93[0];
			fVec73[1] = fVec73[0];
			fRec91[1] = fRec91[0];
			iRec92[1] = iRec92[0];
			fVec71[1] = fVec71[0];
			fRec90[1] = fRec90[0];
			fVec70[1] = fVec70[0];
			fRec88[1] = fRec88[0];
			fVec68[1] = fVec68[0];
			fRec89[1] = fRec89[0];
			fVec67[1] = fVec67[0];
			fVec66[1] = fVec66[0];
			fRec86[1] = fRec86[0];
			iRec87[1] = iRec87[0];
			fRec82[1] = fRec82[0];
			iRec83[1] = iRec83[0];
			fRec64[2] = fRec64[1]; fRec64[1] = fRec64[0];
			fRec65[2] = fRec65[1]; fRec65[1] = fRec65[0];
			fRec80[1] = fRec80[0];
			fVec64[1] = fVec64[0];
			fRec81[1] = fRec81[0];
			fVec63[1] = fVec63[0];
			fVec62[1] = fVec62[0];
			fRec78[1] = fRec78[0];
			iRec79[1] = iRec79[0];
			fRec77[1] = fRec77[0];
			fVec61[1] = fVec61[0];
			fRec75[1] = fRec75[0];
			iRec76[1] = iRec76[0];
			fVec59[1] = fVec59[0];
			fRec74[1] = fRec74[0];
			fVec58[1] = fVec58[0];
			fRec73[1] = fRec73[0];
			fVec57[1] = fVec57[0];
			fRec71[1] = fRec71[0];
			iRec72[1] = iRec72[0];
			fVec55[1] = fVec55[0];
			fRec70[1] = fRec70[0];
			fVec54[1] = fVec54[0];
			fRec68[1] = fRec68[0];
			fVec52[1] = fVec52[0];
			fRec69[1] = fRec69[0];
			fVec51[1] = fVec51[0];
			fVec50[1] = fVec50[0];
			fRec66[1] = fRec66[0];
			iRec67[1] = iRec67[0];
			fRec62[1] = fRec62[0];
			iRec63[1] = iRec63[0];
			fRec44[2] = fRec44[1]; fRec44[1] = fRec44[0];
			fRec45[2] = fRec45[1]; fRec45[1] = fRec45[0];
			fRec60[1] = fRec60[0];
			fVec48[1] = fVec48[0];
			fRec61[1] = fRec61[0];
			fVec47[1] = fVec47[0];
			fVec46[1] = fVec46[0];
			fRec58[1] = fRec58[0];
			iRec59[1] = iRec59[0];
			fRec57[1] = fRec57[0];
			fVec45[1] = fVec45[0];
			fRec55[1] = fRec55[0];
			iRec56[1] = iRec56[0];
			fVec43[1] = fVec43[0];
			fRec54[1] = fRec54[0];
			fVec42[1] = fVec42[0];
			fRec53[1] = fRec53[0];
			fVec41[1] = fVec41[0];
			fRec51[1] = fRec51[0];
			iRec52[1] = iRec52[0];
			fVec39[1] = fVec39[0];
			fRec50[1] = fRec50[0];
			fVec38[1] = fVec38[0];
			fRec48[1] = fRec48[0];
			fVec36[1] = fVec36[0];
			fRec49[1] = fRec49[0];
			fVec35[1] = fVec35[0];
			fVec34[1] = fVec34[0];
			fRec46[1] = fRec46[0];
			iRec47[1] = iRec47[0];
			fRec42[1] = fRec42[0];
			iRec43[1] = iRec43[0];
			fRec24[2] = fRec24[1]; fRec24[1] = fRec24[0];
			fRec25[2] = fRec25[1]; fRec25[1] = fRec25[0];
			fRec40[1] = fRec40[0];
			fVec32[1] = fVec32[0];
			fRec41[1] = fRec41[0];
			fVec31[1] = fVec31[0];
			fVec30[1] = fVec30[0];
			fRec38[1] = fRec38[0];
			iRec39[1] = iRec39[0];
			fRec37[1] = fRec37[0];
			fVec29[1] = fVec29[0];
			fRec35[1] = fRec35[0];
			iRec36[1] = iRec36[0];
			fVec27[1] = fVec27[0];
			fRec34[1] = fRec34[0];
			fVec26[1] = fVec26[0];
			fRec33[1] = fRec33[0];
			fVec25[1] = fVec25[0];
			fRec31[1] = fRec31[0];
			iRec32[1] = iRec32[0];
			fVec23[1] = fVec23[0];
			fRec30[1] = fRec30[0];
			fVec22[1] = fVec22[0];
			fRec28[1] = fRec28[0];
			fVec20[1] = fVec20[0];
			fRec29[1] = fRec29[0];
			fVec19[1] = fVec19[0];
			fVec18[1] = fVec18[0];
			fRec26[1] = fRec26[0];
			iRec27[1] = iRec27[0];
			fRec22[1] = fRec22[0];
			iRec23[1] = iRec23[0];
			fRec1[2] = fRec1[1]; fRec1[1] = fRec1[0];
			fRec2[2] = fRec2[1]; fRec2[1] = fRec2[0];
			fRec20[1] = fRec20[0];
			fVec16[1] = fVec16[0];
			fRec21[1] = fRec21[0];
			fVec15[1] = fVec15[0];
			fVec14[1] = fVec14[0];
			fRec18[1] = fRec18[0];
			iRec19[1] = iRec19[0];
			fRec17[1] = fRec17[0];
			fVec13[1] = fVec13[0];
			fRec15[1] = fRec15[0];
			iRec16[1] = iRec16[0];
			fVec11[1] = fVec11[0];
			fRec14[1] = fRec14[0];
			fVec10[1] = fVec10[0];
			fRec13[1] = fRec13[0];
			fVec9[1] = fVec9[0];
			fRec11[1] = fRec11[0];
			iRec12[1] = iRec12[0];
			fVec7[1] = fVec7[0];
			fRec10[1] = fRec10[0];
			fVec6[1] = fVec6[0];
			fRec9[1] = fRec9[0];
			fRec8[1] = fRec8[0];
			fRec6[1] = fRec6[0];
			IOTA = IOTA+1;
			fVec4[1] = fVec4[0];
			fRec7[1] = fRec7[0];
			fVec3[1] = fVec3[0];
			fVec2[1] = fVec2[0];
			fRec4[1] = fRec4[0];
			iRec5[1] = iRec5[0];
			fVec1[1] = fVec1[0];
			fRec3[1] = fRec3[0];
			fRec0[1] = fRec0[0];
			iVec0[1] = iVec0[0];
		}
	}
};


