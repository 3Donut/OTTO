//----------------------------------------------------------
// name: "wormhole"
//
// Code generated with Faust 2.11.10 (https://faust.grame.fr)
//----------------------------------------------------------

/* link with  */
#include <math.h>
#ifndef FAUSTPOWER
#define FAUSTPOWER
#include <cmath>
template <int N> inline int faustpower(int x)              { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <> 	 inline int faustpower<0>(int x)            { return 1; }
template <> 	 inline int faustpower<1>(int x)            { return x; }
template <> 	 inline int faustpower<2>(int x)            { return x*x; }
template <int N> inline float faustpower(float x)            { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <> 	 inline float faustpower<0>(float x)          { return 1; }
template <> 	 inline float faustpower<1>(float x)          { return x; }
template <> 	 inline float faustpower<2>(float x)          { return x*x; }
#endif
#include <math.h>
#include <algorithm>

#include <faust/gui/UI.h>
#include <faust/gui/meta.h>
#include <faust/dsp/dsp.h>

using std::max;
using std::min;

/********************************
	VECTOR INTRINSICS
*********************************/


/********************************
	ABSTRACT USER INTERFACE
*********************************/

#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS faust_wormhole
#endif

class faust_wormhole : public dsp {
  private:
	class SIG0 {
	  private:
		int fSamplingFreq;
		int 	iRec25[2];
		float 	fTempPerm14;
	  public:
		int getNumInputs() { return 0; }
		int getNumOutputs() { return 1; }
		void init(int samplingFreq) {
			fSamplingFreq = samplingFreq;
			fTempPerm14 = 0;
			for (int i=0; i<2; i++) iRec25[i] = 0;
		}
		void fill (int count, float output[]) {
			for (int i=0; i<count; i++) {
				iRec25[0] = (iRec25[1] + 1);
				fTempPerm14 = sinf((9.5873799242852573e-05f * float((iRec25[0] + -1))));
				output[i] = fTempPerm14;
				// post processing
				iRec25[1] = iRec25[0];
			}
		}
	};


	float 	fTempPerm0;
	float 	fTempPerm1;
	FAUSTFLOAT 	fslider0;
	FAUSTFLOAT 	fslider1;
	float 	fRec0[2];
	float 	fConst0;
	float 	fConst1;
	float 	fTempPerm2;
	float 	fTempPerm3;
	float 	fTempPerm4;
	float 	fTempPerm5;
	float 	fTempPerm6;
	float 	fTempPerm7;
	float 	fTempPerm8;
	float 	fTempPerm9;
	float 	fTempPerm10;
	float 	fTempPerm11;
	float 	fTempPerm12;
	FAUSTFLOAT 	fslider2;
	float 	fRec24[2];
	float 	fRec23[3];
	float 	fRec22[3];
	float 	fTempPerm13;
	int 	IOTA;
	float 	fVec0[512];
	static float 	ftbl0[65536];
	float 	fConst2;
	float 	fRec26[2];
	float 	fTempPerm15;
	float 	fTempPerm16;
	float 	fTempPerm17;
	int 	iTempPerm18;
	int 	iTempPerm19;
	float 	fTempPerm20;
	float 	fTempPerm21;
	float 	fTempPerm22;
	int 	iTempPerm23;
	float 	fRec20[2];
	float 	fTempPerm24;
	float 	fVec1[512];
	float 	fTempPerm25;
	float 	fTempPerm26;
	int 	iTempPerm27;
	int 	iTempPerm28;
	float 	fTempPerm29;
	float 	fTempPerm30;
	float 	fTempPerm31;
	int 	iTempPerm32;
	float 	fRec18[2];
	float 	fTempPerm33;
	float 	fVec2[1024];
	float 	fTempPerm34;
	float 	fTempPerm35;
	int 	iTempPerm36;
	int 	iTempPerm37;
	float 	fTempPerm38;
	float 	fTempPerm39;
	float 	fTempPerm40;
	int 	iTempPerm41;
	float 	fRec16[2];
	float 	fTempPerm42;
	float 	fVec3[1024];
	float 	fTempPerm43;
	float 	fTempPerm44;
	int 	iTempPerm45;
	int 	iTempPerm46;
	float 	fTempPerm47;
	float 	fTempPerm48;
	float 	fTempPerm49;
	int 	iTempPerm50;
	float 	fRec14[2];
	float 	fTempPerm51;
	float 	fVec4[2048];
	float 	fTempPerm52;
	float 	fTempPerm53;
	int 	iTempPerm54;
	int 	iTempPerm55;
	float 	fTempPerm56;
	float 	fTempPerm57;
	float 	fTempPerm58;
	int 	iTempPerm59;
	float 	fRec12[2];
	float 	fTempPerm60;
	float 	fVec5[4096];
	float 	fTempPerm61;
	float 	fTempPerm62;
	int 	iTempPerm63;
	int 	iTempPerm64;
	float 	fTempPerm65;
	float 	fTempPerm66;
	float 	fTempPerm67;
	int 	iTempPerm68;
	float 	fRec10[2];
	float 	fTempPerm69;
	float 	fVec6[2048];
	float 	fTempPerm70;
	int 	iTempPerm71;
	float 	fTempPerm72;
	float 	fRec2[2];
	float 	fRec40[3];
	float 	fRec39[3];
	float 	fTempPerm73;
	float 	fVec7[512];
	float 	fRec37[2];
	float 	fTempPerm74;
	float 	fVec8[512];
	float 	fRec35[2];
	float 	fTempPerm75;
	float 	fVec9[1024];
	float 	fRec33[2];
	float 	fTempPerm76;
	float 	fVec10[1024];
	float 	fRec31[2];
	float 	fTempPerm77;
	float 	fVec11[2048];
	float 	fRec29[2];
	float 	fTempPerm78;
	float 	fVec12[4096];
	float 	fRec27[2];
	float 	fTempPerm79;
	float 	fVec13[2048];
	float 	fTempPerm80;
	int 	iTempPerm81;
	float 	fTempPerm82;
	float 	fRec3[2];
	float 	fConst3;
	float 	fConst4;
	float 	fConst5;
	float 	fConst6;
	float 	fConst7;
	float 	fConst8;
	float 	fConst9;
	float 	fTempPerm83;
	float 	fRec55[3];
	float 	fRec54[3];
	float 	fTempPerm84;
	float 	fVec14[512];
	float 	fRec52[2];
	float 	fTempPerm85;
	float 	fVec15[512];
	float 	fRec50[2];
	float 	fTempPerm86;
	float 	fVec16[1024];
	float 	fRec48[2];
	float 	fTempPerm87;
	float 	fVec17[1024];
	float 	fRec46[2];
	float 	fTempPerm88;
	float 	fVec18[2048];
	float 	fRec44[2];
	float 	fTempPerm89;
	float 	fVec19[4096];
	float 	fRec42[2];
	float 	fTempPerm90;
	float 	fVec20[2048];
	float 	fTempPerm91;
	int 	iTempPerm92;
	float 	fTempPerm93;
	float 	fRec41[3];
	float 	fConst10;
	float 	fRec4[2];
	float 	fTempPerm94;
	float 	fTempPerm95;
	float 	fRec56[2];
	float 	fTempPerm96;
	float 	fRec70[3];
	float 	fRec69[3];
	float 	fTempPerm97;
	float 	fVec21[512];
	float 	fRec67[2];
	float 	fTempPerm98;
	float 	fVec22[512];
	float 	fRec65[2];
	float 	fTempPerm99;
	float 	fVec23[1024];
	float 	fRec63[2];
	float 	fTempPerm100;
	float 	fVec24[1024];
	float 	fRec61[2];
	float 	fTempPerm101;
	float 	fVec25[2048];
	float 	fRec59[2];
	float 	fTempPerm102;
	float 	fVec26[4096];
	float 	fRec57[2];
	float 	fTempPerm103;
	float 	fVec27[131072];
	float 	fTempPerm104;
	float 	fTempPerm105;
	int 	iTempPerm106;
	float 	fTempPerm107;
	int 	iTempPerm108;
	float 	fTempPerm109;
	FAUSTFLOAT 	fslider3;
	float 	fRec5[2];
	float 	fTempPerm110;
	float 	fTempPerm111;
	float 	fRec84[3];
	float 	fRec83[3];
	float 	fTempPerm112;
	float 	fVec28[512];
	float 	fRec81[2];
	float 	fTempPerm113;
	float 	fVec29[512];
	float 	fRec79[2];
	float 	fTempPerm114;
	float 	fVec30[1024];
	float 	fRec77[2];
	float 	fTempPerm115;
	float 	fVec31[1024];
	float 	fRec75[2];
	float 	fTempPerm116;
	float 	fVec32[2048];
	float 	fRec73[2];
	float 	fTempPerm117;
	float 	fVec33[4096];
	float 	fRec71[2];
	float 	fTempPerm118;
	float 	fVec34[2048];
	float 	fTempPerm119;
	int 	iTempPerm120;
	float 	fTempPerm121;
	float 	fRec6[2];
	float 	fRec98[3];
	float 	fRec97[3];
	float 	fTempPerm122;
	float 	fVec35[512];
	float 	fRec95[2];
	float 	fTempPerm123;
	float 	fVec36[512];
	float 	fRec93[2];
	float 	fTempPerm124;
	float 	fVec37[1024];
	float 	fRec91[2];
	float 	fTempPerm125;
	float 	fVec38[1024];
	float 	fRec89[2];
	float 	fTempPerm126;
	float 	fVec39[2048];
	float 	fRec87[2];
	float 	fTempPerm127;
	float 	fVec40[4096];
	float 	fRec85[2];
	float 	fTempPerm128;
	float 	fVec41[4096];
	float 	fTempPerm129;
	int 	iTempPerm130;
	float 	fTempPerm131;
	float 	fRec7[2];
	float 	fTempPerm132;
	float 	fTempPerm133;
	float 	fRec112[3];
	float 	fRec111[3];
	float 	fTempPerm134;
	float 	fVec42[512];
	float 	fRec109[2];
	float 	fTempPerm135;
	float 	fVec43[512];
	float 	fRec107[2];
	float 	fTempPerm136;
	float 	fVec44[1024];
	float 	fRec105[2];
	float 	fTempPerm137;
	float 	fVec45[1024];
	float 	fRec103[2];
	float 	fTempPerm138;
	float 	fVec46[2048];
	float 	fRec101[2];
	float 	fTempPerm139;
	float 	fVec47[4096];
	float 	fRec99[2];
	float 	fTempPerm140;
	float 	fVec48[4096];
	float 	fTempPerm141;
	int 	iTempPerm142;
	float 	fTempPerm143;
	float 	fRec8[2];
	float 	fRec126[3];
	float 	fRec125[3];
	float 	fTempPerm144;
	float 	fVec49[512];
	float 	fRec123[2];
	float 	fTempPerm145;
	float 	fVec50[512];
	float 	fRec121[2];
	float 	fTempPerm146;
	float 	fVec51[1024];
	float 	fRec119[2];
	float 	fTempPerm147;
	float 	fVec52[1024];
	float 	fRec117[2];
	float 	fTempPerm148;
	float 	fVec53[2048];
	float 	fRec115[2];
	float 	fTempPerm149;
	float 	fVec54[4096];
	float 	fRec113[2];
	float 	fTempPerm150;
	float 	fVec55[8192];
	float 	fTempPerm151;
	int 	iTempPerm152;
	float 	fTempPerm153;
	float 	fRec9[2];
	float 	fRec1[3];
	float 	fRec127[3];
	float 	fTempPerm154;
	int fSamplingFreq;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("basics.lib/name", "Faust Basic Element Library");
		m->declare("basics.lib/version", "0.0");
		m->declare("delays.lib/name", "Faust Delay Library");
		m->declare("delays.lib/version", "0.0");
		m->declare("filename", "wormhole");
		m->declare("filters.lib/name", "Faust Filters Library");
		m->declare("filters.lib/version", "0.0");
		m->declare("maths.lib/author", "GRAME");
		m->declare("maths.lib/copyright", "GRAME");
		m->declare("maths.lib/license", "LGPL with exception");
		m->declare("maths.lib/name", "Faust Math Library");
		m->declare("maths.lib/version", "2.1");
		m->declare("misceffects.lib/name", "Faust Math Library");
		m->declare("misceffects.lib/version", "2.0");
		m->declare("name", "wormhole");
		m->declare("oscillators.lib/name", "Faust Oscillator Library");
		m->declare("oscillators.lib/version", "0.0");
		m->declare("routes.lib/name", "Faust Signal Routing Library");
		m->declare("routes.lib/version", "0.0");
		m->declare("signals.lib/name", "Faust Signal Routing Library");
		m->declare("signals.lib/version", "0.0");
	}

	virtual int getNumInputs() { return 2; }
	virtual int getNumOutputs() { return 2; }
	static void classInit(int samplingFreq) {
		SIG0 sig0;
		sig0.init(samplingFreq);
		sig0.fill(65536,ftbl0);
	}
	virtual void instanceConstants(int samplingFreq) {
		fSamplingFreq = samplingFreq;
		fTempPerm0 = 0;
		fTempPerm1 = 0;
		fConst0 = min(192000.0f, max(1.0f, (float)fSamplingFreq));
		fConst1 = (3.1415926535897931f / fConst0);
		fTempPerm2 = 0;
		fTempPerm3 = 0;
		fTempPerm4 = 0;
		fTempPerm5 = 0;
		fTempPerm6 = 0;
		fTempPerm7 = 0;
		fTempPerm8 = 0;
		fTempPerm9 = 0;
		fTempPerm10 = 0;
		fTempPerm11 = 0;
		fTempPerm12 = 0;
		fTempPerm13 = 0;
		fConst2 = (0.25f / fConst0);
		fTempPerm15 = 0;
		fTempPerm16 = 0;
		fTempPerm17 = 0;
		iTempPerm18 = 0;
		iTempPerm19 = 0;
		fTempPerm20 = 0;
		fTempPerm21 = 0;
		fTempPerm22 = 0;
		iTempPerm23 = 0;
		fTempPerm24 = 0;
		fTempPerm25 = 0;
		fTempPerm26 = 0;
		iTempPerm27 = 0;
		iTempPerm28 = 0;
		fTempPerm29 = 0;
		fTempPerm30 = 0;
		fTempPerm31 = 0;
		iTempPerm32 = 0;
		fTempPerm33 = 0;
		fTempPerm34 = 0;
		fTempPerm35 = 0;
		iTempPerm36 = 0;
		iTempPerm37 = 0;
		fTempPerm38 = 0;
		fTempPerm39 = 0;
		fTempPerm40 = 0;
		iTempPerm41 = 0;
		fTempPerm42 = 0;
		fTempPerm43 = 0;
		fTempPerm44 = 0;
		iTempPerm45 = 0;
		iTempPerm46 = 0;
		fTempPerm47 = 0;
		fTempPerm48 = 0;
		fTempPerm49 = 0;
		iTempPerm50 = 0;
		fTempPerm51 = 0;
		fTempPerm52 = 0;
		fTempPerm53 = 0;
		iTempPerm54 = 0;
		iTempPerm55 = 0;
		fTempPerm56 = 0;
		fTempPerm57 = 0;
		fTempPerm58 = 0;
		iTempPerm59 = 0;
		fTempPerm60 = 0;
		fTempPerm61 = 0;
		fTempPerm62 = 0;
		iTempPerm63 = 0;
		iTempPerm64 = 0;
		fTempPerm65 = 0;
		fTempPerm66 = 0;
		fTempPerm67 = 0;
		iTempPerm68 = 0;
		fTempPerm69 = 0;
		fTempPerm70 = 0;
		iTempPerm71 = 0;
		fTempPerm72 = 0;
		fTempPerm73 = 0;
		fTempPerm74 = 0;
		fTempPerm75 = 0;
		fTempPerm76 = 0;
		fTempPerm77 = 0;
		fTempPerm78 = 0;
		fTempPerm79 = 0;
		fTempPerm80 = 0;
		iTempPerm81 = 0;
		fTempPerm82 = 0;
		fConst3 = tanf((314.15926535897933f / fConst0));
		fConst4 = faustpower<2>(fConst3);
		fConst5 = (1.0f / fConst4);
		fConst6 = (2.0f * (1.0f - fConst5));
		fConst7 = (1.0f / fConst3);
		fConst8 = (((fConst7 + -1.4142135623730949f) / fConst3) + 1.0f);
		fConst9 = (1.0f / (((fConst7 + 1.4142135623730949f) / fConst3) + 1.0f));
		fTempPerm83 = 0;
		fTempPerm84 = 0;
		fTempPerm85 = 0;
		fTempPerm86 = 0;
		fTempPerm87 = 0;
		fTempPerm88 = 0;
		fTempPerm89 = 0;
		fTempPerm90 = 0;
		fTempPerm91 = 0;
		iTempPerm92 = 0;
		fTempPerm93 = 0;
		fConst10 = (0 - (2.0f / fConst4));
		fTempPerm94 = 0;
		fTempPerm95 = 0;
		fTempPerm96 = 0;
		fTempPerm97 = 0;
		fTempPerm98 = 0;
		fTempPerm99 = 0;
		fTempPerm100 = 0;
		fTempPerm101 = 0;
		fTempPerm102 = 0;
		fTempPerm103 = 0;
		fTempPerm104 = 0;
		fTempPerm105 = 0;
		iTempPerm106 = 0;
		fTempPerm107 = 0;
		iTempPerm108 = 0;
		fTempPerm109 = 0;
		fTempPerm110 = 0;
		fTempPerm111 = 0;
		fTempPerm112 = 0;
		fTempPerm113 = 0;
		fTempPerm114 = 0;
		fTempPerm115 = 0;
		fTempPerm116 = 0;
		fTempPerm117 = 0;
		fTempPerm118 = 0;
		fTempPerm119 = 0;
		iTempPerm120 = 0;
		fTempPerm121 = 0;
		fTempPerm122 = 0;
		fTempPerm123 = 0;
		fTempPerm124 = 0;
		fTempPerm125 = 0;
		fTempPerm126 = 0;
		fTempPerm127 = 0;
		fTempPerm128 = 0;
		fTempPerm129 = 0;
		iTempPerm130 = 0;
		fTempPerm131 = 0;
		fTempPerm132 = 0;
		fTempPerm133 = 0;
		fTempPerm134 = 0;
		fTempPerm135 = 0;
		fTempPerm136 = 0;
		fTempPerm137 = 0;
		fTempPerm138 = 0;
		fTempPerm139 = 0;
		fTempPerm140 = 0;
		fTempPerm141 = 0;
		iTempPerm142 = 0;
		fTempPerm143 = 0;
		fTempPerm144 = 0;
		fTempPerm145 = 0;
		fTempPerm146 = 0;
		fTempPerm147 = 0;
		fTempPerm148 = 0;
		fTempPerm149 = 0;
		fTempPerm150 = 0;
		fTempPerm151 = 0;
		iTempPerm152 = 0;
		fTempPerm153 = 0;
		fTempPerm154 = 0;
	}
	virtual void instanceResetUserInterface() {
		fslider0 = 0.5f;
		fslider1 = 4000.0f;
		fslider2 = 0.5f;
		fslider3 = 0.0f;
	}
	virtual void instanceClear() {
		for (int i=0; i<2; i++) fRec0[i] = 0;
		for (int i=0; i<2; i++) fRec24[i] = 0;
		for (int i=0; i<3; i++) fRec23[i] = 0;
		for (int i=0; i<3; i++) fRec22[i] = 0;
		IOTA = 0;
		for (int i=0; i<512; i++) fVec0[i] = 0;
		for (int i=0; i<2; i++) fRec26[i] = 0;
		for (int i=0; i<2; i++) fRec20[i] = 0;
		for (int i=0; i<512; i++) fVec1[i] = 0;
		for (int i=0; i<2; i++) fRec18[i] = 0;
		for (int i=0; i<1024; i++) fVec2[i] = 0;
		for (int i=0; i<2; i++) fRec16[i] = 0;
		for (int i=0; i<1024; i++) fVec3[i] = 0;
		for (int i=0; i<2; i++) fRec14[i] = 0;
		for (int i=0; i<2048; i++) fVec4[i] = 0;
		for (int i=0; i<2; i++) fRec12[i] = 0;
		for (int i=0; i<4096; i++) fVec5[i] = 0;
		for (int i=0; i<2; i++) fRec10[i] = 0;
		for (int i=0; i<2048; i++) fVec6[i] = 0;
		for (int i=0; i<2; i++) fRec2[i] = 0;
		for (int i=0; i<3; i++) fRec40[i] = 0;
		for (int i=0; i<3; i++) fRec39[i] = 0;
		for (int i=0; i<512; i++) fVec7[i] = 0;
		for (int i=0; i<2; i++) fRec37[i] = 0;
		for (int i=0; i<512; i++) fVec8[i] = 0;
		for (int i=0; i<2; i++) fRec35[i] = 0;
		for (int i=0; i<1024; i++) fVec9[i] = 0;
		for (int i=0; i<2; i++) fRec33[i] = 0;
		for (int i=0; i<1024; i++) fVec10[i] = 0;
		for (int i=0; i<2; i++) fRec31[i] = 0;
		for (int i=0; i<2048; i++) fVec11[i] = 0;
		for (int i=0; i<2; i++) fRec29[i] = 0;
		for (int i=0; i<4096; i++) fVec12[i] = 0;
		for (int i=0; i<2; i++) fRec27[i] = 0;
		for (int i=0; i<2048; i++) fVec13[i] = 0;
		for (int i=0; i<2; i++) fRec3[i] = 0;
		for (int i=0; i<3; i++) fRec55[i] = 0;
		for (int i=0; i<3; i++) fRec54[i] = 0;
		for (int i=0; i<512; i++) fVec14[i] = 0;
		for (int i=0; i<2; i++) fRec52[i] = 0;
		for (int i=0; i<512; i++) fVec15[i] = 0;
		for (int i=0; i<2; i++) fRec50[i] = 0;
		for (int i=0; i<1024; i++) fVec16[i] = 0;
		for (int i=0; i<2; i++) fRec48[i] = 0;
		for (int i=0; i<1024; i++) fVec17[i] = 0;
		for (int i=0; i<2; i++) fRec46[i] = 0;
		for (int i=0; i<2048; i++) fVec18[i] = 0;
		for (int i=0; i<2; i++) fRec44[i] = 0;
		for (int i=0; i<4096; i++) fVec19[i] = 0;
		for (int i=0; i<2; i++) fRec42[i] = 0;
		for (int i=0; i<2048; i++) fVec20[i] = 0;
		for (int i=0; i<3; i++) fRec41[i] = 0;
		for (int i=0; i<2; i++) fRec4[i] = 0;
		for (int i=0; i<2; i++) fRec56[i] = 0;
		for (int i=0; i<3; i++) fRec70[i] = 0;
		for (int i=0; i<3; i++) fRec69[i] = 0;
		for (int i=0; i<512; i++) fVec21[i] = 0;
		for (int i=0; i<2; i++) fRec67[i] = 0;
		for (int i=0; i<512; i++) fVec22[i] = 0;
		for (int i=0; i<2; i++) fRec65[i] = 0;
		for (int i=0; i<1024; i++) fVec23[i] = 0;
		for (int i=0; i<2; i++) fRec63[i] = 0;
		for (int i=0; i<1024; i++) fVec24[i] = 0;
		for (int i=0; i<2; i++) fRec61[i] = 0;
		for (int i=0; i<2048; i++) fVec25[i] = 0;
		for (int i=0; i<2; i++) fRec59[i] = 0;
		for (int i=0; i<4096; i++) fVec26[i] = 0;
		for (int i=0; i<2; i++) fRec57[i] = 0;
		for (int i=0; i<131072; i++) fVec27[i] = 0;
		for (int i=0; i<2; i++) fRec5[i] = 0;
		for (int i=0; i<3; i++) fRec84[i] = 0;
		for (int i=0; i<3; i++) fRec83[i] = 0;
		for (int i=0; i<512; i++) fVec28[i] = 0;
		for (int i=0; i<2; i++) fRec81[i] = 0;
		for (int i=0; i<512; i++) fVec29[i] = 0;
		for (int i=0; i<2; i++) fRec79[i] = 0;
		for (int i=0; i<1024; i++) fVec30[i] = 0;
		for (int i=0; i<2; i++) fRec77[i] = 0;
		for (int i=0; i<1024; i++) fVec31[i] = 0;
		for (int i=0; i<2; i++) fRec75[i] = 0;
		for (int i=0; i<2048; i++) fVec32[i] = 0;
		for (int i=0; i<2; i++) fRec73[i] = 0;
		for (int i=0; i<4096; i++) fVec33[i] = 0;
		for (int i=0; i<2; i++) fRec71[i] = 0;
		for (int i=0; i<2048; i++) fVec34[i] = 0;
		for (int i=0; i<2; i++) fRec6[i] = 0;
		for (int i=0; i<3; i++) fRec98[i] = 0;
		for (int i=0; i<3; i++) fRec97[i] = 0;
		for (int i=0; i<512; i++) fVec35[i] = 0;
		for (int i=0; i<2; i++) fRec95[i] = 0;
		for (int i=0; i<512; i++) fVec36[i] = 0;
		for (int i=0; i<2; i++) fRec93[i] = 0;
		for (int i=0; i<1024; i++) fVec37[i] = 0;
		for (int i=0; i<2; i++) fRec91[i] = 0;
		for (int i=0; i<1024; i++) fVec38[i] = 0;
		for (int i=0; i<2; i++) fRec89[i] = 0;
		for (int i=0; i<2048; i++) fVec39[i] = 0;
		for (int i=0; i<2; i++) fRec87[i] = 0;
		for (int i=0; i<4096; i++) fVec40[i] = 0;
		for (int i=0; i<2; i++) fRec85[i] = 0;
		for (int i=0; i<4096; i++) fVec41[i] = 0;
		for (int i=0; i<2; i++) fRec7[i] = 0;
		for (int i=0; i<3; i++) fRec112[i] = 0;
		for (int i=0; i<3; i++) fRec111[i] = 0;
		for (int i=0; i<512; i++) fVec42[i] = 0;
		for (int i=0; i<2; i++) fRec109[i] = 0;
		for (int i=0; i<512; i++) fVec43[i] = 0;
		for (int i=0; i<2; i++) fRec107[i] = 0;
		for (int i=0; i<1024; i++) fVec44[i] = 0;
		for (int i=0; i<2; i++) fRec105[i] = 0;
		for (int i=0; i<1024; i++) fVec45[i] = 0;
		for (int i=0; i<2; i++) fRec103[i] = 0;
		for (int i=0; i<2048; i++) fVec46[i] = 0;
		for (int i=0; i<2; i++) fRec101[i] = 0;
		for (int i=0; i<4096; i++) fVec47[i] = 0;
		for (int i=0; i<2; i++) fRec99[i] = 0;
		for (int i=0; i<4096; i++) fVec48[i] = 0;
		for (int i=0; i<2; i++) fRec8[i] = 0;
		for (int i=0; i<3; i++) fRec126[i] = 0;
		for (int i=0; i<3; i++) fRec125[i] = 0;
		for (int i=0; i<512; i++) fVec49[i] = 0;
		for (int i=0; i<2; i++) fRec123[i] = 0;
		for (int i=0; i<512; i++) fVec50[i] = 0;
		for (int i=0; i<2; i++) fRec121[i] = 0;
		for (int i=0; i<1024; i++) fVec51[i] = 0;
		for (int i=0; i<2; i++) fRec119[i] = 0;
		for (int i=0; i<1024; i++) fVec52[i] = 0;
		for (int i=0; i<2; i++) fRec117[i] = 0;
		for (int i=0; i<2048; i++) fVec53[i] = 0;
		for (int i=0; i<2; i++) fRec115[i] = 0;
		for (int i=0; i<4096; i++) fVec54[i] = 0;
		for (int i=0; i<2; i++) fRec113[i] = 0;
		for (int i=0; i<8192; i++) fVec55[i] = 0;
		for (int i=0; i<2; i++) fRec9[i] = 0;
		for (int i=0; i<3; i++) fRec1[i] = 0;
		for (int i=0; i<3; i++) fRec127[i] = 0;
	}
	virtual void init(int samplingFreq) {
		classInit(samplingFreq);
		instanceInit(samplingFreq);
	}
	virtual void instanceInit(int samplingFreq) {
		instanceConstants(samplingFreq);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual faust_wormhole* clone() {
		return new faust_wormhole();
	}
	virtual int getSampleRate() {
		return fSamplingFreq;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("wormhole");
		ui_interface->addHorizontalSlider("LENGTH", &fslider2, 0.5f, 0.0f, 1.5f, 0.01f);
		ui_interface->addHorizontalSlider("MIX", &fslider0, 0.5f, 0.0f, 1.0f, 0.01f);
		ui_interface->declare(&fslider1, "scale", "log");
		ui_interface->addHorizontalSlider("SHAPE", &fslider1, 4000.0f, 100.0f, 14000.0f, 0.01f);
		ui_interface->addHorizontalSlider("SHIMMER", &fslider3, 0.0f, 0.0f, 1.2f, 0.01f);
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		//zone1
		//zone2
		float 	fSlow0 = float(fslider0);
		float 	fSlow1 = (2 * (1.0f - fSlow0));
		float 	fSlow2 = (0.0010000000000000009f * float(fslider1));
		float 	fSlow3 = (0.0010000000000000009f * float(fslider2));
		float 	fSlow4 = float(fslider3);
		float 	fSlow5 = (1.0f - fSlow4);
		//zone2b
		//zone3
		FAUSTFLOAT* input0 = input[0];
		FAUSTFLOAT* input1 = input[1];
		FAUSTFLOAT* output0 = output[0];
		FAUSTFLOAT* output1 = output[1];
		//LoopGraphScalar
		for (int i=0; i<count; i++) {
			fTempPerm0 = (float)input0[i];
			fTempPerm1 = (float)input1[i];
			fRec0[0] = (fSlow2 + (0.999f * fRec0[1]));
			fTempPerm2 = tanf((fConst1 * fRec0[0]));
			fTempPerm3 = (1.0f / fTempPerm2);
			fTempPerm4 = (((fTempPerm3 + 1.4142135623730949f) / fTempPerm2) + 1.0f);
			fTempPerm5 = (1.0f - (1.0f / faustpower<2>(fTempPerm2)));
			fTempPerm6 = (((fTempPerm3 + -1.4142135623730949f) / fTempPerm2) + 1.0f);
			fTempPerm7 = (((fTempPerm3 + 0.76536686473017945f) / fTempPerm2) + 1.0f);
			fTempPerm8 = (((fTempPerm3 + -0.76536686473017945f) / fTempPerm2) + 1.0f);
			fTempPerm9 = (((fTempPerm3 + 1.8477590650225735f) / fTempPerm2) + 1.0f);
			fTempPerm10 = (((fTempPerm3 + -1.8477590650225735f) / fTempPerm2) + 1.0f);
			fTempPerm11 = (fRec2[1] + fRec6[1]);
			fTempPerm12 = (fRec8[1] + (fTempPerm11 + fRec4[1]));
			fRec24[0] = (fSlow3 + (0.999f * fRec24[1]));
			fRec23[0] = ((fRec24[0] * (fRec9[1] + (fRec5[1] + (fRec7[1] + (fTempPerm12 + fRec3[1]))))) - (((fRec23[2] * fTempPerm10) + (2.0f * (fRec23[1] * fTempPerm5))) / fTempPerm9));
			fRec22[0] = (((fRec23[2] + (fRec23[0] + (2.0f * fRec23[1]))) / fTempPerm9) - (((fRec22[2] * fTempPerm8) + (2.0f * (fTempPerm5 * fRec22[1]))) / fTempPerm7));
			fTempPerm13 = ((((0.59999999999999998f * fRec20[1]) + ((fRec22[2] + (fRec22[0] + (2.0f * fRec22[1]))) / fTempPerm7)) + fTempPerm1) + fTempPerm0);
			fVec0[IOTA&511] = fTempPerm13;
			fRec26[0] = (fConst2 + (fRec26[1] - floorf((fConst2 + fRec26[1]))));
			fTempPerm15 = ((0.001f * ftbl0[int((65536.0f * fRec26[0]))]) + 1.0f);
			fTempPerm16 = (343.0f * fTempPerm15);
			fTempPerm17 = (fTempPerm16 + -1.0f);
			iTempPerm18 = int(fTempPerm17);
			iTempPerm19 = int(min(2049, max(0, (iTempPerm18 + 1))));
			fTempPerm20 = floorf(fTempPerm17);
			fTempPerm21 = (fTempPerm16 + (-1.0f - fTempPerm20));
			fTempPerm22 = (fTempPerm20 + (2.0f - fTempPerm16));
			iTempPerm23 = int(min(2049, max(0, iTempPerm18)));
			fRec20[0] = ((fVec0[(IOTA-iTempPerm23)&511] * fTempPerm22) + (fTempPerm21 * fVec0[(IOTA-iTempPerm19)&511]));
			float 	fRec21 = (0 - (0.59999999999999998f * fVec0[IOTA&511]));
			fTempPerm24 = (fRec20[1] + (fRec21 + (0.59999999999999998f * fRec18[1])));
			fVec1[IOTA&511] = fTempPerm24;
			fTempPerm25 = (441.0f * fTempPerm15);
			fTempPerm26 = (fTempPerm25 + -1.0f);
			iTempPerm27 = int(fTempPerm26);
			iTempPerm28 = int(min(2049, max(0, (iTempPerm27 + 1))));
			fTempPerm29 = floorf(fTempPerm26);
			fTempPerm30 = (fTempPerm25 + (-1.0f - fTempPerm29));
			fTempPerm31 = (fTempPerm29 + (2.0f - fTempPerm25));
			iTempPerm32 = int(min(2049, max(0, iTempPerm27)));
			fRec18[0] = ((fVec1[(IOTA-iTempPerm32)&511] * fTempPerm31) + (fTempPerm30 * fVec1[(IOTA-iTempPerm28)&511]));
			float 	fRec19 = (0 - (0.59999999999999998f * fVec1[IOTA&511]));
			fTempPerm33 = (fRec18[1] + (fRec19 + (0.59999999999999998f * fRec16[1])));
			fVec2[IOTA&1023] = fTempPerm33;
			fTempPerm34 = (625.0f * fTempPerm15);
			fTempPerm35 = (fTempPerm34 + -1.0f);
			iTempPerm36 = int(fTempPerm35);
			iTempPerm37 = int(min(2049, max(0, (iTempPerm36 + 1))));
			fTempPerm38 = floorf(fTempPerm35);
			fTempPerm39 = (fTempPerm34 + (-1.0f - fTempPerm38));
			fTempPerm40 = (fTempPerm38 + (2.0f - fTempPerm34));
			iTempPerm41 = int(min(2049, max(0, iTempPerm36)));
			fRec16[0] = ((fVec2[(IOTA-iTempPerm41)&1023] * fTempPerm40) + (fTempPerm39 * fVec2[(IOTA-iTempPerm37)&1023]));
			float 	fRec17 = (0 - (0.59999999999999998f * fVec2[IOTA&1023]));
			fTempPerm42 = (fRec16[1] + (fRec17 + (0.59999999999999998f * fRec14[1])));
			fVec3[IOTA&1023] = fTempPerm42;
			fTempPerm43 = (727.0f * fTempPerm15);
			fTempPerm44 = (fTempPerm43 + -1.0f);
			iTempPerm45 = int(fTempPerm44);
			iTempPerm46 = int(min(2049, max(0, (iTempPerm45 + 1))));
			fTempPerm47 = floorf(fTempPerm44);
			fTempPerm48 = (fTempPerm43 + (-1.0f - fTempPerm47));
			fTempPerm49 = (fTempPerm47 + (2.0f - fTempPerm43));
			iTempPerm50 = int(min(2049, max(0, iTempPerm45)));
			fRec14[0] = ((fVec3[(IOTA-iTempPerm50)&1023] * fTempPerm49) + (fTempPerm48 * fVec3[(IOTA-iTempPerm46)&1023]));
			float 	fRec15 = (0 - (0.59999999999999998f * fVec3[IOTA&1023]));
			fTempPerm51 = (fRec14[1] + (fRec15 + (0.59999999999999998f * fRec12[1])));
			fVec4[IOTA&2047] = fTempPerm51;
			fTempPerm52 = (1331.0f * fTempPerm15);
			fTempPerm53 = (fTempPerm52 + -1.0f);
			iTempPerm54 = int(fTempPerm53);
			iTempPerm55 = int(min(2049, max(0, (iTempPerm54 + 1))));
			fTempPerm56 = floorf(fTempPerm53);
			fTempPerm57 = (fTempPerm52 + (-1.0f - fTempPerm56));
			fTempPerm58 = (fTempPerm56 + (2.0f - fTempPerm52));
			iTempPerm59 = int(min(2049, max(0, iTempPerm54)));
			fRec12[0] = ((fVec4[(IOTA-iTempPerm59)&2047] * fTempPerm58) + (fTempPerm57 * fVec4[(IOTA-iTempPerm55)&2047]));
			float 	fRec13 = (0 - (0.59999999999999998f * fVec4[IOTA&2047]));
			fTempPerm60 = (fRec12[1] + (fRec13 + (0.59999999999999998f * fRec10[1])));
			fVec5[IOTA&4095] = fTempPerm60;
			fTempPerm61 = (2403.0f * fTempPerm15);
			fTempPerm62 = (fTempPerm61 + -1.0f);
			iTempPerm63 = int(fTempPerm62);
			iTempPerm64 = int(min(2049, max(0, (iTempPerm63 + 1))));
			fTempPerm65 = floorf(fTempPerm62);
			fTempPerm66 = (fTempPerm61 + (-1.0f - fTempPerm65));
			fTempPerm67 = (fTempPerm65 + (2.0f - fTempPerm61));
			iTempPerm68 = int(min(2049, max(0, iTempPerm63)));
			fRec10[0] = ((fVec5[(IOTA-iTempPerm68)&4095] * fTempPerm67) + (fTempPerm66 * fVec5[(IOTA-iTempPerm64)&4095]));
			float 	fRec11 = (0 - (0.59999999999999998f * fVec5[IOTA&4095]));
			fTempPerm69 = (fRec11 + fRec10[1]);
			fVec6[IOTA&2047] = fTempPerm69;
			fTempPerm70 = (1356.0f * fTempPerm15);
			iTempPerm71 = int(fTempPerm70);
			fTempPerm72 = floorf(fTempPerm70);
			fRec2[0] = (0.35355339059327373f * ((fVec6[(IOTA-int(min(8193, max(0, iTempPerm71))))&2047] * (fTempPerm72 + (1.0f - fTempPerm70))) + ((fTempPerm70 - fTempPerm72) * fVec6[(IOTA-int(min(8193, max(0, (iTempPerm71 + 1)))))&2047])));
			fRec40[0] = ((fRec24[0] * (fTempPerm12 - (fRec9[1] + ((fRec3[1] + fRec7[1]) + fRec5[1])))) - (((fTempPerm10 * fRec40[2]) + (2.0f * (fTempPerm5 * fRec40[1]))) / fTempPerm9));
			fRec39[0] = (((fRec40[2] + (fRec40[0] + (2.0f * fRec40[1]))) / fTempPerm9) - (((fTempPerm8 * fRec39[2]) + (2.0f * (fTempPerm5 * fRec39[1]))) / fTempPerm7));
			fTempPerm73 = ((((0.59999999999999998f * fRec37[1]) + ((fRec39[2] + (fRec39[0] + (2.0f * fRec39[1]))) / fTempPerm7)) + fTempPerm1) + fTempPerm0);
			fVec7[IOTA&511] = fTempPerm73;
			fRec37[0] = ((fTempPerm22 * fVec7[(IOTA-iTempPerm23)&511]) + (fTempPerm21 * fVec7[(IOTA-iTempPerm19)&511]));
			float 	fRec38 = (0 - (0.59999999999999998f * fVec7[IOTA&511]));
			fTempPerm74 = (fRec37[1] + (fRec38 + (0.59999999999999998f * fRec35[1])));
			fVec8[IOTA&511] = fTempPerm74;
			fRec35[0] = ((fTempPerm31 * fVec8[(IOTA-iTempPerm32)&511]) + (fTempPerm30 * fVec8[(IOTA-iTempPerm28)&511]));
			float 	fRec36 = (0 - (0.59999999999999998f * fVec8[IOTA&511]));
			fTempPerm75 = (fRec35[1] + (fRec36 + (0.59999999999999998f * fRec33[1])));
			fVec9[IOTA&1023] = fTempPerm75;
			fRec33[0] = ((fTempPerm40 * fVec9[(IOTA-iTempPerm41)&1023]) + (fTempPerm39 * fVec9[(IOTA-iTempPerm37)&1023]));
			float 	fRec34 = (0 - (0.59999999999999998f * fVec9[IOTA&1023]));
			fTempPerm76 = (fRec33[1] + (fRec34 + (0.59999999999999998f * fRec31[1])));
			fVec10[IOTA&1023] = fTempPerm76;
			fRec31[0] = ((fTempPerm49 * fVec10[(IOTA-iTempPerm50)&1023]) + (fTempPerm48 * fVec10[(IOTA-iTempPerm46)&1023]));
			float 	fRec32 = (0 - (0.59999999999999998f * fVec10[IOTA&1023]));
			fTempPerm77 = (fRec31[1] + (fRec32 + (0.59999999999999998f * fRec29[1])));
			fVec11[IOTA&2047] = fTempPerm77;
			fRec29[0] = ((fTempPerm58 * fVec11[(IOTA-iTempPerm59)&2047]) + (fTempPerm57 * fVec11[(IOTA-iTempPerm55)&2047]));
			float 	fRec30 = (0 - (0.59999999999999998f * fVec11[IOTA&2047]));
			fTempPerm78 = (fRec29[1] + (fRec30 + (0.59999999999999998f * fRec27[1])));
			fVec12[IOTA&4095] = fTempPerm78;
			fRec27[0] = ((fTempPerm67 * fVec12[(IOTA-iTempPerm68)&4095]) + (fTempPerm66 * fVec12[(IOTA-iTempPerm64)&4095]));
			float 	fRec28 = (0 - (0.59999999999999998f * fVec12[IOTA&4095]));
			fTempPerm79 = (fRec28 + fRec27[1]);
			fVec13[IOTA&2047] = fTempPerm79;
			fTempPerm80 = (1422.0f * fTempPerm15);
			iTempPerm81 = int(fTempPerm80);
			fTempPerm82 = floorf(fTempPerm80);
			fRec3[0] = (0.35355339059327373f * ((fVec13[(IOTA-int(min(8193, max(0, iTempPerm81))))&2047] * (fTempPerm82 + (1.0f - fTempPerm80))) + ((fTempPerm80 - fTempPerm82) * fVec13[(IOTA-int(min(8193, max(0, (iTempPerm81 + 1)))))&2047])));
			fTempPerm83 = (fRec4[1] + fRec8[1]);
			fRec55[0] = ((fRec24[0] * ((fRec7[1] + (fTempPerm11 + fRec3[1])) - (fRec9[1] + (fTempPerm83 + fRec5[1])))) - (((fTempPerm10 * fRec55[2]) + (2.0f * (fTempPerm5 * fRec55[1]))) / fTempPerm9));
			fRec54[0] = (((fRec55[2] + (fRec55[0] + (2.0f * fRec55[1]))) / fTempPerm9) - (((fTempPerm8 * fRec54[2]) + (2.0f * (fTempPerm5 * fRec54[1]))) / fTempPerm7));
			fTempPerm84 = ((((0.59999999999999998f * fRec52[1]) + ((fRec54[2] + (fRec54[0] + (2.0f * fRec54[1]))) / fTempPerm7)) + fTempPerm1) + fTempPerm0);
			fVec14[IOTA&511] = fTempPerm84;
			fRec52[0] = ((fTempPerm22 * fVec14[(IOTA-iTempPerm23)&511]) + (fTempPerm21 * fVec14[(IOTA-iTempPerm19)&511]));
			float 	fRec53 = (0 - (0.59999999999999998f * fVec14[IOTA&511]));
			fTempPerm85 = (fRec52[1] + (fRec53 + (0.59999999999999998f * fRec50[1])));
			fVec15[IOTA&511] = fTempPerm85;
			fRec50[0] = ((fTempPerm31 * fVec15[(IOTA-iTempPerm32)&511]) + (fTempPerm30 * fVec15[(IOTA-iTempPerm28)&511]));
			float 	fRec51 = (0 - (0.59999999999999998f * fVec15[IOTA&511]));
			fTempPerm86 = (fRec50[1] + (fRec51 + (0.59999999999999998f * fRec48[1])));
			fVec16[IOTA&1023] = fTempPerm86;
			fRec48[0] = ((fTempPerm40 * fVec16[(IOTA-iTempPerm41)&1023]) + (fTempPerm39 * fVec16[(IOTA-iTempPerm37)&1023]));
			float 	fRec49 = (0 - (0.59999999999999998f * fVec16[IOTA&1023]));
			fTempPerm87 = (fRec48[1] + (fRec49 + (0.59999999999999998f * fRec46[1])));
			fVec17[IOTA&1023] = fTempPerm87;
			fRec46[0] = ((fTempPerm49 * fVec17[(IOTA-iTempPerm50)&1023]) + (fTempPerm48 * fVec17[(IOTA-iTempPerm46)&1023]));
			float 	fRec47 = (0 - (0.59999999999999998f * fVec17[IOTA&1023]));
			fTempPerm88 = (fRec46[1] + (fRec47 + (0.59999999999999998f * fRec44[1])));
			fVec18[IOTA&2047] = fTempPerm88;
			fRec44[0] = ((fTempPerm58 * fVec18[(IOTA-iTempPerm59)&2047]) + (fTempPerm57 * fVec18[(IOTA-iTempPerm55)&2047]));
			float 	fRec45 = (0 - (0.59999999999999998f * fVec18[IOTA&2047]));
			fTempPerm89 = (fRec44[1] + (fRec45 + (0.59999999999999998f * fRec42[1])));
			fVec19[IOTA&4095] = fTempPerm89;
			fRec42[0] = ((fTempPerm67 * fVec19[(IOTA-iTempPerm68)&4095]) + (fTempPerm66 * fVec19[(IOTA-iTempPerm64)&4095]));
			float 	fRec43 = (0 - (0.59999999999999998f * fVec19[IOTA&4095]));
			fTempPerm90 = (fRec43 + fRec42[1]);
			fVec20[IOTA&2047] = fTempPerm90;
			fTempPerm91 = (1557.0f * fTempPerm15);
			iTempPerm92 = int(fTempPerm91);
			fTempPerm93 = floorf(fTempPerm91);
			fRec41[0] = ((0.35355339059327373f * ((fVec20[(IOTA-int(min(8193, max(0, iTempPerm92))))&2047] * (fTempPerm93 + (1.0f - fTempPerm91))) + ((fTempPerm91 - fTempPerm93) * fVec20[(IOTA-int(min(8193, max(0, (iTempPerm92 + 1)))))&2047]))) - (fConst9 * ((fConst8 * fRec41[2]) + (fConst6 * fRec41[1]))));
			fRec4[0] = (fConst9 * (((fConst5 * fRec41[0]) + (fConst10 * fRec41[1])) + (fConst5 * fRec41[2])));
			fTempPerm94 = (1617.0f * fTempPerm15);
			fTempPerm95 = (fTempPerm94 + 8192.0f);
			fRec56[0] = fmodf(((fTempPerm94 + fRec56[1]) + 8191.0f),fTempPerm95);
			fTempPerm96 = min((fRec56[0] / fTempPerm95), (float)1);
			fRec70[0] = ((fRec24[0] * ((fRec9[1] + (fTempPerm11 + fRec5[1])) - (fRec7[1] + (fTempPerm83 + fRec3[1])))) - (((fTempPerm10 * fRec70[2]) + (2.0f * (fTempPerm5 * fRec70[1]))) / fTempPerm9));
			fRec69[0] = (((fRec70[2] + (fRec70[0] + (2.0f * fRec70[1]))) / fTempPerm9) - (((fTempPerm8 * fRec69[2]) + (2.0f * (fTempPerm5 * fRec69[1]))) / fTempPerm7));
			fTempPerm97 = ((((0.59999999999999998f * fRec67[1]) + ((fRec69[2] + (fRec69[0] + (2.0f * fRec69[1]))) / fTempPerm7)) + fTempPerm1) + fTempPerm0);
			fVec21[IOTA&511] = fTempPerm97;
			fRec67[0] = ((fTempPerm22 * fVec21[(IOTA-iTempPerm23)&511]) + (fTempPerm21 * fVec21[(IOTA-iTempPerm19)&511]));
			float 	fRec68 = (0 - (0.59999999999999998f * fVec21[IOTA&511]));
			fTempPerm98 = (fRec67[1] + (fRec68 + (0.59999999999999998f * fRec65[1])));
			fVec22[IOTA&511] = fTempPerm98;
			fRec65[0] = ((fTempPerm31 * fVec22[(IOTA-iTempPerm32)&511]) + (fTempPerm30 * fVec22[(IOTA-iTempPerm28)&511]));
			float 	fRec66 = (0 - (0.59999999999999998f * fVec22[IOTA&511]));
			fTempPerm99 = (fRec65[1] + (fRec66 + (0.59999999999999998f * fRec63[1])));
			fVec23[IOTA&1023] = fTempPerm99;
			fRec63[0] = ((fTempPerm40 * fVec23[(IOTA-iTempPerm41)&1023]) + (fTempPerm39 * fVec23[(IOTA-iTempPerm37)&1023]));
			float 	fRec64 = (0 - (0.59999999999999998f * fVec23[IOTA&1023]));
			fTempPerm100 = (fRec63[1] + (fRec64 + (0.59999999999999998f * fRec61[1])));
			fVec24[IOTA&1023] = fTempPerm100;
			fRec61[0] = ((fTempPerm49 * fVec24[(IOTA-iTempPerm50)&1023]) + (fTempPerm48 * fVec24[(IOTA-iTempPerm46)&1023]));
			float 	fRec62 = (0 - (0.59999999999999998f * fVec24[IOTA&1023]));
			fTempPerm101 = (fRec61[1] + (fRec62 + (0.59999999999999998f * fRec59[1])));
			fVec25[IOTA&2047] = fTempPerm101;
			fRec59[0] = ((fTempPerm58 * fVec25[(IOTA-iTempPerm59)&2047]) + (fTempPerm57 * fVec25[(IOTA-iTempPerm55)&2047]));
			float 	fRec60 = (0 - (0.59999999999999998f * fVec25[IOTA&2047]));
			fTempPerm102 = (fRec59[1] + (fRec60 + (0.59999999999999998f * fRec57[1])));
			fVec26[IOTA&4095] = fTempPerm102;
			fRec57[0] = ((fTempPerm67 * fVec26[(IOTA-iTempPerm68)&4095]) + (fTempPerm66 * fVec26[(IOTA-iTempPerm64)&4095]));
			float 	fRec58 = (0 - (0.59999999999999998f * fVec26[IOTA&4095]));
			fTempPerm103 = (fRec58 + fRec57[1]);
			fVec27[IOTA&131071] = fTempPerm103;
			fTempPerm104 = (fRec56[0] + fTempPerm94);
			fTempPerm105 = (fTempPerm104 + 8192.0f);
			iTempPerm106 = int(fTempPerm105);
			fTempPerm107 = floorf(fTempPerm105);
			iTempPerm108 = int(fRec56[0]);
			fTempPerm109 = floorf(fRec56[0]);
			fRec5[0] = (0.35355339059327373f * ((fSlow5 * fVec27[(IOTA-int(min((float)8192, max((float)0, fTempPerm95))))&131071]) + (fSlow4 * ((((fVec27[(IOTA-int(min(65537, max(0, iTempPerm108))))&131071] * (fTempPerm109 + (1.0f - fRec56[0]))) + ((fRec56[0] - fTempPerm109) * fVec27[(IOTA-int(min(65537, max(0, (iTempPerm108 + 1)))))&131071])) * fTempPerm96) + (((fVec27[(IOTA-int(min(65537, max(0, iTempPerm106))))&131071] * (fTempPerm107 + (-8191.0f - fTempPerm104))) + ((fTempPerm104 + (8192.0f - fTempPerm107)) * fVec27[(IOTA-int(min(65537, max(0, (iTempPerm106 + 1)))))&131071])) * (1.0f - fTempPerm96))))));
			fTempPerm110 = (fRec6[1] + fRec8[1]);
			fTempPerm111 = (fRec2[1] + fRec4[1]);
			fRec84[0] = ((fRec24[0] * ((fRec5[1] + (fRec3[1] + fTempPerm111)) - (fRec9[1] + (fRec7[1] + fTempPerm110)))) - (((fTempPerm10 * fRec84[2]) + (2.0f * (fTempPerm5 * fRec84[1]))) / fTempPerm9));
			fRec83[0] = (((fRec84[2] + (fRec84[0] + (2.0f * fRec84[1]))) / fTempPerm9) - (((fTempPerm8 * fRec83[2]) + (2.0f * (fTempPerm5 * fRec83[1]))) / fTempPerm7));
			fTempPerm112 = ((((0.59999999999999998f * fRec81[1]) + ((fRec83[2] + (fRec83[0] + (2.0f * fRec83[1]))) / fTempPerm7)) + fTempPerm1) + fTempPerm0);
			fVec28[IOTA&511] = fTempPerm112;
			fRec81[0] = ((fTempPerm22 * fVec28[(IOTA-iTempPerm23)&511]) + (fTempPerm21 * fVec28[(IOTA-iTempPerm19)&511]));
			float 	fRec82 = (0 - (0.59999999999999998f * fVec28[IOTA&511]));
			fTempPerm113 = (fRec81[1] + (fRec82 + (0.59999999999999998f * fRec79[1])));
			fVec29[IOTA&511] = fTempPerm113;
			fRec79[0] = ((fTempPerm31 * fVec29[(IOTA-iTempPerm32)&511]) + (fTempPerm30 * fVec29[(IOTA-iTempPerm28)&511]));
			float 	fRec80 = (0 - (0.59999999999999998f * fVec29[IOTA&511]));
			fTempPerm114 = (fRec79[1] + (fRec80 + (0.59999999999999998f * fRec77[1])));
			fVec30[IOTA&1023] = fTempPerm114;
			fRec77[0] = ((fTempPerm40 * fVec30[(IOTA-iTempPerm41)&1023]) + (fTempPerm39 * fVec30[(IOTA-iTempPerm37)&1023]));
			float 	fRec78 = (0 - (0.59999999999999998f * fVec30[IOTA&1023]));
			fTempPerm115 = (fRec77[1] + (fRec78 + (0.59999999999999998f * fRec75[1])));
			fVec31[IOTA&1023] = fTempPerm115;
			fRec75[0] = ((fTempPerm49 * fVec31[(IOTA-iTempPerm50)&1023]) + (fTempPerm48 * fVec31[(IOTA-iTempPerm46)&1023]));
			float 	fRec76 = (0 - (0.59999999999999998f * fVec31[IOTA&1023]));
			fTempPerm116 = (fRec75[1] + (fRec76 + (0.59999999999999998f * fRec73[1])));
			fVec32[IOTA&2047] = fTempPerm116;
			fRec73[0] = ((fTempPerm58 * fVec32[(IOTA-iTempPerm59)&2047]) + (fTempPerm57 * fVec32[(IOTA-iTempPerm55)&2047]));
			float 	fRec74 = (0 - (0.59999999999999998f * fVec32[IOTA&2047]));
			fTempPerm117 = (fRec73[1] + (fRec74 + (0.59999999999999998f * fRec71[1])));
			fVec33[IOTA&4095] = fTempPerm117;
			fRec71[0] = ((fTempPerm67 * fVec33[(IOTA-iTempPerm68)&4095]) + (fTempPerm66 * fVec33[(IOTA-iTempPerm64)&4095]));
			float 	fRec72 = (0 - (0.59999999999999998f * fVec33[IOTA&4095]));
			fTempPerm118 = (fRec72 + fRec71[1]);
			fVec34[IOTA&2047] = fTempPerm118;
			fTempPerm119 = (1933.0f * fTempPerm15);
			iTempPerm120 = int(fTempPerm119);
			fTempPerm121 = floorf(fTempPerm119);
			fRec6[0] = (0.35355339059327373f * ((fVec34[(IOTA-int(min(8193, max(0, iTempPerm120))))&2047] * (fTempPerm121 + (1.0f - fTempPerm119))) + ((fTempPerm119 - fTempPerm121) * fVec34[(IOTA-int(min(8193, max(0, (iTempPerm120 + 1)))))&2047])));
			fRec98[0] = ((fRec24[0] * ((fRec9[1] + (fRec7[1] + fTempPerm111)) - (fRec5[1] + (fRec3[1] + fTempPerm110)))) - (((fTempPerm10 * fRec98[2]) + (2.0f * (fTempPerm5 * fRec98[1]))) / fTempPerm9));
			fRec97[0] = (((fRec98[2] + (fRec98[0] + (2.0f * fRec98[1]))) / fTempPerm9) - (((fTempPerm8 * fRec97[2]) + (2.0f * (fTempPerm5 * fRec97[1]))) / fTempPerm7));
			fTempPerm122 = ((((0.59999999999999998f * fRec95[1]) + ((fRec97[2] + (fRec97[0] + (2.0f * fRec97[1]))) / fTempPerm7)) + fTempPerm1) + fTempPerm0);
			fVec35[IOTA&511] = fTempPerm122;
			fRec95[0] = ((fTempPerm22 * fVec35[(IOTA-iTempPerm23)&511]) + (fTempPerm21 * fVec35[(IOTA-iTempPerm19)&511]));
			float 	fRec96 = (0 - (0.59999999999999998f * fVec35[IOTA&511]));
			fTempPerm123 = (fRec95[1] + (fRec96 + (0.59999999999999998f * fRec93[1])));
			fVec36[IOTA&511] = fTempPerm123;
			fRec93[0] = ((fTempPerm31 * fVec36[(IOTA-iTempPerm32)&511]) + (fTempPerm30 * fVec36[(IOTA-iTempPerm28)&511]));
			float 	fRec94 = (0 - (0.59999999999999998f * fVec36[IOTA&511]));
			fTempPerm124 = (fRec93[1] + (fRec94 + (0.59999999999999998f * fRec91[1])));
			fVec37[IOTA&1023] = fTempPerm124;
			fRec91[0] = ((fTempPerm40 * fVec37[(IOTA-iTempPerm41)&1023]) + (fTempPerm39 * fVec37[(IOTA-iTempPerm37)&1023]));
			float 	fRec92 = (0 - (0.59999999999999998f * fVec37[IOTA&1023]));
			fTempPerm125 = (fRec91[1] + (fRec92 + (0.59999999999999998f * fRec89[1])));
			fVec38[IOTA&1023] = fTempPerm125;
			fRec89[0] = ((fTempPerm49 * fVec38[(IOTA-iTempPerm50)&1023]) + (fTempPerm48 * fVec38[(IOTA-iTempPerm46)&1023]));
			float 	fRec90 = (0 - (0.59999999999999998f * fVec38[IOTA&1023]));
			fTempPerm126 = (fRec89[1] + (fRec90 + (0.59999999999999998f * fRec87[1])));
			fVec39[IOTA&2047] = fTempPerm126;
			fRec87[0] = ((fTempPerm58 * fVec39[(IOTA-iTempPerm59)&2047]) + (fTempPerm57 * fVec39[(IOTA-iTempPerm55)&2047]));
			float 	fRec88 = (0 - (0.59999999999999998f * fVec39[IOTA&2047]));
			fTempPerm127 = (fRec87[1] + (fRec88 + (0.59999999999999998f * fRec85[1])));
			fVec40[IOTA&4095] = fTempPerm127;
			fRec85[0] = ((fTempPerm67 * fVec40[(IOTA-iTempPerm68)&4095]) + (fTempPerm66 * fVec40[(IOTA-iTempPerm64)&4095]));
			float 	fRec86 = (0 - (0.59999999999999998f * fVec40[IOTA&4095]));
			fTempPerm128 = (fRec86 + fRec85[1]);
			fVec41[IOTA&4095] = fTempPerm128;
			fTempPerm129 = (2401.0f * fTempPerm15);
			iTempPerm130 = int(fTempPerm129);
			fTempPerm131 = floorf(fTempPerm129);
			fRec7[0] = (0.35355339059327373f * ((fVec41[(IOTA-int(min(8193, max(0, iTempPerm130))))&4095] * (fTempPerm131 + (1.0f - fTempPerm129))) + ((fTempPerm129 - fTempPerm131) * fVec41[(IOTA-int(min(8193, max(0, (iTempPerm130 + 1)))))&4095])));
			fTempPerm132 = (fRec6[1] + fRec4[1]);
			fTempPerm133 = (fRec2[1] + fRec8[1]);
			fRec112[0] = ((fRec24[0] * ((fRec9[1] + (fRec3[1] + fTempPerm133)) - (fRec5[1] + (fRec7[1] + fTempPerm132)))) - (((fTempPerm10 * fRec112[2]) + (2.0f * (fTempPerm5 * fRec112[1]))) / fTempPerm9));
			fRec111[0] = (((fRec112[2] + (fRec112[0] + (2.0f * fRec112[1]))) / fTempPerm9) - (((fTempPerm8 * fRec111[2]) + (2.0f * (fTempPerm5 * fRec111[1]))) / fTempPerm7));
			fTempPerm134 = ((((0.59999999999999998f * fRec109[1]) + ((fRec111[2] + (fRec111[0] + (2.0f * fRec111[1]))) / fTempPerm7)) + fTempPerm1) + fTempPerm0);
			fVec42[IOTA&511] = fTempPerm134;
			fRec109[0] = ((fTempPerm22 * fVec42[(IOTA-iTempPerm23)&511]) + (fTempPerm21 * fVec42[(IOTA-iTempPerm19)&511]));
			float 	fRec110 = (0 - (0.59999999999999998f * fVec42[IOTA&511]));
			fTempPerm135 = (fRec109[1] + (fRec110 + (0.59999999999999998f * fRec107[1])));
			fVec43[IOTA&511] = fTempPerm135;
			fRec107[0] = ((fTempPerm31 * fVec43[(IOTA-iTempPerm32)&511]) + (fTempPerm30 * fVec43[(IOTA-iTempPerm28)&511]));
			float 	fRec108 = (0 - (0.59999999999999998f * fVec43[IOTA&511]));
			fTempPerm136 = (fRec107[1] + (fRec108 + (0.59999999999999998f * fRec105[1])));
			fVec44[IOTA&1023] = fTempPerm136;
			fRec105[0] = ((fTempPerm40 * fVec44[(IOTA-iTempPerm41)&1023]) + (fTempPerm39 * fVec44[(IOTA-iTempPerm37)&1023]));
			float 	fRec106 = (0 - (0.59999999999999998f * fVec44[IOTA&1023]));
			fTempPerm137 = (fRec105[1] + (fRec106 + (0.59999999999999998f * fRec103[1])));
			fVec45[IOTA&1023] = fTempPerm137;
			fRec103[0] = ((fTempPerm49 * fVec45[(IOTA-iTempPerm50)&1023]) + (fTempPerm48 * fVec45[(IOTA-iTempPerm46)&1023]));
			float 	fRec104 = (0 - (0.59999999999999998f * fVec45[IOTA&1023]));
			fTempPerm138 = (fRec103[1] + (fRec104 + (0.59999999999999998f * fRec101[1])));
			fVec46[IOTA&2047] = fTempPerm138;
			fRec101[0] = ((fTempPerm58 * fVec46[(IOTA-iTempPerm59)&2047]) + (fTempPerm57 * fVec46[(IOTA-iTempPerm55)&2047]));
			float 	fRec102 = (0 - (0.59999999999999998f * fVec46[IOTA&2047]));
			fTempPerm139 = (fRec101[1] + (fRec102 + (0.59999999999999998f * fRec99[1])));
			fVec47[IOTA&4095] = fTempPerm139;
			fRec99[0] = ((fTempPerm67 * fVec47[(IOTA-iTempPerm68)&4095]) + (fTempPerm66 * fVec47[(IOTA-iTempPerm64)&4095]));
			float 	fRec100 = (0 - (0.59999999999999998f * fVec47[IOTA&4095]));
			fTempPerm140 = (fRec100 + fRec99[1]);
			fVec48[IOTA&4095] = fTempPerm140;
			fTempPerm141 = (3125.0f * fTempPerm15);
			iTempPerm142 = int(fTempPerm141);
			fTempPerm143 = floorf(fTempPerm141);
			fRec8[0] = (0.35355339059327373f * ((fVec48[(IOTA-int(min(8193, max(0, iTempPerm142))))&4095] * (fTempPerm143 + (1.0f - fTempPerm141))) + ((fTempPerm141 - fTempPerm143) * fVec48[(IOTA-int(min(8193, max(0, (iTempPerm142 + 1)))))&4095])));
			fRec126[0] = ((fRec24[0] * ((fRec5[1] + (fRec7[1] + fTempPerm133)) - (fRec9[1] + (fRec3[1] + fTempPerm132)))) - (((fTempPerm10 * fRec126[2]) + (2.0f * (fTempPerm5 * fRec126[1]))) / fTempPerm9));
			fRec125[0] = (((fRec126[2] + (fRec126[0] + (2.0f * fRec126[1]))) / fTempPerm9) - (((fTempPerm8 * fRec125[2]) + (2.0f * (fTempPerm5 * fRec125[1]))) / fTempPerm7));
			fTempPerm144 = ((((0.59999999999999998f * fRec123[1]) + ((fRec125[2] + (fRec125[0] + (2.0f * fRec125[1]))) / fTempPerm7)) + fTempPerm1) + fTempPerm0);
			fVec49[IOTA&511] = fTempPerm144;
			fRec123[0] = ((fTempPerm22 * fVec49[(IOTA-iTempPerm23)&511]) + (fTempPerm21 * fVec49[(IOTA-iTempPerm19)&511]));
			float 	fRec124 = (0 - (0.59999999999999998f * fVec49[IOTA&511]));
			fTempPerm145 = (fRec123[1] + (fRec124 + (0.59999999999999998f * fRec121[1])));
			fVec50[IOTA&511] = fTempPerm145;
			fRec121[0] = ((fTempPerm31 * fVec50[(IOTA-iTempPerm32)&511]) + (fTempPerm30 * fVec50[(IOTA-iTempPerm28)&511]));
			float 	fRec122 = (0 - (0.59999999999999998f * fVec50[IOTA&511]));
			fTempPerm146 = (fRec121[1] + (fRec122 + (0.59999999999999998f * fRec119[1])));
			fVec51[IOTA&1023] = fTempPerm146;
			fRec119[0] = ((fTempPerm40 * fVec51[(IOTA-iTempPerm41)&1023]) + (fTempPerm39 * fVec51[(IOTA-iTempPerm37)&1023]));
			float 	fRec120 = (0 - (0.59999999999999998f * fVec51[IOTA&1023]));
			fTempPerm147 = (fRec119[1] + (fRec120 + (0.59999999999999998f * fRec117[1])));
			fVec52[IOTA&1023] = fTempPerm147;
			fRec117[0] = ((fTempPerm49 * fVec52[(IOTA-iTempPerm50)&1023]) + (fTempPerm48 * fVec52[(IOTA-iTempPerm46)&1023]));
			float 	fRec118 = (0 - (0.59999999999999998f * fVec52[IOTA&1023]));
			fTempPerm148 = (fRec117[1] + (fRec118 + (0.59999999999999998f * fRec115[1])));
			fVec53[IOTA&2047] = fTempPerm148;
			fRec115[0] = ((fTempPerm58 * fVec53[(IOTA-iTempPerm59)&2047]) + (fTempPerm57 * fVec53[(IOTA-iTempPerm55)&2047]));
			float 	fRec116 = (0 - (0.59999999999999998f * fVec53[IOTA&2047]));
			fTempPerm149 = (fRec115[1] + (fRec116 + (0.59999999999999998f * fRec113[1])));
			fVec54[IOTA&4095] = fTempPerm149;
			fRec113[0] = ((fTempPerm67 * fVec54[(IOTA-iTempPerm68)&4095]) + (fTempPerm66 * fVec54[(IOTA-iTempPerm64)&4095]));
			float 	fRec114 = (0 - (0.59999999999999998f * fVec54[IOTA&4095]));
			fTempPerm150 = (fRec114 + fRec113[1]);
			fVec55[IOTA&8191] = fTempPerm150;
			fTempPerm151 = (6561.0f * fTempPerm15);
			iTempPerm152 = int(fTempPerm151);
			fTempPerm153 = floorf(fTempPerm151);
			fRec9[0] = (0.35355339059327373f * ((fVec55[(IOTA-int(min(8193, max(0, iTempPerm152))))&8191] * (fTempPerm153 + (1.0f - fTempPerm151))) + ((fTempPerm151 - fTempPerm153) * fVec55[(IOTA-int(min(8193, max(0, (iTempPerm152 + 1)))))&8191])));
			fRec1[0] = ((((fRec3[0] + fRec5[0]) + fRec7[0]) + fRec9[0]) - (((fTempPerm6 * fRec1[2]) + (2.0f * (fTempPerm5 * fRec1[1]))) / fTempPerm4));
			fRec127[0] = ((((fRec2[0] + fRec4[0]) + fRec6[0]) + fRec8[0]) - (((fRec127[2] * fTempPerm6) + (2.0f * (fTempPerm5 * fRec127[1]))) / fTempPerm4));
			fTempPerm154 = ((fSlow0 * (((fRec127[2] + (fRec127[0] + (2.0f * fRec127[1]))) + (fRec1[2] + (fRec1[0] + (2.0f * fRec1[1])))) / fTempPerm4)) + (fSlow1 * (fTempPerm1 + fTempPerm0)));
			output0[i] = (FAUSTFLOAT)fTempPerm154;
			output1[i] = (FAUSTFLOAT)fTempPerm154;
			// post processing
			fRec127[2] = fRec127[1]; fRec127[1] = fRec127[0];
			fRec1[2] = fRec1[1]; fRec1[1] = fRec1[0];
			fRec9[1] = fRec9[0];
			fRec113[1] = fRec113[0];
			fRec115[1] = fRec115[0];
			fRec117[1] = fRec117[0];
			fRec119[1] = fRec119[0];
			fRec121[1] = fRec121[0];
			fRec123[1] = fRec123[0];
			fRec125[2] = fRec125[1]; fRec125[1] = fRec125[0];
			fRec126[2] = fRec126[1]; fRec126[1] = fRec126[0];
			fRec8[1] = fRec8[0];
			fRec99[1] = fRec99[0];
			fRec101[1] = fRec101[0];
			fRec103[1] = fRec103[0];
			fRec105[1] = fRec105[0];
			fRec107[1] = fRec107[0];
			fRec109[1] = fRec109[0];
			fRec111[2] = fRec111[1]; fRec111[1] = fRec111[0];
			fRec112[2] = fRec112[1]; fRec112[1] = fRec112[0];
			fRec7[1] = fRec7[0];
			fRec85[1] = fRec85[0];
			fRec87[1] = fRec87[0];
			fRec89[1] = fRec89[0];
			fRec91[1] = fRec91[0];
			fRec93[1] = fRec93[0];
			fRec95[1] = fRec95[0];
			fRec97[2] = fRec97[1]; fRec97[1] = fRec97[0];
			fRec98[2] = fRec98[1]; fRec98[1] = fRec98[0];
			fRec6[1] = fRec6[0];
			fRec71[1] = fRec71[0];
			fRec73[1] = fRec73[0];
			fRec75[1] = fRec75[0];
			fRec77[1] = fRec77[0];
			fRec79[1] = fRec79[0];
			fRec81[1] = fRec81[0];
			fRec83[2] = fRec83[1]; fRec83[1] = fRec83[0];
			fRec84[2] = fRec84[1]; fRec84[1] = fRec84[0];
			fRec5[1] = fRec5[0];
			fRec57[1] = fRec57[0];
			fRec59[1] = fRec59[0];
			fRec61[1] = fRec61[0];
			fRec63[1] = fRec63[0];
			fRec65[1] = fRec65[0];
			fRec67[1] = fRec67[0];
			fRec69[2] = fRec69[1]; fRec69[1] = fRec69[0];
			fRec70[2] = fRec70[1]; fRec70[1] = fRec70[0];
			fRec56[1] = fRec56[0];
			fRec4[1] = fRec4[0];
			fRec41[2] = fRec41[1]; fRec41[1] = fRec41[0];
			fRec42[1] = fRec42[0];
			fRec44[1] = fRec44[0];
			fRec46[1] = fRec46[0];
			fRec48[1] = fRec48[0];
			fRec50[1] = fRec50[0];
			fRec52[1] = fRec52[0];
			fRec54[2] = fRec54[1]; fRec54[1] = fRec54[0];
			fRec55[2] = fRec55[1]; fRec55[1] = fRec55[0];
			fRec3[1] = fRec3[0];
			fRec27[1] = fRec27[0];
			fRec29[1] = fRec29[0];
			fRec31[1] = fRec31[0];
			fRec33[1] = fRec33[0];
			fRec35[1] = fRec35[0];
			fRec37[1] = fRec37[0];
			fRec39[2] = fRec39[1]; fRec39[1] = fRec39[0];
			fRec40[2] = fRec40[1]; fRec40[1] = fRec40[0];
			fRec2[1] = fRec2[0];
			fRec10[1] = fRec10[0];
			fRec12[1] = fRec12[0];
			fRec14[1] = fRec14[0];
			fRec16[1] = fRec16[0];
			fRec18[1] = fRec18[0];
			fRec20[1] = fRec20[0];
			fRec26[1] = fRec26[0];
			IOTA = IOTA+1;
			fRec22[2] = fRec22[1]; fRec22[1] = fRec22[0];
			fRec23[2] = fRec23[1]; fRec23[1] = fRec23[0];
			fRec24[1] = fRec24[0];
			fRec0[1] = fRec0[0];
		}
	}
};


float 	faust_wormhole::ftbl0[65536];
